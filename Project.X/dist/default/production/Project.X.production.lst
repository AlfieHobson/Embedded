

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Dec 12 14:19:26 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 2.05
    82                           ; Generated 20/12/2018 GMT
    83                           ; 
    84                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F877A Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  0000                     nosup@@$_$_CONFIG	set	0	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001D                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  0081                     	;# 
   212  0085                     	;# 
   213  0086                     	;# 
   214  0087                     	;# 
   215  0088                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  0000                     nosup@@$_$_CONFIG	set	0	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  000E                     	;# 
   253  000F                     	;# 
   254  0010                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  001D                     	;# 
   270  001E                     	;# 
   271  001F                     	;# 
   272  0081                     	;# 
   273  0085                     	;# 
   274  0086                     	;# 
   275  0087                     	;# 
   276  0088                     	;# 
   277  0089                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  0091                     	;# 
   282  0092                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297  0000                     nosup@@$_$_CONFIG	set	0	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0008                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0088                     	;# 
   338  0089                     	;# 
   339  008C                     	;# 
   340  008D                     	;# 
   341  008E                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0094                     	;# 
   346  0098                     	;# 
   347  0099                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  010C                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  010F                     	;# 
   356  018C                     	;# 
   357  018D                     	;# 
   358  0000                     nosup@@$_$_CONFIG	set	0	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  0008                     	;# 
   368  0009                     	;# 
   369  000A                     	;# 
   370  000B                     	;# 
   371  000C                     	;# 
   372  000D                     	;# 
   373  000E                     	;# 
   374  000E                     	;# 
   375  000F                     	;# 
   376  0010                     	;# 
   377  0011                     	;# 
   378  0012                     	;# 
   379  0013                     	;# 
   380  0014                     	;# 
   381  0015                     	;# 
   382  0015                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001B                     	;# 
   390  001C                     	;# 
   391  001D                     	;# 
   392  001E                     	;# 
   393  001F                     	;# 
   394  0081                     	;# 
   395  0085                     	;# 
   396  0086                     	;# 
   397  0087                     	;# 
   398  0088                     	;# 
   399  0089                     	;# 
   400  008C                     	;# 
   401  008D                     	;# 
   402  008E                     	;# 
   403  0091                     	;# 
   404  0092                     	;# 
   405  0093                     	;# 
   406  0094                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009E                     	;# 
   412  009F                     	;# 
   413  010C                     	;# 
   414  010D                     	;# 
   415  010E                     	;# 
   416  010F                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0000                     nosup@@$_$_CONFIG	set	0	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  000E                     	;# 
   436  000F                     	;# 
   437  0010                     	;# 
   438  0011                     	;# 
   439  0012                     	;# 
   440  0013                     	;# 
   441  0014                     	;# 
   442  0015                     	;# 
   443  0015                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  001D                     	;# 
   453  001E                     	;# 
   454  001F                     	;# 
   455  0081                     	;# 
   456  0085                     	;# 
   457  0086                     	;# 
   458  0087                     	;# 
   459  0088                     	;# 
   460  0089                     	;# 
   461  008C                     	;# 
   462  008D                     	;# 
   463  008E                     	;# 
   464  0091                     	;# 
   465  0092                     	;# 
   466  0093                     	;# 
   467  0094                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  009F                     	;# 
   474  010C                     	;# 
   475  010D                     	;# 
   476  010E                     	;# 
   477  010F                     	;# 
   478  018C                     	;# 
   479  018D                     	;# 
   480  0000                     nosup@@$_$_CONFIG	set	0	;# 
   481  0000                     	;# 
   482  0001                     	;# 
   483  0002                     	;# 
   484  0003                     	;# 
   485  0004                     	;# 
   486  0005                     	;# 
   487  0006                     	;# 
   488  0007                     	;# 
   489  0008                     	;# 
   490  0009                     	;# 
   491  000A                     	;# 
   492  000B                     	;# 
   493  000C                     	;# 
   494  000D                     	;# 
   495  000E                     	;# 
   496  000E                     	;# 
   497  000F                     	;# 
   498  0010                     	;# 
   499  0011                     	;# 
   500  0012                     	;# 
   501  0013                     	;# 
   502  0014                     	;# 
   503  0015                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  001D                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  0081                     	;# 
   517  0085                     	;# 
   518  0086                     	;# 
   519  0087                     	;# 
   520  0088                     	;# 
   521  0089                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0091                     	;# 
   526  0092                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0098                     	;# 
   530  0099                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  009F                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  010F                     	;# 
   539  018C                     	;# 
   540  018D                     	;# 
   541  0000                     nosup@@$_$_CONFIG	set	0	;# 
   542  0000                     	;# 
   543  0001                     	;# 
   544  0002                     	;# 
   545  0003                     	;# 
   546  0004                     	;# 
   547  0005                     	;# 
   548  0006                     	;# 
   549  0007                     	;# 
   550  0008                     	;# 
   551  0009                     	;# 
   552  000A                     	;# 
   553  000B                     	;# 
   554  000C                     	;# 
   555  000D                     	;# 
   556  000E                     	;# 
   557  000E                     	;# 
   558  000F                     	;# 
   559  0010                     	;# 
   560  0011                     	;# 
   561  0012                     	;# 
   562  0013                     	;# 
   563  0014                     	;# 
   564  0015                     	;# 
   565  0015                     	;# 
   566  0016                     	;# 
   567  0017                     	;# 
   568  0018                     	;# 
   569  0019                     	;# 
   570  001A                     	;# 
   571  001B                     	;# 
   572  001B                     	;# 
   573  001C                     	;# 
   574  001D                     	;# 
   575  001E                     	;# 
   576  001F                     	;# 
   577  0081                     	;# 
   578  0085                     	;# 
   579  0086                     	;# 
   580  0087                     	;# 
   581  0088                     	;# 
   582  0089                     	;# 
   583  008C                     	;# 
   584  008D                     	;# 
   585  008E                     	;# 
   586  0091                     	;# 
   587  0092                     	;# 
   588  0093                     	;# 
   589  0094                     	;# 
   590  0098                     	;# 
   591  0099                     	;# 
   592  009C                     	;# 
   593  009D                     	;# 
   594  009E                     	;# 
   595  009F                     	;# 
   596  010C                     	;# 
   597  010D                     	;# 
   598  010E                     	;# 
   599  010F                     	;# 
   600  018C                     	;# 
   601  018D                     	;# 
   602  0000                     nosup@@$_$_CONFIG	set	0	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  000E                     	;# 
   619  000F                     	;# 
   620  0010                     	;# 
   621  0011                     	;# 
   622  0012                     	;# 
   623  0013                     	;# 
   624  0014                     	;# 
   625  0015                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  001D                     	;# 
   636  001E                     	;# 
   637  001F                     	;# 
   638  0081                     	;# 
   639  0085                     	;# 
   640  0086                     	;# 
   641  0087                     	;# 
   642  0088                     	;# 
   643  0089                     	;# 
   644  008C                     	;# 
   645  008D                     	;# 
   646  008E                     	;# 
   647  0091                     	;# 
   648  0092                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0098                     	;# 
   652  0099                     	;# 
   653  009C                     	;# 
   654  009D                     	;# 
   655  009E                     	;# 
   656  009F                     	;# 
   657  010C                     	;# 
   658  010D                     	;# 
   659  010E                     	;# 
   660  010F                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  0000                     nosup@@$_$_CONFIG	set	0	;# 
   664  0000                     	;# 
   665  0001                     	;# 
   666  0002                     	;# 
   667  0003                     	;# 
   668  0004                     	;# 
   669  0005                     	;# 
   670  0006                     	;# 
   671  0007                     	;# 
   672  0008                     	;# 
   673  0009                     	;# 
   674  000A                     	;# 
   675  000B                     	;# 
   676  000C                     	;# 
   677  000D                     	;# 
   678  000E                     	;# 
   679  000E                     	;# 
   680  000F                     	;# 
   681  0010                     	;# 
   682  0011                     	;# 
   683  0012                     	;# 
   684  0013                     	;# 
   685  0014                     	;# 
   686  0015                     	;# 
   687  0015                     	;# 
   688  0016                     	;# 
   689  0017                     	;# 
   690  0018                     	;# 
   691  0019                     	;# 
   692  001A                     	;# 
   693  001B                     	;# 
   694  001B                     	;# 
   695  001C                     	;# 
   696  001D                     	;# 
   697  001E                     	;# 
   698  001F                     	;# 
   699  0081                     	;# 
   700  0085                     	;# 
   701  0086                     	;# 
   702  0087                     	;# 
   703  0088                     	;# 
   704  0089                     	;# 
   705  008C                     	;# 
   706  008D                     	;# 
   707  008E                     	;# 
   708  0091                     	;# 
   709  0092                     	;# 
   710  0093                     	;# 
   711  0094                     	;# 
   712  0098                     	;# 
   713  0099                     	;# 
   714  009C                     	;# 
   715  009D                     	;# 
   716  009E                     	;# 
   717  009F                     	;# 
   718  010C                     	;# 
   719  010D                     	;# 
   720  010E                     	;# 
   721  010F                     	;# 
   722  018C                     	;# 
   723  018D                     	;# 
   724  0000                     	;# 
   725  0001                     	;# 
   726  0002                     	;# 
   727  0003                     	;# 
   728  0004                     	;# 
   729  0005                     	;# 
   730  0006                     	;# 
   731  0007                     	;# 
   732  0008                     	;# 
   733  0009                     	;# 
   734  000A                     	;# 
   735  000B                     	;# 
   736  000C                     	;# 
   737  000D                     	;# 
   738  000E                     	;# 
   739  000E                     	;# 
   740  000F                     	;# 
   741  0010                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0013                     	;# 
   745  0014                     	;# 
   746  0015                     	;# 
   747  0015                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001B                     	;# 
   755  001C                     	;# 
   756  001D                     	;# 
   757  001E                     	;# 
   758  001F                     	;# 
   759  0081                     	;# 
   760  0085                     	;# 
   761  0086                     	;# 
   762  0087                     	;# 
   763  0088                     	;# 
   764  0089                     	;# 
   765  008C                     	;# 
   766  008D                     	;# 
   767  008E                     	;# 
   768  0091                     	;# 
   769  0092                     	;# 
   770  0093                     	;# 
   771  0094                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009C                     	;# 
   775  009D                     	;# 
   776  009E                     	;# 
   777  009F                     	;# 
   778  010C                     	;# 
   779  010D                     	;# 
   780  010E                     	;# 
   781  010F                     	;# 
   782  018C                     	;# 
   783  018D                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000D                     	;# 
   798  000E                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  001D                     	;# 
   817  001E                     	;# 
   818  001F                     	;# 
   819  0081                     	;# 
   820  0085                     	;# 
   821  0086                     	;# 
   822  0087                     	;# 
   823  0088                     	;# 
   824  0089                     	;# 
   825  008C                     	;# 
   826  008D                     	;# 
   827  008E                     	;# 
   828  0091                     	;# 
   829  0092                     	;# 
   830  0093                     	;# 
   831  0094                     	;# 
   832  0098                     	;# 
   833  0099                     	;# 
   834  009C                     	;# 
   835  009D                     	;# 
   836  009E                     	;# 
   837  009F                     	;# 
   838  010C                     	;# 
   839  010D                     	;# 
   840  010E                     	;# 
   841  010F                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844                           
   845                           	psect	idataBANK1
   846  0003                     __pidataBANK1:	
   847                           
   848                           ;initializer for _dayLimits
   849  0003  34AA               	retlw	170
   850  0004  3400               	retlw	0
   851  0005  34D2               	retlw	210
   852  0006  3400               	retlw	0
   853  0007  34D7               	retlw	215
   854  0008  3400               	retlw	0
   855  0009  34FA               	retlw	250
   856  000A  3400               	retlw	0
   857                           
   858                           ;initializer for _screenCleared
   859  000B  3401               	retlw	1
   860                           
   861                           	psect	idataBANK3
   862  1151                     __pidataBANK3:	
   863                           
   864                           ;initializer for _daysInMonth
   865  1151  341F               	retlw	31
   866  1152  3400               	retlw	0
   867  1153  341D               	retlw	29
   868  1154  3400               	retlw	0
   869  1155  341F               	retlw	31
   870  1156  3400               	retlw	0
   871  1157  341E               	retlw	30
   872  1158  3400               	retlw	0
   873  1159  341F               	retlw	31
   874  115A  3400               	retlw	0
   875  115B  341E               	retlw	30
   876  115C  3400               	retlw	0
   877  115D  341F               	retlw	31
   878  115E  3400               	retlw	0
   879  115F  341F               	retlw	31
   880  1160  3400               	retlw	0
   881  1161  341E               	retlw	30
   882  1162  3400               	retlw	0
   883  1163  341F               	retlw	31
   884  1164  3400               	retlw	0
   885  1165  341E               	retlw	30
   886  1166  3400               	retlw	0
   887  1167  341F               	retlw	31
   888  1168  3400               	retlw	0
   889                           
   890                           ;initializer for _nightLimits
   891  1169  34AA               	retlw	170
   892  116A  3400               	retlw	0
   893  116B  34CD               	retlw	205
   894  116C  3400               	retlw	0
   895  116D  34D2               	retlw	210
   896  116E  3400               	retlw	0
   897  116F  34F5               	retlw	245
   898  1170  3400               	retlw	0
   899                           
   900                           ;initializer for _weekdays
   901  1171  3496               	retlw	low ((STR_1-__stringbase)| (0+32768))
   902  1172  348E               	retlw	low ((STR_2-__stringbase)| (0+32768))
   903  1173  348A               	retlw	low ((STR_3-__stringbase)| (0+32768))
   904  1174  34A2               	retlw	low ((STR_4-__stringbase)| (0+32768))
   905  1175  3492               	retlw	low ((STR_5-__stringbase)| (0+32768))
   906  1176  349E               	retlw	low ((STR_6-__stringbase)| (0+32768))
   907  1177  349A               	retlw	low ((STR_7-__stringbase)| (0+32768))
   908                           
   909                           	psect	strings
   910  1000                     __pstrings:	
   911  1000                     stringtab:	
   912  1000                     __stringtab:	
   913  1000                     stringcode:	
   914                           ;	String table - string pointers are 1 byte each
   915                           
   916  1000                     stringdir:	
   917  1000  3010               	movlw	high stringdir
   918  1001  008A               	movwf	10
   919  1002  0804               	movf	4,w
   920  1003  0A84               	incf	4,f
   921  1004  0782               	addwf	2,f
   922  1005                     __stringbase:	
   923  1005  3400               	retlw	0
   924  1006                     __end_of__stringtab:	
   925  1006                     _RTCtable:	
   926  1006  3430               	retlw	48
   927  1007  3459               	retlw	89
   928  1008  3412               	retlw	18
   929  1009  3406               	retlw	6
   930  100A  3411               	retlw	17
   931  100B  3406               	retlw	6
   932  100C  3406               	retlw	6
   933  100D  3400               	retlw	0
   934  100E                     __end_of_RTCtable:	
   935  000B                     _INTCONbits	set	11
   936  0003                     _STATUSbits	set	3
   937  0007                     _PORTC	set	7
   938  0005                     _PORTA	set	5
   939  0008                     _PORTD	set	8
   940  0048                     _RE0	set	72
   941  0034                     _RB4	set	52
   942  0035                     _RB5	set	53
   943  0033                     _RB3	set	51
   944  0032                     _RB2	set	50
   945  0031                     _RB1	set	49
   946  0030                     _RB0	set	48
   947  003F                     _RC7	set	63
   948  003E                     _RC6	set	62
   949  003D                     _RC5	set	61
   950  003C                     _RC4	set	60
   951  003B                     _RC3	set	59
   952  003A                     _RC2	set	58
   953  0039                     _RC1	set	57
   954  0038                     _RC0	set	56
   955  002B                     _RA3	set	43
   956  002C                     _RA4	set	44
   957  002D                     _RA5	set	45
   958  002A                     _RA2	set	42
   959  0028                     _RA0	set	40
   960  0089                     _TRISE	set	137
   961  0081                     _OPTION_REG	set	129
   962  0086                     _TRISB	set	134
   963  0087                     _TRISC	set	135
   964  0088                     _TRISD	set	136
   965  0085                     _TRISA	set	133
   966  009F                     _ADCON1	set	159
   967  0434                     _TRISB4	set	1076
   968  0428                     _TRISA0	set	1064
   969  010C                     _EEDATA	set	268
   970  010D                     _EEADR	set	269
   971  018D                     _EECON2	set	397
   972  018C                     _EECON1	set	396
   973  018C                     _EECON1bits	set	396
   974  100E                     STR_19:	
   975  100E  344F               	retlw	79	;'O'
   976  100F  3470               	retlw	112	;'p'
   977  1010  3474               	retlw	116	;'t'
   978  1011  3469               	retlw	105	;'i'
   979  1012  346D               	retlw	109	;'m'
   980  1013  3461               	retlw	97	;'a'
   981  1014  346C               	retlw	108	;'l'
   982  1015  3420               	retlw	32	;' '
   983  1016  3420               	retlw	32	;' '
   984  1017  3420               	retlw	32	;' '
   985  1018  3420               	retlw	32	;' '
   986  1019  3420               	retlw	32	;' '
   987  101A  3420               	retlw	32	;' '
   988  101B  3420               	retlw	32	;' '
   989  101C  3420               	retlw	32	;' '
   990  101D  3420               	retlw	32	;' '
   991  101E  3400               	retlw	0
   992  101F                     STR_18:	
   993  101F  3448               	retlw	72	;'H'
   994  1020  3469               	retlw	105	;'i'
   995  1021  3467               	retlw	103	;'g'
   996  1022  3468               	retlw	104	;'h'
   997  1023  3420               	retlw	32	;' '
   998  1024  342D               	retlw	45	;'-'
   999  1025  3420               	retlw	32	;' '
  1000  1026  3441               	retlw	65	;'A'
  1001  1027  3443               	retlw	67	;'C'
  1002  1028  3420               	retlw	32	;' '
  1003  1029  344F               	retlw	79	;'O'
  1004  102A  344E               	retlw	78	;'N'
  1005  102B  3420               	retlw	32	;' '
  1006  102C  3420               	retlw	32	;' '
  1007  102D  3420               	retlw	32	;' '
  1008  102E  3420               	retlw	32	;' '
  1009  102F  3400               	retlw	0
  1010  1030                     STR_15:	
  1011  1030  3454               	retlw	84	;'T'
  1012  1031  344F               	retlw	79	;'O'
  1013  1032  344F               	retlw	79	;'O'
  1014  1033  3420               	retlw	32	;' '
  1015  1034  344C               	retlw	76	;'L'
  1016  1035  344F               	retlw	79	;'O'
  1017  1036  3457               	retlw	87	;'W'
  1018  1037  3421               	retlw	33	;'!'
  1019  1038  3420               	retlw	32	;' '
  1020  1039  3441               	retlw	65	;'A'
  1021  103A  344C               	retlw	76	;'L'
  1022  103B  3441               	retlw	65	;'A'
  1023  103C  3452               	retlw	82	;'R'
  1024  103D  344D               	retlw	77	;'M'
  1025  103E  3421               	retlw	33	;'!'
  1026  103F  3420               	retlw	32	;' '
  1027  1040  3400               	retlw	0
  1028  1041                     STR_17:	
  1029  1041  3454               	retlw	84	;'T'
  1030  1042  344F               	retlw	79	;'O'
  1031  1043  344F               	retlw	79	;'O'
  1032  1044  3420               	retlw	32	;' '
  1033  1045  3448               	retlw	72	;'H'
  1034  1046  3449               	retlw	73	;'I'
  1035  1047  3447               	retlw	71	;'G'
  1036  1048  3448               	retlw	72	;'H'
  1037  1049  3421               	retlw	33	;'!'
  1038  104A  3420               	retlw	32	;' '
  1039  104B  3441               	retlw	65	;'A'
  1040  104C  344C               	retlw	76	;'L'
  1041  104D  3441               	retlw	65	;'A'
  1042  104E  3452               	retlw	82	;'R'
  1043  104F  344D               	retlw	77	;'M'
  1044  1050  3421               	retlw	33	;'!'
  1045  1051  3400               	retlw	0
  1046  1052                     STR_16:	
  1047  1052  344C               	retlw	76	;'L'
  1048  1053  346F               	retlw	111	;'o'
  1049  1054  3477               	retlw	119	;'w'
  1050  1055  3420               	retlw	32	;' '
  1051  1056  342D               	retlw	45	;'-'
  1052  1057  3420               	retlw	32	;' '
  1053  1058  3448               	retlw	72	;'H'
  1054  1059  3465               	retlw	101	;'e'
  1055  105A  3461               	retlw	97	;'a'
  1056  105B  3474               	retlw	116	;'t'
  1057  105C  3469               	retlw	105	;'i'
  1058  105D  346E               	retlw	110	;'n'
  1059  105E  3467               	retlw	103	;'g'
  1060  105F  3420               	retlw	32	;' '
  1061  1060  344F               	retlw	79	;'O'
  1062  1061  344E               	retlw	78	;'N'
  1063  1062  3400               	retlw	0
  1064  1063                     STR_20:	
  1065  1063  3441               	retlw	65	;'A'
  1066  1064  346C               	retlw	108	;'l'
  1067  1065  3461               	retlw	97	;'a'
  1068  1066  3472               	retlw	114	;'r'
  1069  1067  346D               	retlw	109	;'m'
  1070  1068  3420               	retlw	32	;' '
  1071  1069  3452               	retlw	82	;'R'
  1072  106A  3465               	retlw	101	;'e'
  1073  106B  3473               	retlw	115	;'s'
  1074  106C  3465               	retlw	101	;'e'
  1075  106D  3474               	retlw	116	;'t'
  1076  106E  3474               	retlw	116	;'t'
  1077  106F  3469               	retlw	105	;'i'
  1078  1070  346E               	retlw	110	;'n'
  1079  1071  3467               	retlw	103	;'g'
  1080  1072  3400               	retlw	0
  1081  1073                     STR_23:	
  1082  1073  344E               	retlw	78	;'N'
  1083  1074  3449               	retlw	73	;'I'
  1084  1075  3447               	retlw	71	;'G'
  1085  1076  3448               	retlw	72	;'H'
  1086  1077  3454               	retlw	84	;'T'
  1087  1078  3420               	retlw	32	;' '
  1088  1079  344C               	retlw	76	;'L'
  1089  107A  3449               	retlw	73	;'I'
  1090  107B  344D               	retlw	77	;'M'
  1091  107C  3449               	retlw	73	;'I'
  1092  107D  3454               	retlw	84	;'T'
  1093  107E  3453               	retlw	83	;'S'
  1094  107F  3400               	retlw	0
  1095  1080                     STR_22:	
  1096  1080  3444               	retlw	68	;'D'
  1097  1081  3441               	retlw	65	;'A'
  1098  1082  3459               	retlw	89	;'Y'
  1099  1083  3420               	retlw	32	;' '
  1100  1084  344C               	retlw	76	;'L'
  1101  1085  3449               	retlw	73	;'I'
  1102  1086  344D               	retlw	77	;'M'
  1103  1087  3449               	retlw	73	;'I'
  1104  1088  3454               	retlw	84	;'T'
  1105  1089  3453               	retlw	83	;'S'
  1106  108A  3400               	retlw	0
  1107  108B                     STR_21:	
  1108  108B  3469               	retlw	105	;'i'
  1109  108C  346E               	retlw	110	;'n'
  1110  108D  343A               	retlw	58	;':'
  1111  108E  3400               	retlw	0
  1112  108F                     STR_3:	
  1113  108F  3457               	retlw	87	;'W'
  1114  1090  3445               	retlw	69	;'E'
  1115  1091  3444               	retlw	68	;'D'
  1116  1092  3400               	retlw	0
  1117  1093                     STR_2:	
  1118  1093  3454               	retlw	84	;'T'
  1119  1094  3455               	retlw	85	;'U'
  1120  1095  3445               	retlw	69	;'E'
  1121  1096  3400               	retlw	0
  1122  1097                     STR_5:	
  1123  1097  3446               	retlw	70	;'F'
  1124  1098  3452               	retlw	82	;'R'
  1125  1099  3449               	retlw	73	;'I'
  1126  109A  3400               	retlw	0
  1127  109B                     STR_1:	
  1128  109B  344D               	retlw	77	;'M'
  1129  109C  344F               	retlw	79	;'O'
  1130  109D  344E               	retlw	78	;'N'
  1131  109E  3400               	retlw	0
  1132  109F                     STR_7:	
  1133  109F  3453               	retlw	83	;'S'
  1134  10A0  3455               	retlw	85	;'U'
  1135  10A1  344E               	retlw	78	;'N'
  1136  10A2  3400               	retlw	0
  1137  10A3                     STR_6:	
  1138  10A3  3453               	retlw	83	;'S'
  1139  10A4  3441               	retlw	65	;'A'
  1140  10A5  3454               	retlw	84	;'T'
  1141  10A6  3400               	retlw	0
  1142  10A7                     STR_4:	
  1143  10A7  3454               	retlw	84	;'T'
  1144  10A8  3448               	retlw	72	;'H'
  1145  10A9  3455               	retlw	85	;'U'
  1146  10AA  3400               	retlw	0
  1147  10AB                     STR_12:	
  1148  10AB  342F               	retlw	47	;'/'
  1149  10AC  3400               	retlw	0
  1150  1019                     
  1151                           ; #config settings
  1152  0000                     
  1153                           	psect	cinit
  1154  07C5                     start_initialization:	
  1155  07C5                     __initialization:	
  1156                           
  1157                           ; Initialize objects allocated to BANK3
  1158  07C5  1783               	bsf	3,7	;select IRP bank2
  1159  07C6  30E2               	movlw	low (__pdataBANK3+39)
  1160  07C7  00FD               	movwf	btemp+-1
  1161  07C8  3011               	movlw	high __pidataBANK3
  1162  07C9  00FE               	movwf	btemp
  1163  07CA  3051               	movlw	low __pidataBANK3
  1164  07CB  00FF               	movwf	btemp+1
  1165  07CC  30BB               	movlw	low __pdataBANK3
  1166  07CD  0084               	movwf	4
  1167  07CE  160A  158A  26B0  120A  118A  	fcall	init_ram0
  1168                           
  1169                           ; Initialize objects allocated to BANK1
  1170  07D3  1383               	bcf	3,7	;select IRP bank0
  1171  07D4  30EE               	movlw	low (__pdataBANK1+9)
  1172  07D5  00FD               	movwf	btemp+-1
  1173  07D6  3000               	movlw	high __pidataBANK1
  1174  07D7  00FE               	movwf	btemp
  1175  07D8  3003               	movlw	low __pidataBANK1
  1176  07D9  00FF               	movwf	btemp+1
  1177  07DA  30E5               	movlw	low __pdataBANK1
  1178  07DB  0084               	movwf	4
  1179  07DC  160A  158A  26B0  120A  118A  	fcall	init_ram0
  1180                           
  1181                           ; Clear objects allocated to BANK3
  1182  07E1  1783               	bsf	3,7	;select IRP bank2
  1183  07E2  3090               	movlw	low __pbssBANK3
  1184  07E3  0084               	movwf	4
  1185  07E4  30BB               	movlw	low (__pbssBANK3+43)
  1186  07E5  160A  158A  2693  120A  118A  	fcall	clear_ram0
  1187                           
  1188                           ; Clear objects allocated to BANK2
  1189  07EA  3010               	movlw	low __pbssBANK2
  1190  07EB  0084               	movwf	4
  1191  07EC  3030               	movlw	low (__pbssBANK2+32)
  1192  07ED  160A  158A  2693  120A  118A  	fcall	clear_ram0
  1193                           
  1194                           ; Clear objects allocated to BANK1
  1195  07F2  1383               	bcf	3,7	;select IRP bank0
  1196  07F3  30CE               	movlw	low __pbssBANK1
  1197  07F4  0084               	movwf	4
  1198  07F5  30E5               	movlw	low (__pbssBANK1+23)
  1199  07F6  160A  158A  2693   	fcall	clear_ram0
  1200                           
  1201                           ; Clear objects allocated to BITBANK1
  1202  07F9  1683               	bsf	3,5	;RP0=1, select bank1
  1203  07FA  1303               	bcf	3,6	;RP1=0, select bank1
  1204  07FB  01EE               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  1205  07FC                     end_of_initialization:	
  1206                           ;End of C runtime variable initialization code
  1207                           
  1208  07FC                     __end_of__initialization:	
  1209  07FC  0183               	clrf	3
  1210  07FD  120A  118A  299A   	ljmp	_main	;jump to C main() function
  1211                           
  1212                           	psect	bitbssBANK1
  1213  0770                     __pbitbssBANK1:	
  1214  0770                     therm_read_byte@j:	
  1215  0770                     	ds	1
  1216                           
  1217                           	psect	bssBANK1
  1218  00CE                     __pbssBANK1:	
  1219  00CE                     _currentTemp:	
  1220  00CE                     	ds	5
  1221  00D3                     therm_getTemp@F960:	
  1222  00D3                     	ds	5
  1223  00D8                     RTC_seperateNibbles@F994:	
  1224  00D8                     	ds	2
  1225  00DA                     _button:	
  1226  00DA                     	ds	2
  1227  00DC                     _wd:	
  1228  00DC                     	ds	2
  1229  00DE                     _dp:	
  1230  00DE                     	ds	1
  1231  00DF                     _first:	
  1232  00DF                     	ds	1
  1233  00E0                     _tenth:	
  1234  00E0                     	ds	1
  1235  00E1                     _TX:	
  1236  00E1                     	ds	1
  1237  00E2                     _TZ:	
  1238  00E2                     	ds	1
  1239  00E3                     _THV:	
  1240  00E3                     	ds	1
  1241  00E4                     _TLV:	
  1242  00E4                     	ds	1
  1243                           
  1244                           	psect	dataBANK1
  1245  00E5                     __pdataBANK1:	
  1246  00E5                     _dayLimits:	
  1247  00E5                     	ds	8
  1248  00ED                     _screenCleared:	
  1249  00ED                     	ds	1
  1250                           
  1251                           	psect	bssBANK3
  1252  0190                     __pbssBANK3:	
  1253  0190                     _currentTime:	
  1254  0190                     	ds	16
  1255  01A0                     EEPROM_limitsRead@F940:	
  1256  01A0                     	ds	8
  1257  01A8                     _getTable:	
  1258  01A8                     	ds	7
  1259  01AF                     _setTable:	
  1260  01AF                     	ds	7
  1261  01B6                     _savedTemp:	
  1262  01B6                     	ds	5
  1263                           
  1264                           	psect	dataBANK3
  1265  01BB                     __pdataBANK3:	
  1266  01BB                     _daysInMonth:	
  1267  01BB                     	ds	24
  1268  01D3                     _nightLimits:	
  1269  01D3                     	ds	8
  1270  01DB                     _weekdays:	
  1271  01DB                     	ds	7
  1272                           
  1273                           	psect	bssBANK2
  1274  0110                     __pbssBANK2:	
  1275  0110                     _savedTime:	
  1276  0110                     	ds	16
  1277  0120                     RTC_splitTime@F988:	
  1278  0120                     	ds	16
  1279                           
  1280                           	psect	inittext
  1281  1EAC                     init_fetch0:	
  1282                           ;	Called with low address in FSR and high address in W
  1283                           
  1284  1EAC  087E               	movf	126,w
  1285  1EAD  008A               	movwf	10
  1286  1EAE  087F               	movf	127,w
  1287  1EAF  0082               	movwf	2
  1288  1EB0                     init_ram0:	
  1289                           ;Called with:
  1290                           ;	high address of idata address in btemp 
  1291                           ;	low address of idata address in btemp+1 
  1292                           ;	low address of data in FSR
  1293                           ;	high address + 1 of data in btemp-1
  1294                           
  1295  1EB0  26AC  160A  158A   	fcall	init_fetch0
  1296  1EB3  0080               	movwf	0
  1297  1EB4  0A84               	incf	4,f
  1298  1EB5  0804               	movf	4,w
  1299  1EB6  067D               	xorwf	125,w
  1300  1EB7  1903               	btfsc	3,2
  1301  1EB8  3400               	retlw	0
  1302  1EB9  0AFF               	incf	127,f
  1303  1EBA  1903               	btfsc	3,2
  1304  1EBB  0AFE               	incf	126,f
  1305  1EBC  2EB0               	goto	init_ram0
  1306                           
  1307                           	psect	clrtext
  1308  1E93                     clear_ram0:	
  1309                           ;	Called with FSR containing the base address, and
  1310                           ;	W with the last address+1
  1311                           
  1312  1E93  0064               	clrwdt	;clear the watchdog before getting into this loop
  1313  1E94                     clrloop0:	
  1314  1E94  0180               	clrf	0	;clear RAM location pointed to by FSR
  1315  1E95  0A84               	incf	4,f	;increment pointer
  1316  1E96  0604               	xorwf	4,w	;XOR with final address
  1317  1E97  1903               	btfsc	3,2	;have we reached the end yet?
  1318  1E98  3400               	retlw	0	;all done for this memory range, return
  1319  1E99  0604               	xorwf	4,w	;XOR again to restore value
  1320  1E9A  2E94               	goto	clrloop0	;do the next byte
  1321                           
  1322                           	psect	cstackBANK1
  1323  00A0                     __pcstackBANK1:	
  1324  00A0                     RTC_getTime@t:	
  1325                           
  1326                           ; 16 bytes @ 0x0
  1327  00A0                     	ds	16
  1328  00B0                     alarmMode@alarm:	
  1329                           
  1330                           ; 2 bytes @ 0x10
  1331  00B0                     	ds	2
  1332  00B2                     alarmMode@button:	
  1333                           
  1334                           ; 2 bytes @ 0x12
  1335  00B2                     	ds	2
  1336  00B4                     ??_checkTemp:	
  1337                           
  1338                           ; 1 bytes @ 0x14
  1339  00B4                     	ds	5
  1340  00B9                     checkTemp@lowLimit:	
  1341                           
  1342                           ; 2 bytes @ 0x19
  1343  00B9                     	ds	2
  1344  00BB                     checkTemp@low:	
  1345                           
  1346                           ; 2 bytes @ 0x1B
  1347  00BB                     	ds	2
  1348  00BD                     checkTemp@high:	
  1349                           
  1350                           ; 2 bytes @ 0x1D
  1351  00BD                     	ds	2
  1352  00BF                     checkTemp@highLimit:	
  1353                           
  1354                           ; 2 bytes @ 0x1F
  1355  00BF                     	ds	2
  1356  00C1                     checkTemp@day:	
  1357                           
  1358                           ; 1 bytes @ 0x21
  1359  00C1                     	ds	1
  1360  00C2                     ?_main:	
  1361  00C2                     main@argc:	
  1362                           ; 2 bytes @ 0x22
  1363                           
  1364                           
  1365                           ; 2 bytes @ 0x22
  1366  00C2                     	ds	2
  1367  00C4                     main@argv:	
  1368                           
  1369                           ; 2 bytes @ 0x24
  1370  00C4                     	ds	2
  1371  00C6                     ??_main:	
  1372                           
  1373                           ; 1 bytes @ 0x26
  1374  00C6                     	ds	8
  1375                           
  1376                           	psect	cstackCOMMON
  1377  0070                     __pcstackCOMMON:	
  1378  0070                     ?_LCD_writeCmd:	
  1379  0070                     ?_RTC_init:	
  1380                           ; 1 bytes @ 0x0
  1381                           
  1382  0070                     ??_RTC_init:	
  1383                           ; 1 bytes @ 0x0
  1384                           
  1385  0070                     ?_RTC_ds1302_init:	
  1386                           ; 1 bytes @ 0x0
  1387                           
  1388  0070                     ?_RTC_combineNibbles:	
  1389                           ; 1 bytes @ 0x0
  1390                           
  1391  0070                     ?_RTC_writeClock:	
  1392                           ; 1 bytes @ 0x0
  1393                           
  1394  0070                     ?_RTC_readClock:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397  0070                     ?_RTC_seperateNibbles:	
  1398                           ; 1 bytes @ 0x0
  1399                           
  1400  0070                     ??_RTC_seperateNibbles:	
  1401                           ; 1 bytes @ 0x0
  1402                           
  1403  0070                     ?_RTC_time_write_1:	
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406  0070                     ??_RTC_time_write_1:	
  1407                           ; 1 bytes @ 0x0
  1408                           
  1409  0070                     ?_RTC_time_read_1:	
  1410                           ; 1 bytes @ 0x0
  1411                           
  1412  0070                     ??_RTC_time_read_1:	
  1413                           ; 1 bytes @ 0x0
  1414                           
  1415  0070                     ?_eeprom_read:	
  1416                           ; 1 bytes @ 0x0
  1417                           
  1418  0070                     ??_eeprom_read:	
  1419                           ; 1 bytes @ 0x0
  1420                           
  1421  0070                     ?_eeprom_write:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424  0070                     ?_displayTime:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427  0070                     ?_displayTemp:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430  0070                     ?_checkTemp:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433  0070                     ?_delayLong:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436  0070                     ??_delayLong:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439  0070                     ?_alarmMode:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0070                     ?_buzzer_alarmOn:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0070                     ?_buzzer_alarmOff:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0070                     ??_buzzer_alarmOff:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0070                     ?_systemReset:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_therm_delay:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0070                     ?_therm_init:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0070                     ??_therm_init:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0070                     ?_therm_write_byte:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ?_therm_read_byte:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     ?_therm_get_temp:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0070                     ?_LCD_delay:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0070                     ??_LCD_delay:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0070                     ?_LCD_init:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ?_LCD_writeChar:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ?_LCD_clear:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?_LCD_firstLine:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ?_LCD_secondLine:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?_LCD_thirdLine:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ?_LCD_fourthLine:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?_matrix_init:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ??_matrix_init:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_matrix_buttonDelay:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ??_matrix_buttonDelay:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_matrix_setInputs:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ??_RTC_isDay:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_RTC_setTimeBackup:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_EEPROM_isEmpty:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_buzzer_delay:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_buzzer_delay:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_therm_reset:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_pushButtons_checkButtons:	
  1533                           ; 2 bytes @ 0x0
  1534                           
  1535  0070                     ?___wmul:	
  1536                           ; 2 bytes @ 0x0
  1537                           
  1538  0070                     ?___awdiv:	
  1539                           ; 2 bytes @ 0x0
  1540                           
  1541  0070                     ?___lwdiv:	
  1542                           ; 2 bytes @ 0x0
  1543                           
  1544  0070                     therm_delay@y:	
  1545                           ; 2 bytes @ 0x0
  1546                           
  1547  0070                     RTC_combineNibbles@second:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     eeprom_write@value:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     LCD_delay@i:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     matrix_buttonDelay@i:	
  1557                           ; 2 bytes @ 0x0
  1558                           
  1559  0070                     matrix_setInputs@counter:	
  1560                           ; 2 bytes @ 0x0
  1561                           
  1562  0070                     delayLong@i:	
  1563                           ; 2 bytes @ 0x0
  1564                           
  1565  0070                     buzzer_delay@i:	
  1566                           ; 2 bytes @ 0x0
  1567                           
  1568  0070                     ___wmul@multiplier:	
  1569                           ; 2 bytes @ 0x0
  1570                           
  1571  0070                     ___awdiv@divisor:	
  1572                           ; 2 bytes @ 0x0
  1573                           
  1574  0070                     ___lwdiv@divisor:	
  1575                           ; 2 bytes @ 0x0
  1576                           
  1577                           
  1578                           ; 2 bytes @ 0x0
  1579  0070                     	ds	1
  1580  0071                     ??_RTC_combineNibbles:	
  1581  0071                     ??_eeprom_write:	
  1582                           ; 1 bytes @ 0x1
  1583                           
  1584  0071                     ??_therm_delay:	
  1585                           ; 1 bytes @ 0x1
  1586                           
  1587  0071                     eeprom_read@addr:	
  1588                           ; 1 bytes @ 0x1
  1589                           
  1590                           
  1591                           ; 1 bytes @ 0x1
  1592  0071                     	ds	1
  1593  0072                     ??_LCD_writeCmd:	
  1594  0072                     ??_buzzer_alarmOn:	
  1595                           ; 1 bytes @ 0x2
  1596                           
  1597  0072                     ??_LCD_writeChar:	
  1598                           ; 1 bytes @ 0x2
  1599                           
  1600  0072                     ??_matrix_setInputs:	
  1601                           ; 1 bytes @ 0x2
  1602                           
  1603  0072                     ??_pushButtons_checkButtons:	
  1604                           ; 1 bytes @ 0x2
  1605                           
  1606  0072                     ??_EEPROM_isEmpty:	
  1607                           ; 1 bytes @ 0x2
  1608                           
  1609  0072                     ?_matrix_checkButtons:	
  1610                           ; 1 bytes @ 0x2
  1611                           
  1612  0072                     ?_EEPROM_limitsRead:	
  1613                           ; 2 bytes @ 0x2
  1614                           
  1615  0072                     therm_delay@x:	
  1616                           ; 8 bytes @ 0x2
  1617                           
  1618  0072                     LCD_writeCmd@x:	
  1619                           ; 1 bytes @ 0x2
  1620                           
  1621  0072                     LCD_writeChar@x:	
  1622                           ; 1 bytes @ 0x2
  1623                           
  1624  0072                     RTC_seperateNibbles@secondByte:	
  1625                           ; 1 bytes @ 0x2
  1626                           
  1627  0072                     eeprom_write@addr:	
  1628                           ; 1 bytes @ 0x2
  1629                           
  1630  0072                     RTC_time_write_1@j:	
  1631                           ; 1 bytes @ 0x2
  1632                           
  1633  0072                     RTC_time_read_1@j:	
  1634                           ; 2 bytes @ 0x2
  1635                           
  1636  0072                     ___wmul@multiplicand:	
  1637                           ; 2 bytes @ 0x2
  1638                           
  1639  0072                     ___awdiv@dividend:	
  1640                           ; 2 bytes @ 0x2
  1641                           
  1642  0072                     ___lwdiv@dividend:	
  1643                           ; 2 bytes @ 0x2
  1644                           
  1645                           
  1646                           ; 2 bytes @ 0x2
  1647  0072                     	ds	1
  1648  0073                     ??_userInput_displayDate:	
  1649  0073                     ??_userInput_displayTime:	
  1650                           ; 1 bytes @ 0x3
  1651                           
  1652  0073                     ??_LCD_init:	
  1653                           ; 1 bytes @ 0x3
  1654                           
  1655  0073                     ?_LCD_write:	
  1656                           ; 1 bytes @ 0x3
  1657                           
  1658  0073                     ??_LCD_clear:	
  1659                           ; 1 bytes @ 0x3
  1660                           
  1661  0073                     ??_LCD_firstLine:	
  1662                           ; 1 bytes @ 0x3
  1663                           
  1664  0073                     ??_LCD_secondLine:	
  1665                           ; 1 bytes @ 0x3
  1666                           
  1667  0073                     ??_LCD_thirdLine:	
  1668                           ; 1 bytes @ 0x3
  1669                           
  1670  0073                     ??_LCD_fourthLine:	
  1671                           ; 1 bytes @ 0x3
  1672                           
  1673  0073                     ?_EEPROM_limitsWrite:	
  1674                           ; 1 bytes @ 0x3
  1675                           
  1676  0073                     therm_delay@z:	
  1677                           ; 1 bytes @ 0x3
  1678                           
  1679  0073                     LCD_write@len:	
  1680                           ; 1 bytes @ 0x3
  1681                           
  1682  0073                     RTC_seperateNibbles@hex:	
  1683                           ; 1 bytes @ 0x3
  1684                           
  1685  0073                     RTC_combineNibbles@first:	
  1686                           ; 1 bytes @ 0x3
  1687                           
  1688  0073                     EEPROM_limitsWrite@limits:	
  1689                           ; 1 bytes @ 0x3
  1690                           
  1691                           
  1692                           ; 8 bytes @ 0x3
  1693  0073                     	ds	1
  1694  0074                     ??_therm_reset:	
  1695  0074                     ??_therm_write_byte:	
  1696                           ; 1 bytes @ 0x4
  1697                           
  1698  0074                     ??_therm_read_byte:	
  1699                           ; 1 bytes @ 0x4
  1700                           
  1701  0074                     ??_LCD_write:	
  1702                           ; 1 bytes @ 0x4
  1703                           
  1704  0074                     ??_matrix_checkButtons:	
  1705                           ; 1 bytes @ 0x4
  1706                           
  1707  0074                     ??___wmul:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710  0074                     ??___awdiv:	
  1711                           ; 1 bytes @ 0x4
  1712                           
  1713  0074                     ??___lwdiv:	
  1714                           ; 1 bytes @ 0x4
  1715                           
  1716  0074                     RTC_seperateNibbles@firstByte:	
  1717                           ; 1 bytes @ 0x4
  1718                           
  1719  0074                     RTC_combineNibbles@returnChar:	
  1720                           ; 1 bytes @ 0x4
  1721                           
  1722  0074                     RTC_time_write_1@time_tx:	
  1723                           ; 1 bytes @ 0x4
  1724                           
  1725  0074                     RTC_time_read_1@time_rx:	
  1726                           ; 1 bytes @ 0x4
  1727                           
  1728  0074                     matrix_checkButtons@j:	
  1729                           ; 1 bytes @ 0x4
  1730                           
  1731  0074                     EEPROM_isEmpty@test1:	
  1732                           ; 2 bytes @ 0x4
  1733                           
  1734  0074                     ___wmul@product:	
  1735                           ; 2 bytes @ 0x4
  1736                           
  1737                           
  1738                           ; 2 bytes @ 0x4
  1739  0074                     	ds	1
  1740  0075                     ??_RTC_ds1302_init:	
  1741  0075                     ??_RTC_writeClock:	
  1742                           ; 1 bytes @ 0x5
  1743                           
  1744  0075                     ??_RTC_readClock:	
  1745                           ; 1 bytes @ 0x5
  1746                           
  1747  0075                     ??_RTC_setTimeBackup:	
  1748                           ; 1 bytes @ 0x5
  1749                           
  1750  0075                     therm_reset@presence:	
  1751                           ; 1 bytes @ 0x5
  1752                           
  1753  0075                     therm_read_byte@value:	
  1754                           ; 1 bytes @ 0x5
  1755                           
  1756  0075                     ___awdiv@counter:	
  1757                           ; 1 bytes @ 0x5
  1758                           
  1759  0075                     LCD_write@i:	
  1760                           ; 1 bytes @ 0x5
  1761                           
  1762  0075                     RTC_seperateNibbles@dataSplit:	
  1763                           ; 2 bytes @ 0x5
  1764                           
  1765  0075                     RTC_writeClock@i:	
  1766                           ; 2 bytes @ 0x5
  1767                           
  1768  0075                     RTC_setTimeBackup@i:	
  1769                           ; 2 bytes @ 0x5
  1770                           
  1771  0075                     ___lwdiv@quotient:	
  1772                           ; 2 bytes @ 0x5
  1773                           
  1774                           
  1775                           ; 2 bytes @ 0x5
  1776  0075                     	ds	1
  1777  0076                     therm_write_byte@temp:	
  1778  0076                     therm_read_byte@i:	
  1779                           ; 1 bytes @ 0x6
  1780                           
  1781  0076                     ___awdiv@sign:	
  1782                           ; 1 bytes @ 0x6
  1783                           
  1784  0076                     matrix_checkButtons@i:	
  1785                           ; 1 bytes @ 0x6
  1786                           
  1787  0076                     RTC_readClock@i:	
  1788                           ; 2 bytes @ 0x6
  1789                           
  1790  0076                     EEPROM_isEmpty@test2:	
  1791                           ; 2 bytes @ 0x6
  1792                           
  1793                           
  1794                           ; 2 bytes @ 0x6
  1795  0076                     	ds	1
  1796  0077                     ??_RTC_splitTime:	
  1797  0077                     ??_RTC_setTime:	
  1798                           ; 1 bytes @ 0x7
  1799                           
  1800  0077                     therm_write_byte@val:	
  1801                           ; 1 bytes @ 0x7
  1802                           
  1803  0077                     LCD_write@string:	
  1804                           ; 1 bytes @ 0x7
  1805                           
  1806  0077                     ___lwdiv@counter:	
  1807                           ; 1 bytes @ 0x7
  1808                           
  1809  0077                     ___awdiv@quotient:	
  1810                           ; 1 bytes @ 0x7
  1811                           
  1812                           
  1813                           ; 2 bytes @ 0x7
  1814  0077                     	ds	1
  1815  0078                     ??_displayTime:	
  1816  0078                     ??_displayTemp:	
  1817                           ; 1 bytes @ 0x8
  1818                           
  1819  0078                     therm_write_byte@i:	
  1820                           ; 1 bytes @ 0x8
  1821                           
  1822  0078                     matrix_checkButtons@counter:	
  1823                           ; 1 bytes @ 0x8
  1824                           
  1825  0078                     EEPROM_isEmpty@test3:	
  1826                           ; 2 bytes @ 0x8
  1827                           
  1828                           
  1829                           ; 2 bytes @ 0x8
  1830  0078                     	ds	1
  1831  0079                     ?___awmod:	
  1832  0079                     ___awmod@divisor:	
  1833                           ; 2 bytes @ 0x9
  1834                           
  1835                           
  1836                           ; 2 bytes @ 0x9
  1837  0079                     	ds	1
  1838  007A                     ??_userInput_getTime:	
  1839  007A                     ??_EEPROM_limitsRead:	
  1840                           ; 1 bytes @ 0xA
  1841                           
  1842  007A                     EEPROM_isEmpty@test4:	
  1843                           ; 1 bytes @ 0xA
  1844                           
  1845                           
  1846                           ; 2 bytes @ 0xA
  1847  007A                     	ds	1
  1848  007B                     EEPROM_limitsWrite@day:	
  1849  007B                     systemReset@currentSecond:	
  1850                           ; 1 bytes @ 0xB
  1851                           
  1852  007B                     ___awmod@dividend:	
  1853                           ; 1 bytes @ 0xB
  1854                           
  1855                           
  1856                           ; 2 bytes @ 0xB
  1857  007B                     	ds	1
  1858  007C                     ??_EEPROM_limitsWrite:	
  1859  007C                     EEPROM_isEmpty@empty:	
  1860                           ; 1 bytes @ 0xC
  1861                           
  1862  007C                     systemReset@counter:	
  1863                           ; 1 bytes @ 0xC
  1864                           
  1865                           
  1866                           ; 2 bytes @ 0xC
  1867  007C                     	ds	1
  1868  007D                     ??___awmod:	
  1869                           
  1870                           ; 1 bytes @ 0xD
  1871  007D                     	ds	1
  1872  007E                     ??_alarmMode:	
  1873                           
  1874                           	psect	cstackBANK0
  1875  0020                     __pcstackBANK0:	
  1876                           ; 1 bytes @ 0xE
  1877                           
  1878  0020                     ?_userInput_displayDate:	
  1879  0020                     ?_userInput_displayTime:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0020                     ?_RTC_setTime:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0020                     ?_RTC_isDay:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0020                     ?_RTC_splitTime:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0020                     ___awmod@counter:	
  1892                           ; 16 bytes @ 0x0
  1893                           
  1894  0020                     EEPROM_limitsRead@lowLimit:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0020                     EEPROM_limitsWrite@addressStart:	
  1898                           ; 2 bytes @ 0x0
  1899                           
  1900  0020                     RTC_setTime@time:	
  1901                           ; 2 bytes @ 0x0
  1902                           
  1903  0020                     RTC_isDay@time:	
  1904                           ; 16 bytes @ 0x0
  1905                           
  1906  0020                     userInput_displayTime@time:	
  1907                           ; 16 bytes @ 0x0
  1908                           
  1909  0020                     userInput_displayDate@date:	
  1910                           ; 16 bytes @ 0x0
  1911                           
  1912                           
  1913                           ; 16 bytes @ 0x0
  1914  0020                     	ds	1
  1915  0021                     ___awmod@sign:	
  1916                           
  1917                           ; 1 bytes @ 0x1
  1918  0021                     	ds	1
  1919  0022                     ?_userInput_displayLimits:	
  1920  0022                     ??_therm_get_temp:	
  1921                           ; 1 bytes @ 0x2
  1922                           
  1923  0022                     EEPROM_limitsRead@low:	
  1924                           ; 1 bytes @ 0x2
  1925                           
  1926  0022                     userInput_displayLimits@limits:	
  1927                           ; 2 bytes @ 0x2
  1928                           
  1929                           
  1930                           ; 8 bytes @ 0x2
  1931  0022                     	ds	2
  1932  0024                     EEPROM_limitsRead@high:	
  1933                           
  1934                           ; 2 bytes @ 0x4
  1935  0024                     	ds	2
  1936  0026                     ?_therm_getTemp:	
  1937  0026                     EEPROM_limitsRead@highLimit:	
  1938                           ; 5 bytes @ 0x6
  1939                           
  1940                           
  1941                           ; 2 bytes @ 0x6
  1942  0026                     	ds	2
  1943  0028                     EEPROM_limitsRead@day:	
  1944                           
  1945                           ; 1 bytes @ 0x8
  1946  0028                     	ds	1
  1947  0029                     EEPROM_limitsRead@addressStart:	
  1948                           
  1949                           ; 2 bytes @ 0x9
  1950  0029                     	ds	1
  1951  002A                     userInput_displayLimits@day:	
  1952                           
  1953                           ; 2 bytes @ 0xA
  1954  002A                     	ds	1
  1955  002B                     ??_therm_getTemp:	
  1956  002B                     EEPROM_limitsRead@dayLimit:	
  1957                           ; 1 bytes @ 0xB
  1958                           
  1959                           
  1960                           ; 8 bytes @ 0xB
  1961  002B                     	ds	1
  1962  002C                     ??_userInput_displayLimits:	
  1963                           
  1964                           ; 1 bytes @ 0xC
  1965  002C                     	ds	1
  1966  002D                     userInput_displayLimits@LL0:	
  1967                           
  1968                           ; 1 bytes @ 0xD
  1969  002D                     	ds	1
  1970  002E                     userInput_displayLimits@LL1:	
  1971                           
  1972                           ; 1 bytes @ 0xE
  1973  002E                     	ds	1
  1974  002F                     userInput_displayLimits@LL2:	
  1975                           
  1976                           ; 1 bytes @ 0xF
  1977  002F                     	ds	1
  1978  0030                     ?_userInput_getTime:	
  1979  0030                     ?_userInput_getDate:	
  1980                           ; 16 bytes @ 0x10
  1981                           
  1982  0030                     RTC_splitTime@sec1:	
  1983                           ; 16 bytes @ 0x10
  1984                           
  1985  0030                     userInput_displayLimits@L0:	
  1986                           ; 1 bytes @ 0x10
  1987                           
  1988  0030                     userInput_getDate@date:	
  1989                           ; 1 bytes @ 0x10
  1990                           
  1991  0030                     userInput_getTime@time:	
  1992                           ; 16 bytes @ 0x10
  1993                           
  1994                           
  1995                           ; 16 bytes @ 0x10
  1996  0030                     	ds	1
  1997  0031                     RTC_splitTime@sec2:	
  1998  0031                     userInput_displayLimits@L1:	
  1999                           ; 1 bytes @ 0x11
  2000                           
  2001                           
  2002                           ; 1 bytes @ 0x11
  2003  0031                     	ds	1
  2004  0032                     RTC_splitTime@min1:	
  2005  0032                     userInput_displayLimits@L2:	
  2006                           ; 1 bytes @ 0x12
  2007                           
  2008                           
  2009                           ; 1 bytes @ 0x12
  2010  0032                     	ds	1
  2011  0033                     RTC_splitTime@min2:	
  2012  0033                     userInput_displayLimits@H0:	
  2013                           ; 1 bytes @ 0x13
  2014                           
  2015  0033                     therm_getTemp@mergeTemp:	
  2016                           ; 1 bytes @ 0x13
  2017                           
  2018                           
  2019                           ; 2 bytes @ 0x13
  2020  0033                     	ds	1
  2021  0034                     RTC_splitTime@hour1:	
  2022  0034                     userInput_displayLimits@H1:	
  2023                           ; 1 bytes @ 0x14
  2024                           
  2025                           
  2026                           ; 1 bytes @ 0x14
  2027  0034                     	ds	1
  2028  0035                     RTC_splitTime@hour2:	
  2029  0035                     userInput_displayLimits@H2:	
  2030                           ; 1 bytes @ 0x15
  2031                           
  2032  0035                     therm_getTemp@t:	
  2033                           ; 1 bytes @ 0x15
  2034                           
  2035                           
  2036                           ; 5 bytes @ 0x15
  2037  0035                     	ds	1
  2038  0036                     RTC_splitTime@day1:	
  2039  0036                     userInput_displayLimits@HL0:	
  2040                           ; 1 bytes @ 0x16
  2041                           
  2042                           
  2043                           ; 1 bytes @ 0x16
  2044  0036                     	ds	1
  2045  0037                     RTC_splitTime@day2:	
  2046  0037                     userInput_displayLimits@HL1:	
  2047                           ; 1 bytes @ 0x17
  2048                           
  2049                           
  2050                           ; 1 bytes @ 0x17
  2051  0037                     	ds	1
  2052  0038                     RTC_splitTime@month1:	
  2053  0038                     userInput_displayLimits@HL2:	
  2054                           ; 1 bytes @ 0x18
  2055                           
  2056                           
  2057                           ; 1 bytes @ 0x18
  2058  0038                     	ds	1
  2059  0039                     ?_userInput_getTempLimits:	
  2060  0039                     RTC_splitTime@month2:	
  2061                           ; 8 bytes @ 0x19
  2062                           
  2063  0039                     userInput_getTempLimits@limit:	
  2064                           ; 1 bytes @ 0x19
  2065                           
  2066                           
  2067                           ; 8 bytes @ 0x19
  2068  0039                     	ds	1
  2069  003A                     RTC_splitTime@week1:	
  2070                           
  2071                           ; 1 bytes @ 0x1A
  2072  003A                     	ds	1
  2073  003B                     RTC_splitTime@week2:	
  2074                           
  2075                           ; 1 bytes @ 0x1B
  2076  003B                     	ds	1
  2077  003C                     RTC_splitTime@year1:	
  2078                           
  2079                           ; 1 bytes @ 0x1C
  2080  003C                     	ds	1
  2081  003D                     RTC_splitTime@year2:	
  2082                           
  2083                           ; 1 bytes @ 0x1D
  2084  003D                     	ds	1
  2085  003E                     RTC_splitTime@sec:	
  2086                           
  2087                           ; 1 bytes @ 0x1E
  2088  003E                     	ds	1
  2089  003F                     RTC_splitTime@min:	
  2090                           
  2091                           ; 1 bytes @ 0x1F
  2092  003F                     	ds	1
  2093  0040                     ??_userInput_getDate:	
  2094  0040                     RTC_splitTime@hour:	
  2095                           ; 1 bytes @ 0x20
  2096                           
  2097                           
  2098                           ; 1 bytes @ 0x20
  2099  0040                     	ds	1
  2100  0041                     RTC_splitTime@day:	
  2101  0041                     userInput_getTempLimits@day:	
  2102                           ; 1 bytes @ 0x21
  2103                           
  2104                           
  2105                           ; 2 bytes @ 0x21
  2106  0041                     	ds	1
  2107  0042                     RTC_splitTime@month:	
  2108  0042                     userInput_getTime@button:	
  2109                           ; 1 bytes @ 0x22
  2110                           
  2111                           
  2112                           ; 2 bytes @ 0x22
  2113  0042                     	ds	1
  2114  0043                     ??_userInput_getTempLimits:	
  2115  0043                     RTC_splitTime@week:	
  2116                           ; 1 bytes @ 0x23
  2117                           
  2118                           
  2119                           ; 1 bytes @ 0x23
  2120  0043                     	ds	1
  2121  0044                     RTC_splitTime@year:	
  2122  0044                     userInput_getDate@button:	
  2123                           ; 1 bytes @ 0x24
  2124                           
  2125  0044                     userInput_getTime@timeAddressCounter:	
  2126                           ; 2 bytes @ 0x24
  2127                           
  2128                           
  2129                           ; 2 bytes @ 0x24
  2130  0044                     	ds	1
  2131  0045                     RTC_splitTime@t:	
  2132                           
  2133                           ; 16 bytes @ 0x25
  2134  0045                     	ds	1
  2135  0046                     userInput_getTime@increment:	
  2136  0046                     userInput_getDate@month:	
  2137                           ; 1 bytes @ 0x26
  2138                           
  2139                           
  2140                           ; 2 bytes @ 0x26
  2141  0046                     	ds	1
  2142  0047                     userInput_getTime@decrement:	
  2143  0047                     userInput_getTempLimits@exit:	
  2144                           ; 1 bytes @ 0x27
  2145                           
  2146                           
  2147                           ; 2 bytes @ 0x27
  2148  0047                     	ds	1
  2149  0048                     userInput_getTime@buttonPress:	
  2150  0048                     userInput_getDate@dayLimit:	
  2151                           ; 1 bytes @ 0x28
  2152                           
  2153                           
  2154                           ; 2 bytes @ 0x28
  2155  0048                     	ds	1
  2156  0049                     userInput_getTempLimits@button:	
  2157                           
  2158                           ; 2 bytes @ 0x29
  2159  0049                     	ds	1
  2160  004A                     userInput_getDate@dateAddressCounter:	
  2161                           
  2162                           ; 2 bytes @ 0x2A
  2163  004A                     	ds	1
  2164  004B                     userInput_getTempLimits@buttonPress:	
  2165                           
  2166                           ; 1 bytes @ 0x2B
  2167  004B                     	ds	1
  2168  004C                     userInput_getDate@increment:	
  2169  004C                     userInput_getTempLimits@addressCounter:	
  2170                           ; 1 bytes @ 0x2C
  2171                           
  2172                           
  2173                           ; 2 bytes @ 0x2C
  2174  004C                     	ds	1
  2175  004D                     userInput_getDate@decrement:	
  2176                           
  2177                           ; 1 bytes @ 0x2D
  2178  004D                     	ds	1
  2179  004E                     userInput_getDate@buttonPress:	
  2180  004E                     userInput_getTempLimits@increment:	
  2181                           ; 1 bytes @ 0x2E
  2182                           
  2183                           
  2184                           ; 1 bytes @ 0x2E
  2185  004E                     	ds	1
  2186  004F                     userInput_getTempLimits@decrement:	
  2187  004F                     userInput_getDate@year:	
  2188                           ; 1 bytes @ 0x2F
  2189                           
  2190                           
  2191                           ; 2 bytes @ 0x2F
  2192  004F                     	ds	1
  2193  0050                     userInput_getTempLimits@newLimits:	
  2194                           
  2195                           ; 8 bytes @ 0x30
  2196  0050                     	ds	1
  2197  0051                     userInput_getDate@month_669:	
  2198                           
  2199                           ; 2 bytes @ 0x31
  2200  0051                     	ds	2
  2201  0053                     userInput_getDate@day:	
  2202                           
  2203                           ; 2 bytes @ 0x33
  2204  0053                     	ds	2
  2205  0055                     ?_RTC_getTime:	
  2206                           
  2207                           ; 16 bytes @ 0x35
  2208  0055                     	ds	16
  2209  0065                     ??_RTC_getTime:	
  2210                           
  2211                           ; 1 bytes @ 0x45
  2212  0065                     	ds	4
  2213  0069                     ??_systemReset:	
  2214                           
  2215                           ; 1 bytes @ 0x49
  2216  0069                     	ds	4
  2217  006D                     main@pushButton:	
  2218                           
  2219                           ; 2 bytes @ 0x4D
  2220  006D                     	ds	2
  2221  006F                     main@emptyEEPROM:	
  2222                           
  2223                           ; 1 bytes @ 0x4F
  2224  006F                     	ds	1
  2225                           
  2226                           	psect	maintext
  2227  019A                     __pmaintext:	
  2228 ;;
  2229 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  2230 ;;
  2231 ;; *************** function _main *****************
  2232 ;; Defined at:
  2233 ;;		line 46 in file "main.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  argc            2   34[BANK1 ] int 
  2236 ;;  argv            2   36[BANK1 ] PTR PTR unsigned char 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  pushButton      2   77[BANK0 ] int 
  2239 ;;  emptyEEPROM     1   79[BANK0 ] _Bool 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  2   34[BANK1 ] int 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : B00/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2249 ;;      Params:         0       0       4       0       0
  2250 ;;      Locals:         0       3       0       0       0
  2251 ;;      Temps:          0       0       8       0       0
  2252 ;;      Totals:         0       3      12       0       0
  2253 ;;Total ram usage:       15 bytes
  2254 ;; Hardware stack levels required when called:    6
  2255 ;; This function calls:
  2256 ;;		_EEPROM_isEmpty
  2257 ;;		_EEPROM_limitsRead
  2258 ;;		_EEPROM_limitsWrite
  2259 ;;		_LCD_clear
  2260 ;;		_LCD_init
  2261 ;;		_RTC_getTime
  2262 ;;		_RTC_setTime
  2263 ;;		_RTC_setTimeBackup
  2264 ;;		_checkTemp
  2265 ;;		_displayTemp
  2266 ;;		_displayTime
  2267 ;;		_pushButtons_checkButtons
  2268 ;;		_therm_getTemp
  2269 ;;		_userInput_getDate
  2270 ;;		_userInput_getTempLimits
  2271 ;;		_userInput_getTime
  2272 ;; This function is called by:
  2273 ;;		Startup code after reset
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           
  2278                           ;psect for function _main
  2279  019A                     _main:	
  2280                           
  2281                           ;main.c: 50:     while (1) {
  2282                           
  2283                           ;incstack = 0
  2284                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2285  019A  160A  158A  2748  120A  118A  	fcall	_LCD_init
  2286                           
  2287                           ;main.c: 51: 
  2288  019F  160A  158A  2675  120A  118A  	fcall	_LCD_clear
  2289                           
  2290                           ;main.c: 54: 
  2291  01A4  160A  118A  22A4  120A  118A  	fcall	_RTC_setTimeBackup
  2292                           
  2293                           ;main.c: 58: 
  2294  01A9  160A  118A  2443  120A  118A  	fcall	_EEPROM_isEmpty
  2295  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2296  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  2297  01B0  00C6               	movwf	??_main^(0+128)
  2298  01B1  0846               	movf	??_main^(0+128),w
  2299  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  2300  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  2301  01B4  00EF               	movwf	main@emptyEEPROM
  2302                           
  2303                           ;main.c: 59:         displayTime();
  2304  01B5  086F               	movf	main@emptyEEPROM,w
  2305  01B6  1903               	btfsc	3,2
  2306  01B7  29F3               	goto	l403
  2307                           
  2308                           ;main.c: 60: ;main.c: 62:         displayTemp();
  2309  01B8  3073               	movlw	EEPROM_limitsWrite@limits& (0+255)
  2310  01B9  0084               	movwf	4
  2311  01BA  30E5               	movlw	low _dayLimits
  2312  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  2313  01BC  1303               	bcf	3,6	;RP1=0, select bank1
  2314  01BD  00C6               	movwf	??_main^(0+128)
  2315  01BE  0804               	movf	4,w
  2316  01BF  00C7               	movwf	(??_main^(0+128)+1)
  2317  01C0  3008               	movlw	8
  2318  01C1  00C8               	movwf	(??_main^(0+128)+2)
  2319  01C2                     u4030:	
  2320  01C2  0846               	movf	??_main^(0+128),w
  2321  01C3  0084               	movwf	4
  2322  01C4  1383               	bcf	3,7	;select IRP bank1
  2323  01C5  0800               	movf	0,w
  2324  01C6  00C9               	movwf	(??_main^(0+128)+3)
  2325  01C7  0AC6               	incf	??_main^(0+128),f
  2326  01C8  0847               	movf	(??_main^(0+128)+1),w
  2327  01C9  0084               	movwf	4
  2328  01CA  0849               	movf	(??_main^(0+128)+3),w
  2329  01CB  0080               	movwf	0
  2330  01CC  0AC7               	incf	(??_main^(0+128)+1),f
  2331  01CD  0BC8               	decfsz	(??_main^(0+128)+2),f
  2332  01CE  29C2               	goto	u4030
  2333  01CF  01FB               	clrf	EEPROM_limitsWrite@day
  2334  01D0  0AFB               	incf	EEPROM_limitsWrite@day,f
  2335  01D1  160A  118A  23C4  120A  118A  	fcall	_EEPROM_limitsWrite
  2336                           
  2337                           ;main.c: 63: 
  2338  01D6  3073               	movlw	EEPROM_limitsWrite@limits& (0+255)
  2339  01D7  0084               	movwf	4
  2340  01D8  30D3               	movlw	low _nightLimits
  2341  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  2342  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  2343  01DB  00C6               	movwf	??_main^(0+128)
  2344  01DC  0804               	movf	4,w
  2345  01DD  00C7               	movwf	(??_main^(0+128)+1)
  2346  01DE  3008               	movlw	8
  2347  01DF  00C8               	movwf	(??_main^(0+128)+2)
  2348  01E0                     u4040:	
  2349  01E0  0846               	movf	??_main^(0+128),w
  2350  01E1  0084               	movwf	4
  2351  01E2  1783               	bsf	3,7	;select IRP bank3
  2352  01E3  0800               	movf	0,w
  2353  01E4  00C9               	movwf	(??_main^(0+128)+3)
  2354  01E5  0AC6               	incf	??_main^(0+128),f
  2355  01E6  0847               	movf	(??_main^(0+128)+1),w
  2356  01E7  0084               	movwf	4
  2357  01E8  0849               	movf	(??_main^(0+128)+3),w
  2358  01E9  0080               	movwf	0
  2359  01EA  0AC7               	incf	(??_main^(0+128)+1),f
  2360  01EB  0BC8               	decfsz	(??_main^(0+128)+2),f
  2361  01EC  29E0               	goto	u4040
  2362  01ED  01FB               	clrf	EEPROM_limitsWrite@day
  2363  01EE  160A  118A  23C4  120A  118A  	fcall	_EEPROM_limitsWrite
  2364  01F3                     l403:	
  2365                           ;main.c: 64: 
  2366                           
  2367                           
  2368                           ;main.c: 67: 
  2369  01F3  3001               	movlw	1
  2370  01F4  160A  118A  2650  120A  118A  	fcall	_EEPROM_limitsRead
  2371  01F9  30E5               	movlw	_dayLimits& (0+255)
  2372  01FA  0084               	movwf	4
  2373  01FB  3072               	movlw	low ?_EEPROM_limitsRead
  2374  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  2375  01FD  1303               	bcf	3,6	;RP1=0, select bank1
  2376  01FE  00C6               	movwf	??_main^(0+128)
  2377  01FF  0804               	movf	4,w
  2378  0200  00C7               	movwf	(??_main^(0+128)+1)
  2379  0201  3008               	movlw	8
  2380  0202  00C8               	movwf	(??_main^(0+128)+2)
  2381  0203                     u4050:	
  2382  0203  0846               	movf	??_main^(0+128),w
  2383  0204  0084               	movwf	4
  2384  0205  0800               	movf	0,w
  2385  0206  00C9               	movwf	(??_main^(0+128)+3)
  2386  0207  0AC6               	incf	??_main^(0+128),f
  2387  0208  0847               	movf	(??_main^(0+128)+1),w
  2388  0209  0084               	movwf	4
  2389  020A  1383               	bcf	3,7	;select IRP bank1
  2390  020B  0849               	movf	(??_main^(0+128)+3),w
  2391  020C  0080               	movwf	0
  2392  020D  0AC7               	incf	(??_main^(0+128)+1),f
  2393  020E  0BC8               	decfsz	(??_main^(0+128)+2),f
  2394  020F  2A03               	goto	u4050
  2395                           
  2396                           ;main.c: 68:         int pushButton = pushButtons_checkButtons();
  2397  0210  3000               	movlw	0
  2398  0211  160A  118A  2650  120A  118A  	fcall	_EEPROM_limitsRead
  2399  0216  30D3               	movlw	_nightLimits& (0+255)
  2400  0217  0084               	movwf	4
  2401  0218  3072               	movlw	low ?_EEPROM_limitsRead
  2402  0219  1683               	bsf	3,5	;RP0=1, select bank1
  2403  021A  1303               	bcf	3,6	;RP1=0, select bank1
  2404  021B  00C6               	movwf	??_main^(0+128)
  2405  021C  0804               	movf	4,w
  2406  021D  00C7               	movwf	(??_main^(0+128)+1)
  2407  021E  3008               	movlw	8
  2408  021F  00C8               	movwf	(??_main^(0+128)+2)
  2409  0220                     u4060:	
  2410  0220  0846               	movf	??_main^(0+128),w
  2411  0221  0084               	movwf	4
  2412  0222  0800               	movf	0,w
  2413  0223  00C9               	movwf	(??_main^(0+128)+3)
  2414  0224  0AC6               	incf	??_main^(0+128),f
  2415  0225  0847               	movf	(??_main^(0+128)+1),w
  2416  0226  0084               	movwf	4
  2417  0227  1783               	bsf	3,7	;select IRP bank3
  2418  0228  0849               	movf	(??_main^(0+128)+3),w
  2419  0229  0080               	movwf	0
  2420  022A  0AC7               	incf	(??_main^(0+128)+1),f
  2421  022B  0BC8               	decfsz	(??_main^(0+128)+2),f
  2422  022C  2A20               	goto	u4060
  2423  022D                     l404:	
  2424                           ;main.c: 71:             case 0:
  2425                           
  2426                           
  2427                           ;main.c: 73:                 if (currentTime.valid == 1)
  2428  022D  120A  158A  200E  120A  118A  	fcall	_therm_getTemp
  2429  0232  30CE               	movlw	_currentTemp& (0+255)
  2430  0233  0084               	movwf	4
  2431  0234  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0235  1303               	bcf	3,6	;RP1=0, select bank0
  2433  0236  0826               	movf	?_therm_getTemp,w
  2434  0237  1383               	bcf	3,7	;select IRP bank1
  2435  0238  0080               	movwf	0
  2436  0239  0A84               	incf	4,f
  2437  023A  0827               	movf	?_therm_getTemp+1,w
  2438  023B  0080               	movwf	0
  2439  023C  0A84               	incf	4,f
  2440  023D  0828               	movf	?_therm_getTemp+2,w
  2441  023E  0080               	movwf	0
  2442  023F  0A84               	incf	4,f
  2443  0240  0829               	movf	?_therm_getTemp+3,w
  2444  0241  0080               	movwf	0
  2445  0242  0A84               	incf	4,f
  2446  0243  082A               	movf	?_therm_getTemp+4,w
  2447  0244  0080               	movwf	0
  2448                           
  2449                           ;main.c: 76: 
  2450  0245  160A  118A  2402  120A  118A  	fcall	_RTC_getTime
  2451  024A  3090               	movlw	_currentTime& (0+255)
  2452  024B  0084               	movwf	4
  2453  024C  1283               	bcf	3,5	;RP0=0, select bank0
  2454  024D  1303               	bcf	3,6	;RP1=0, select bank0
  2455  024E  3055               	movlw	low ?_RTC_getTime
  2456  024F  1683               	bsf	3,5	;RP0=1, select bank1
  2457  0250  1303               	bcf	3,6	;RP1=0, select bank1
  2458  0251  00C6               	movwf	??_main^(0+128)
  2459  0252  0804               	movf	4,w
  2460  0253  00C7               	movwf	(??_main^(0+128)+1)
  2461  0254  3010               	movlw	16
  2462  0255  00C8               	movwf	(??_main^(0+128)+2)
  2463  0256                     u4070:	
  2464  0256  0846               	movf	??_main^(0+128),w
  2465  0257  0084               	movwf	4
  2466  0258  1383               	bcf	3,7	;select IRP bank0
  2467  0259  0800               	movf	0,w
  2468  025A  00C9               	movwf	(??_main^(0+128)+3)
  2469  025B  0AC6               	incf	??_main^(0+128),f
  2470  025C  0847               	movf	(??_main^(0+128)+1),w
  2471  025D  0084               	movwf	4
  2472  025E  1783               	bsf	3,7	;select IRP bank3
  2473  025F  0849               	movf	(??_main^(0+128)+3),w
  2474  0260  0080               	movwf	0
  2475  0261  0AC7               	incf	(??_main^(0+128)+1),f
  2476  0262  0BC8               	decfsz	(??_main^(0+128)+2),f
  2477  0263  2A56               	goto	u4070
  2478                           
  2479                           ;main.c: 78: 
  2480  0264  160A  158A  2748  120A  118A  	fcall	_LCD_init
  2481                           
  2482                           ;main.c: 80:                 break;
  2483  0269  120A  158A  225B  120A  118A  	fcall	_displayTime
  2484                           
  2485                           ;main.c: 83: 
  2486  026E  160A  118A  223A  120A  118A  	fcall	_displayTemp
  2487                           
  2488                           ;main.c: 86:                 {
  2489  0273  120A  158A  209A  120A  118A  	fcall	_checkTemp
  2490                           
  2491                           ;main.c: 89:                 }
  2492  0278  160A  118A  20E0  120A  118A  	fcall	_pushButtons_checkButtons
  2493  027D  0871               	movf	?_pushButtons_checkButtons+1,w
  2494  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2495  027F  1303               	bcf	3,6	;RP1=0, select bank0
  2496  0280  00EE               	movwf	main@pushButton+1
  2497  0281  0870               	movf	?_pushButtons_checkButtons,w
  2498  0282  00ED               	movwf	main@pushButton
  2499                           
  2500                           ;main.c: 91:                 screenCleared = 1;
  2501  0283  2BCB               	goto	l4837
  2502  0284                     l4807:	
  2503                           
  2504                           ;main.c: 93:             case 2:
  2505  0284  3030               	movlw	userInput_getTime@time& (0+255)
  2506  0285  0084               	movwf	4
  2507  0286  3090               	movlw	low _currentTime
  2508  0287  1683               	bsf	3,5	;RP0=1, select bank1
  2509  0288  1303               	bcf	3,6	;RP1=0, select bank1
  2510  0289  00C6               	movwf	??_main^(0+128)
  2511  028A  0804               	movf	4,w
  2512  028B  00C7               	movwf	(??_main^(0+128)+1)
  2513  028C  3010               	movlw	16
  2514  028D  00C8               	movwf	(??_main^(0+128)+2)
  2515  028E                     u4080:	
  2516  028E  0846               	movf	??_main^(0+128),w
  2517  028F  0084               	movwf	4
  2518  0290  1783               	bsf	3,7	;select IRP bank3
  2519  0291  0800               	movf	0,w
  2520  0292  00C9               	movwf	(??_main^(0+128)+3)
  2521  0293  0AC6               	incf	??_main^(0+128),f
  2522  0294  0847               	movf	(??_main^(0+128)+1),w
  2523  0295  0084               	movwf	4
  2524  0296  1383               	bcf	3,7	;select IRP bank0
  2525  0297  0849               	movf	(??_main^(0+128)+3),w
  2526  0298  0080               	movwf	0
  2527  0299  0AC7               	incf	(??_main^(0+128)+1),f
  2528  029A  0BC8               	decfsz	(??_main^(0+128)+2),f
  2529  029B  2A8E               	goto	u4080
  2530  029C  120A  118A  200C  120A  118A  	fcall	_userInput_getTime
  2531  02A1  3090               	movlw	_currentTime& (0+255)
  2532  02A2  0084               	movwf	4
  2533  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  2534  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  2535  02A5  3030               	movlw	low ?_userInput_getTime
  2536  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  2537  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  2538  02A8  00CA               	movwf	(??_main+4)^(0+128)
  2539  02A9  0804               	movf	4,w
  2540  02AA  00CB               	movwf	((??_main+4)^(0+128)+1)
  2541  02AB  3010               	movlw	16
  2542  02AC  00CC               	movwf	((??_main+4)^(0+128)+2)
  2543  02AD                     u4090:	
  2544  02AD  084A               	movf	(??_main+4)^(0+128),w
  2545  02AE  0084               	movwf	4
  2546  02AF  1383               	bcf	3,7	;select IRP bank0
  2547  02B0  0800               	movf	0,w
  2548  02B1  00CD               	movwf	((??_main+4)^(0+128)+3)
  2549  02B2  0ACA               	incf	(??_main+4)^(0+128),f
  2550  02B3  084B               	movf	((??_main+4)^(0+128)+1),w
  2551  02B4  0084               	movwf	4
  2552  02B5  1783               	bsf	3,7	;select IRP bank3
  2553  02B6  084D               	movf	((??_main+4)^(0+128)+3),w
  2554  02B7  0080               	movwf	0
  2555  02B8  0ACB               	incf	((??_main+4)^(0+128)+1),f
  2556  02B9  0BCC               	decfsz	((??_main+4)^(0+128)+2),f
  2557  02BA  2AAD               	goto	u4090
  2558  02BB                     L1:	
  2559                           
  2560                           ;main.c: 94:                 dayLimits = userInput_getTempLimits(dayLimits,1);
  2561  02BB  1683               	bsf	3,5	;RP0=1, select bank3
  2562  02BC  1703               	bsf	3,6	;RP1=1, select bank3
  2563  02BD  031E               	decf	(_currentTime^(0+384)+14),w
  2564  02BE  041F               	iorwf	((_currentTime+1)^(0+384)+14),w
  2565  02BF  1D03               	btfss	3,2
  2566  02C0  2ADE               	goto	l4813
  2567                           
  2568                           ;main.c: 95:                 EEPROM_limitsWrite(dayLimits,1);;main.c: 96:               
      +                            screenCleared = 1;
  2569  02C1  3020               	movlw	RTC_setTime@time& (0+255)
  2570  02C2  0084               	movwf	4
  2571  02C3  3090               	movlw	low _currentTime
  2572  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  2573  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  2574  02C6  00C6               	movwf	??_main^(0+128)
  2575  02C7  0804               	movf	4,w
  2576  02C8  00C7               	movwf	(??_main^(0+128)+1)
  2577  02C9  3010               	movlw	16
  2578  02CA  00C8               	movwf	(??_main^(0+128)+2)
  2579  02CB                     u4110:	
  2580  02CB  0846               	movf	??_main^(0+128),w
  2581  02CC  0084               	movwf	4
  2582  02CD  1783               	bsf	3,7	;select IRP bank3
  2583  02CE  0800               	movf	0,w
  2584  02CF  00C9               	movwf	(??_main^(0+128)+3)
  2585  02D0  0AC6               	incf	??_main^(0+128),f
  2586  02D1  0847               	movf	(??_main^(0+128)+1),w
  2587  02D2  0084               	movwf	4
  2588  02D3  1383               	bcf	3,7	;select IRP bank0
  2589  02D4  0849               	movf	(??_main^(0+128)+3),w
  2590  02D5  0080               	movwf	0
  2591  02D6  0AC7               	incf	(??_main^(0+128)+1),f
  2592  02D7  0BC8               	decfsz	(??_main^(0+128)+2),f
  2593  02D8  2ACB               	goto	u4110
  2594  02D9  160A  118A  26D4  120A  118A  	fcall	_RTC_setTime
  2595  02DE                     l4813:	
  2596                           
  2597                           ;main.c: 100:                 EEPROM_limitsWrite(nightLimits,0);
  2598  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  2599  02DF  1303               	bcf	3,6	;RP1=0, select bank1
  2600  02E0  01ED               	clrf	_screenCleared^(0+128)
  2601  02E1  0AED               	incf	_screenCleared^(0+128),f
  2602                           
  2603                           ;main.c: 101:                 screenCleared = 1;
  2604  02E2  2A2D               	goto	l404
  2605  02E3                     l4815:	
  2606                           
  2607                           ;main.c: 103:         }
  2608  02E3  3030               	movlw	userInput_getDate@date& (0+255)
  2609  02E4  0084               	movwf	4
  2610  02E5  3090               	movlw	low _currentTime
  2611  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  2612  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  2613  02E8  00C6               	movwf	??_main^(0+128)
  2614  02E9  0804               	movf	4,w
  2615  02EA  00C7               	movwf	(??_main^(0+128)+1)
  2616  02EB  3010               	movlw	16
  2617  02EC  00C8               	movwf	(??_main^(0+128)+2)
  2618  02ED                     u4120:	
  2619  02ED  0846               	movf	??_main^(0+128),w
  2620  02EE  0084               	movwf	4
  2621  02EF  1783               	bsf	3,7	;select IRP bank3
  2622  02F0  0800               	movf	0,w
  2623  02F1  00C9               	movwf	(??_main^(0+128)+3)
  2624  02F2  0AC6               	incf	??_main^(0+128),f
  2625  02F3  0847               	movf	(??_main^(0+128)+1),w
  2626  02F4  0084               	movwf	4
  2627  02F5  1383               	bcf	3,7	;select IRP bank0
  2628  02F6  0849               	movf	(??_main^(0+128)+3),w
  2629  02F7  0080               	movwf	0
  2630  02F8  0AC7               	incf	(??_main^(0+128)+1),f
  2631  02F9  0BC8               	decfsz	(??_main^(0+128)+2),f
  2632  02FA  2AED               	goto	u4120
  2633  02FB  120A  118A  23E1  120A  118A  	fcall	_userInput_getDate
  2634  0300  3090               	movlw	_currentTime& (0+255)
  2635  0301  0084               	movwf	4
  2636  0302  1283               	bcf	3,5	;RP0=0, select bank0
  2637  0303  1303               	bcf	3,6	;RP1=0, select bank0
  2638  0304  3030               	movlw	low ?_userInput_getDate
  2639  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2640  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2641  0307  00CA               	movwf	(??_main+4)^(0+128)
  2642  0308  0804               	movf	4,w
  2643  0309  00CB               	movwf	((??_main+4)^(0+128)+1)
  2644  030A  3010               	movlw	16
  2645  030B  00CC               	movwf	((??_main+4)^(0+128)+2)
  2646  030C                     u4130:	
  2647  030C  084A               	movf	(??_main+4)^(0+128),w
  2648  030D  0084               	movwf	4
  2649  030E  1383               	bcf	3,7	;select IRP bank0
  2650  030F  0800               	movf	0,w
  2651  0310  00CD               	movwf	((??_main+4)^(0+128)+3)
  2652  0311  0ACA               	incf	(??_main+4)^(0+128),f
  2653  0312  084B               	movf	((??_main+4)^(0+128)+1),w
  2654  0313  0084               	movwf	4
  2655  0314  1783               	bsf	3,7	;select IRP bank3
  2656  0315  084D               	movf	((??_main+4)^(0+128)+3),w
  2657  0316  0080               	movwf	0
  2658  0317  0ACB               	incf	((??_main+4)^(0+128)+1),f
  2659  0318  0BCC               	decfsz	((??_main+4)^(0+128)+2),f
  2660  0319  2B0C               	goto	u4130
  2661  031A  2ABB               	goto	L1
  2662  031B                     l4823:	
  2663                           ;main.c: 106: }
  2664                           
  2665                           
  2666                           ;main.c: 115:         LCD_write(weekdays[currentTime.week2 - 1],3);
  2667  031B  3039               	movlw	userInput_getTempLimits@limit& (0+255)
  2668  031C  0084               	movwf	4
  2669  031D  30E5               	movlw	low _dayLimits
  2670  031E  1683               	bsf	3,5	;RP0=1, select bank1
  2671  031F  1303               	bcf	3,6	;RP1=0, select bank1
  2672  0320  00C6               	movwf	??_main^(0+128)
  2673  0321  0804               	movf	4,w
  2674  0322  00C7               	movwf	(??_main^(0+128)+1)
  2675  0323  3008               	movlw	8
  2676  0324  00C8               	movwf	(??_main^(0+128)+2)
  2677  0325                     u4150:	
  2678  0325  0846               	movf	??_main^(0+128),w
  2679  0326  0084               	movwf	4
  2680  0327  1383               	bcf	3,7	;select IRP bank1
  2681  0328  0800               	movf	0,w
  2682  0329  00C9               	movwf	(??_main^(0+128)+3)
  2683  032A  0AC6               	incf	??_main^(0+128),f
  2684  032B  0847               	movf	(??_main^(0+128)+1),w
  2685  032C  0084               	movwf	4
  2686  032D  0849               	movf	(??_main^(0+128)+3),w
  2687  032E  0080               	movwf	0
  2688  032F  0AC7               	incf	(??_main^(0+128)+1),f
  2689  0330  0BC8               	decfsz	(??_main^(0+128)+2),f
  2690  0331  2B25               	goto	u4150
  2691  0332  3001               	movlw	1
  2692  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2693  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2694  0335  00C1               	movwf	userInput_getTempLimits@day
  2695  0336  3000               	movlw	0
  2696  0337  00C2               	movwf	userInput_getTempLimits@day+1
  2697  0338  120A  158A  2461  120A  118A  	fcall	_userInput_getTempLimits
  2698  033D  30E5               	movlw	_dayLimits& (0+255)
  2699  033E  0084               	movwf	4
  2700  033F  1283               	bcf	3,5	;RP0=0, select bank0
  2701  0340  1303               	bcf	3,6	;RP1=0, select bank0
  2702  0341  3039               	movlw	low ?_userInput_getTempLimits
  2703  0342  1683               	bsf	3,5	;RP0=1, select bank1
  2704  0343  1303               	bcf	3,6	;RP1=0, select bank1
  2705  0344  00CA               	movwf	(??_main+4)^(0+128)
  2706  0345  0804               	movf	4,w
  2707  0346  00CB               	movwf	((??_main+4)^(0+128)+1)
  2708  0347  3008               	movlw	8
  2709  0348  00CC               	movwf	((??_main+4)^(0+128)+2)
  2710  0349                     u4160:	
  2711  0349  084A               	movf	(??_main+4)^(0+128),w
  2712  034A  0084               	movwf	4
  2713  034B  1383               	bcf	3,7	;select IRP bank0
  2714  034C  0800               	movf	0,w
  2715  034D  00CD               	movwf	((??_main+4)^(0+128)+3)
  2716  034E  0ACA               	incf	(??_main+4)^(0+128),f
  2717  034F  084B               	movf	((??_main+4)^(0+128)+1),w
  2718  0350  0084               	movwf	4
  2719  0351  084D               	movf	((??_main+4)^(0+128)+3),w
  2720  0352  0080               	movwf	0
  2721  0353  0ACB               	incf	((??_main+4)^(0+128)+1),f
  2722  0354  0BCC               	decfsz	((??_main+4)^(0+128)+2),f
  2723  0355  2B49               	goto	u4160
  2724                           
  2725                           ;main.c: 116: 
  2726  0356  3073               	movlw	EEPROM_limitsWrite@limits& (0+255)
  2727  0357  0084               	movwf	4
  2728  0358  30E5               	movlw	low _dayLimits
  2729  0359  00C6               	movwf	??_main^(0+128)
  2730  035A  0804               	movf	4,w
  2731  035B  00C7               	movwf	(??_main^(0+128)+1)
  2732  035C  3008               	movlw	8
  2733  035D  00C8               	movwf	(??_main^(0+128)+2)
  2734  035E                     u4170:	
  2735  035E  0846               	movf	??_main^(0+128),w
  2736  035F  0084               	movwf	4
  2737  0360  1383               	bcf	3,7	;select IRP bank1
  2738  0361  0800               	movf	0,w
  2739  0362  00C9               	movwf	(??_main^(0+128)+3)
  2740  0363  0AC6               	incf	??_main^(0+128),f
  2741  0364  0847               	movf	(??_main^(0+128)+1),w
  2742  0365  0084               	movwf	4
  2743  0366  0849               	movf	(??_main^(0+128)+3),w
  2744  0367  0080               	movwf	0
  2745  0368  0AC7               	incf	(??_main^(0+128)+1),f
  2746  0369  0BC8               	decfsz	(??_main^(0+128)+2),f
  2747  036A  2B5E               	goto	u4170
  2748  036B  01FB               	clrf	EEPROM_limitsWrite@day
  2749  036C  0AFB               	incf	EEPROM_limitsWrite@day,f
  2750  036D  160A  118A  23C4  120A  118A  	fcall	_EEPROM_limitsWrite
  2751  0372  2ADE               	goto	l4813
  2752  0373                     l4829:	
  2753                           
  2754                           ;main.c: 120:         LCD_write(":", 1);
  2755  0373  3039               	movlw	userInput_getTempLimits@limit& (0+255)
  2756  0374  0084               	movwf	4
  2757  0375  30D3               	movlw	low _nightLimits
  2758  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2759  0377  1303               	bcf	3,6	;RP1=0, select bank1
  2760  0378  00C6               	movwf	??_main^(0+128)
  2761  0379  0804               	movf	4,w
  2762  037A  00C7               	movwf	(??_main^(0+128)+1)
  2763  037B  3008               	movlw	8
  2764  037C  00C8               	movwf	(??_main^(0+128)+2)
  2765  037D                     u4180:	
  2766  037D  0846               	movf	??_main^(0+128),w
  2767  037E  0084               	movwf	4
  2768  037F  1783               	bsf	3,7	;select IRP bank3
  2769  0380  0800               	movf	0,w
  2770  0381  00C9               	movwf	(??_main^(0+128)+3)
  2771  0382  0AC6               	incf	??_main^(0+128),f
  2772  0383  0847               	movf	(??_main^(0+128)+1),w
  2773  0384  0084               	movwf	4
  2774  0385  1383               	bcf	3,7	;select IRP bank0
  2775  0386  0849               	movf	(??_main^(0+128)+3),w
  2776  0387  0080               	movwf	0
  2777  0388  0AC7               	incf	(??_main^(0+128)+1),f
  2778  0389  0BC8               	decfsz	(??_main^(0+128)+2),f
  2779  038A  2B7D               	goto	u4180
  2780  038B  3000               	movlw	0
  2781  038C  1283               	bcf	3,5	;RP0=0, select bank0
  2782  038D  1303               	bcf	3,6	;RP1=0, select bank0
  2783  038E  00C1               	movwf	userInput_getTempLimits@day
  2784  038F  00C2               	movwf	userInput_getTempLimits@day+1
  2785  0390  120A  158A  2461  120A  118A  	fcall	_userInput_getTempLimits
  2786  0395  30D3               	movlw	_nightLimits& (0+255)
  2787  0396  0084               	movwf	4
  2788  0397  1283               	bcf	3,5	;RP0=0, select bank0
  2789  0398  1303               	bcf	3,6	;RP1=0, select bank0
  2790  0399  3039               	movlw	low ?_userInput_getTempLimits
  2791  039A  1683               	bsf	3,5	;RP0=1, select bank1
  2792  039B  1303               	bcf	3,6	;RP1=0, select bank1
  2793  039C  00CA               	movwf	(??_main+4)^(0+128)
  2794  039D  0804               	movf	4,w
  2795  039E  00CB               	movwf	((??_main+4)^(0+128)+1)
  2796  039F  3008               	movlw	8
  2797  03A0  00CC               	movwf	((??_main+4)^(0+128)+2)
  2798  03A1                     u4190:	
  2799  03A1  084A               	movf	(??_main+4)^(0+128),w
  2800  03A2  0084               	movwf	4
  2801  03A3  1383               	bcf	3,7	;select IRP bank0
  2802  03A4  0800               	movf	0,w
  2803  03A5  00CD               	movwf	((??_main+4)^(0+128)+3)
  2804  03A6  0ACA               	incf	(??_main+4)^(0+128),f
  2805  03A7  084B               	movf	((??_main+4)^(0+128)+1),w
  2806  03A8  0084               	movwf	4
  2807  03A9  1783               	bsf	3,7	;select IRP bank3
  2808  03AA  084D               	movf	((??_main+4)^(0+128)+3),w
  2809  03AB  0080               	movwf	0
  2810  03AC  0ACB               	incf	((??_main+4)^(0+128)+1),f
  2811  03AD  0BCC               	decfsz	((??_main+4)^(0+128)+2),f
  2812  03AE  2BA1               	goto	u4190
  2813                           
  2814                           ;main.c: 121:         LCD_writeChar(currentTime.min1 + '0');
  2815  03AF  3073               	movlw	EEPROM_limitsWrite@limits& (0+255)
  2816  03B0  0084               	movwf	4
  2817  03B1  30D3               	movlw	low _nightLimits
  2818  03B2  00C6               	movwf	??_main^(0+128)
  2819  03B3  0804               	movf	4,w
  2820  03B4  00C7               	movwf	(??_main^(0+128)+1)
  2821  03B5  3008               	movlw	8
  2822  03B6  00C8               	movwf	(??_main^(0+128)+2)
  2823  03B7                     u4200:	
  2824  03B7  0846               	movf	??_main^(0+128),w
  2825  03B8  0084               	movwf	4
  2826  03B9  1783               	bsf	3,7	;select IRP bank3
  2827  03BA  0800               	movf	0,w
  2828  03BB  00C9               	movwf	(??_main^(0+128)+3)
  2829  03BC  0AC6               	incf	??_main^(0+128),f
  2830  03BD  0847               	movf	(??_main^(0+128)+1),w
  2831  03BE  0084               	movwf	4
  2832  03BF  0849               	movf	(??_main^(0+128)+3),w
  2833  03C0  0080               	movwf	0
  2834  03C1  0AC7               	incf	(??_main^(0+128)+1),f
  2835  03C2  0BC8               	decfsz	(??_main^(0+128)+2),f
  2836  03C3  2BB7               	goto	u4200
  2837  03C4  01FB               	clrf	EEPROM_limitsWrite@day
  2838  03C5  160A  118A  23C4  120A  118A  	fcall	_EEPROM_limitsWrite
  2839  03CA  2ADE               	goto	l4813
  2840  03CB                     l4837:	
  2841                           
  2842                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2843                           ; Switch size 1, requested type "simple"
  2844                           ; Number of cases is 1, Range of values is 0 to 0
  2845                           ; switch strategies available:
  2846                           ; Name         Instructions Cycles
  2847                           ; simple_byte            4     3 (average)
  2848                           ; direct_byte           11     8 (fixed)
  2849                           ; jumptable            260     6 (fixed)
  2850                           ;	Chosen strategy is simple_byte
  2851  03CB  086E               	movf	main@pushButton+1,w
  2852  03CC  3A00               	xorlw	0	; case 0
  2853  03CD  1903               	skipnz
  2854  03CE  2BD0               	goto	l5063
  2855  03CF  2A2D               	goto	l404
  2856  03D0                     l5063:	
  2857                           
  2858                           ; Switch size 1, requested type "simple"
  2859                           ; Number of cases is 4, Range of values is 0 to 3
  2860                           ; switch strategies available:
  2861                           ; Name         Instructions Cycles
  2862                           ; simple_byte           13     7 (average)
  2863                           ; direct_byte           20     8 (fixed)
  2864                           ; jumptable            260     6 (fixed)
  2865                           ;	Chosen strategy is simple_byte
  2866  03D0  086D               	movf	main@pushButton,w
  2867  03D1  3A00               	xorlw	0	; case 0
  2868  03D2  1903               	skipnz
  2869  03D3  2A84               	goto	l4807
  2870  03D4  3A01               	xorlw	1	; case 1
  2871  03D5  1903               	skipnz
  2872  03D6  2AE3               	goto	l4815
  2873  03D7  3A03               	xorlw	3	; case 2
  2874  03D8  1903               	skipnz
  2875  03D9  2B1B               	goto	l4823
  2876  03DA  3A01               	xorlw	1	; case 3
  2877  03DB  1903               	skipnz
  2878  03DC  2B73               	goto	l4829
  2879  03DD  2A2D               	goto	l404
  2880  03DE  120A  118A  2800   	ljmp	start
  2881  03E1                     __end_of_main:	
  2882                           
  2883                           	psect	text1
  2884  000C                     __ptext1:	
  2885 ;; *************** function _userInput_getTime *****************
  2886 ;; Defined at:
  2887 ;;		line 222 in file "userInput.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  time           16   16[BANK0 ] struct Time
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  button          2   34[BANK0 ] int 
  2892 ;;  timeAddressC    2   36[BANK0 ] int 
  2893 ;;  exit            2    0        int 
  2894 ;;  buttonPress     1   40[BANK0 ] _Bool 
  2895 ;;  decrement       1   39[BANK0 ] _Bool 
  2896 ;;  increment       1   38[BANK0 ] _Bool 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  16   16[BANK0 ] struct Time
  2899 ;; Registers used:
  2900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2906 ;;      Params:         0      16       0       0       0
  2907 ;;      Locals:         0       9       0       0       0
  2908 ;;      Temps:          4       0       0       0       0
  2909 ;;      Totals:         4      25       0       0       0
  2910 ;;Total ram usage:       29 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    4
  2913 ;; This function calls:
  2914 ;;		_LCD_writeCmd
  2915 ;;		_matrix_checkButtons
  2916 ;;		_userInput_displayTime
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _userInput_getTime
  2924  000C                     _userInput_getTime:	
  2925                           
  2926                           ;userInput.c: 224:     userInput_displayTime(time);
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _userInput_getTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2930  000C  3020               	movlw	userInput_displayTime@time& (0+255)
  2931  000D  0084               	movwf	4
  2932  000E  3030               	movlw	low userInput_getTime@time
  2933  000F  00FA               	movwf	??_userInput_getTime
  2934  0010  0804               	movf	4,w
  2935  0011  00FB               	movwf	??_userInput_getTime+1
  2936  0012  3010               	movlw	16
  2937  0013  00FC               	movwf	??_userInput_getTime+2
  2938  0014                     u3260:	
  2939  0014  087A               	movf	??_userInput_getTime,w
  2940  0015  0084               	movwf	4
  2941  0016  1383               	bcf	3,7	;select IRP bank0
  2942  0017  0800               	movf	0,w
  2943  0018  00FD               	movwf	??_userInput_getTime+3
  2944  0019  0AFA               	incf	??_userInput_getTime,f
  2945  001A  087B               	movf	??_userInput_getTime+1,w
  2946  001B  0084               	movwf	4
  2947  001C  087D               	movf	??_userInput_getTime+3,w
  2948  001D  0080               	movwf	0
  2949  001E  0AFB               	incf	??_userInput_getTime+1,f
  2950  001F  0BFC               	decfsz	??_userInput_getTime+2,f
  2951  0020  2814               	goto	u3260
  2952  0021  160A  118A  2526  120A  118A  	fcall	_userInput_displayTime
  2953                           
  2954                           ;userInput.c: 227:     LCD_writeCmd(0x82);
  2955  0026  3082               	movlw	130
  2956  0027  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  2957                           
  2958                           ;userInput.c: 229:     int timeAddressCounter = 0;
  2959  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2960  002D  1303               	bcf	3,6	;RP1=0, select bank0
  2961  002E  01C4               	clrf	userInput_getTime@timeAddressCounter
  2962  002F  01C5               	clrf	userInput_getTime@timeAddressCounter+1
  2963                           
  2964                           ;userInput.c: 230:     _Bool buttonPress = 0;
  2965  0030  01C8               	clrf	userInput_getTime@buttonPress
  2966                           
  2967                           ;userInput.c: 231:     _Bool increment = 0;
  2968  0031  01C6               	clrf	userInput_getTime@increment
  2969  0032                     L4:	
  2970                           
  2971                           ;userInput.c: 232:     _Bool decrement = 0;
  2972  0032  01C7               	clrf	userInput_getTime@decrement
  2973  0033                     l4247:	
  2974                           
  2975                           ;userInput.c: 240:     {;userInput.c: 241:         int button = matrix_checkButtons();
  2976  0033  160A  118A  25D6  120A  118A  	fcall	_matrix_checkButtons
  2977  0038  0873               	movf	?_matrix_checkButtons+1,w
  2978  0039  1283               	bcf	3,5	;RP0=0, select bank0
  2979  003A  1303               	bcf	3,6	;RP1=0, select bank0
  2980  003B  00C3               	movwf	userInput_getTime@button+1
  2981  003C  0872               	movf	?_matrix_checkButtons,w
  2982  003D  00C2               	movwf	userInput_getTime@button
  2983                           
  2984                           ;userInput.c: 242:         switch (button) {
  2985  003E  2873               	goto	l4293
  2986  003F                     l4249:	
  2987                           
  2988                           ;userInput.c: 244:                 buttonPress = 0;
  2989  003F  01C8               	clrf	userInput_getTime@buttonPress
  2990                           
  2991                           ;userInput.c: 245:                 break;
  2992  0040  2989               	goto	l4423
  2993  0041                     l4251:	
  2994                           
  2995                           ;userInput.c: 248:                 if (!buttonPress && timeAddressCounter != 0) timeAddr
      +                          essCounter--;
  2996  0041  0848               	movf	userInput_getTime@buttonPress,w
  2997  0042  1D03               	btfss	3,2
  2998  0043  284E               	goto	l4257
  2999  0044  0844               	movf	userInput_getTime@timeAddressCounter,w
  3000  0045  0445               	iorwf	userInput_getTime@timeAddressCounter+1,w
  3001  0046  1903               	btfsc	3,2
  3002  0047  284E               	goto	l4257
  3003  0048  30FF               	movlw	255
  3004  0049  07C4               	addwf	userInput_getTime@timeAddressCounter,f
  3005  004A  1803               	skipnc
  3006  004B  0AC5               	incf	userInput_getTime@timeAddressCounter+1,f
  3007  004C  30FF               	movlw	255
  3008  004D                     L2:	
  3009  004D  07C5               	addwf	userInput_getTime@timeAddressCounter+1,f
  3010  004E                     l4257:	
  3011                           
  3012                           ;userInput.c: 249:                 buttonPress = 1;
  3013  004E  01C8               	clrf	userInput_getTime@buttonPress
  3014  004F  0AC8               	incf	userInput_getTime@buttonPress,f
  3015                           
  3016                           ;userInput.c: 250:                 break;
  3017  0050  2989               	goto	l4423
  3018  0051                     l4259:	
  3019                           
  3020                           ;userInput.c: 252:                 if (!buttonPress) decrement = 1;
  3021  0051  0848               	movf	userInput_getTime@buttonPress,w
  3022  0052  1D03               	btfss	3,2
  3023  0053  2989               	goto	l4423
  3024  0054  01C7               	clrf	userInput_getTime@decrement
  3025  0055  0AC7               	incf	userInput_getTime@decrement,f
  3026  0056  2989               	goto	l4423
  3027  0057                     l4263:	
  3028                           
  3029                           ;userInput.c: 255:                 if (!buttonPress) increment = 1;
  3030  0057  0848               	movf	userInput_getTime@buttonPress,w
  3031  0058  1D03               	btfss	3,2
  3032  0059  2989               	goto	l4423
  3033  005A  01C6               	clrf	userInput_getTime@increment
  3034  005B  0AC6               	incf	userInput_getTime@increment,f
  3035  005C  2989               	goto	l4423
  3036  005D                     l4267:	
  3037                           
  3038                           ;userInput.c: 259:                 if (!buttonPress && timeAddressCounter != 3) timeAddr
      +                          essCounter++;
  3039  005D  0848               	movf	userInput_getTime@buttonPress,w
  3040  005E  1D03               	btfss	3,2
  3041  005F  284E               	goto	l4257
  3042  0060  3003               	movlw	3
  3043  0061  0644               	xorwf	userInput_getTime@timeAddressCounter,w
  3044  0062  0445               	iorwf	userInput_getTime@timeAddressCounter+1,w
  3045  0063  1903               	btfsc	3,2
  3046  0064  284E               	goto	l4257
  3047  0065  3001               	movlw	1
  3048  0066  07C4               	addwf	userInput_getTime@timeAddressCounter,f
  3049  0067  1803               	skipnc
  3050  0068  0AC5               	incf	userInput_getTime@timeAddressCounter+1,f
  3051  0069  3000               	movlw	0
  3052  006A  284D               	goto	L2
  3053  006B                     l4275:	
  3054                           
  3055                           ;userInput.c: 263:                 time.valid = 0;
  3056  006B  01BE               	clrf	userInput_getTime@time+14
  3057  006C  01BF               	clrf	userInput_getTime@time+15
  3058                           
  3059                           ;userInput.c: 264:                 return time;
  3060  006D  0008               	return
  3061  006E                     l4283:	
  3062                           
  3063                           ;userInput.c: 267:                 time.valid = 1;
  3064  006E  3001               	movlw	1
  3065  006F  00BE               	movwf	userInput_getTime@time+14
  3066  0070  3000               	movlw	0
  3067  0071  00BF               	movwf	userInput_getTime@time+15
  3068  0072  0008               	return
  3069  0073                     l4293:	
  3070                           
  3071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3072                           ; Switch size 1, requested type "simple"
  3073                           ; Number of cases is 1, Range of values is 0 to 0
  3074                           ; switch strategies available:
  3075                           ; Name         Instructions Cycles
  3076                           ; simple_byte            4     3 (average)
  3077                           ; direct_byte           11     8 (fixed)
  3078                           ; jumptable            260     6 (fixed)
  3079                           ;	Chosen strategy is simple_byte
  3080  0073  0843               	movf	userInput_getTime@button+1,w
  3081  0074  3A00               	xorlw	0	; case 0
  3082  0075  1903               	skipnz
  3083  0076  2878               	goto	l5065
  3084  0077  2989               	goto	l4423
  3085  0078                     l5065:	
  3086                           
  3087                           ; Switch size 1, requested type "simple"
  3088                           ; Number of cases is 7, Range of values is 0 to 16
  3089                           ; switch strategies available:
  3090                           ; Name         Instructions Cycles
  3091                           ; simple_byte           22    12 (average)
  3092                           ; direct_byte           59     8 (fixed)
  3093                           ; jumptable            260     6 (fixed)
  3094                           ;	Chosen strategy is simple_byte
  3095  0078  0842               	movf	userInput_getTime@button,w
  3096  0079  3A00               	xorlw	0	; case 0
  3097  007A  1903               	skipnz
  3098  007B  283F               	goto	l4249
  3099  007C  3A02               	xorlw	2	; case 2
  3100  007D  1903               	skipnz
  3101  007E  2841               	goto	l4251
  3102  007F  3A07               	xorlw	7	; case 5
  3103  0080  1903               	skipnz
  3104  0081  2851               	goto	l4259
  3105  0082  3A02               	xorlw	2	; case 7
  3106  0083  1903               	skipnz
  3107  0084  2857               	goto	l4263
  3108  0085  3A0D               	xorlw	13	; case 10
  3109  0086  1903               	skipnz
  3110  0087  285D               	goto	l4267
  3111  0088  3A07               	xorlw	7	; case 13
  3112  0089  1903               	skipnz
  3113  008A  286B               	goto	l4275
  3114  008B  3A1D               	xorlw	29	; case 16
  3115  008C  1903               	skipnz
  3116  008D  286E               	goto	l4283
  3117  008E  2989               	goto	l4423
  3118  008F                     l4295:	
  3119                           
  3120                           ;userInput.c: 275:                 LCD_writeCmd(0x82);
  3121  008F  3082               	movlw	130
  3122  0090  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  3123                           
  3124                           ;userInput.c: 276:                 if (increment == 1)
  3125  0095  1283               	bcf	3,5	;RP0=0, select bank0
  3126  0096  1303               	bcf	3,6	;RP1=0, select bank0
  3127  0097  0346               	decf	userInput_getTime@increment,w
  3128  0098  1D03               	btfss	3,2
  3129  0099  28D0               	goto	l4317
  3130                           
  3131                           ;userInput.c: 277:                 {;userInput.c: 278:                     if (time.hour
      +                          2 == 0x09)
  3132  009A  3009               	movlw	9
  3133  009B  0635               	xorwf	userInput_getTime@time+5,w
  3134  009C  1D03               	btfss	3,2
  3135  009D  28A3               	goto	l4305
  3136                           
  3137                           ;userInput.c: 279:                     {;userInput.c: 280:                         time.
      +                          hour1++;
  3138  009E  3001               	movlw	1
  3139  009F  00FA               	movwf	??_userInput_getTime
  3140  00A0  087A               	movf	??_userInput_getTime,w
  3141  00A1  07B4               	addwf	userInput_getTime@time+4,f
  3142  00A2  28AC               	goto	L3
  3143  00A3                     l4305:	
  3144                           ;userInput.c: 282:                     }
  3145                           
  3146                           ;userInput.c: 281:                         time.hour2 = 0x00;
  3147                           
  3148  00A3  3003               	movlw	3
  3149  00A4  0635               	xorwf	userInput_getTime@time+5,w
  3150  00A5  1D03               	btfss	3,2
  3151  00A6  28AE               	goto	l4311
  3152  00A7  3002               	movlw	2
  3153  00A8  0634               	xorwf	userInput_getTime@time+4,w
  3154  00A9  1D03               	btfss	3,2
  3155  00AA  28AE               	goto	l4311
  3156                           
  3157                           ;userInput.c: 284:                     {;userInput.c: 285:                         time.
      +                          hour1 = 0x00;
  3158  00AB  01B4               	clrf	userInput_getTime@time+4
  3159  00AC                     L3:	
  3160                           
  3161                           ;userInput.c: 286:                         time.hour2 = 0x00;
  3162  00AC  01B5               	clrf	userInput_getTime@time+5
  3163                           
  3164                           ;userInput.c: 287:                     }
  3165  00AD  28B2               	goto	l4313
  3166  00AE                     l4311:	
  3167                           
  3168                           ;userInput.c: 289:                     {;userInput.c: 290:                         time.
      +                          hour2++;
  3169  00AE  3001               	movlw	1
  3170  00AF  00FA               	movwf	??_userInput_getTime
  3171  00B0  087A               	movf	??_userInput_getTime,w
  3172  00B1  07B5               	addwf	userInput_getTime@time+5,f
  3173  00B2                     l4313:	
  3174                           
  3175                           ;userInput.c: 292:                     userInput_displayTime(time);
  3176  00B2  3020               	movlw	userInput_displayTime@time& (0+255)
  3177  00B3  0084               	movwf	4
  3178  00B4  3030               	movlw	low userInput_getTime@time
  3179  00B5  00FA               	movwf	??_userInput_getTime
  3180  00B6  0804               	movf	4,w
  3181  00B7  00FB               	movwf	??_userInput_getTime+1
  3182  00B8  3010               	movlw	16
  3183  00B9  00FC               	movwf	??_userInput_getTime+2
  3184  00BA                     u3370:	
  3185  00BA  087A               	movf	??_userInput_getTime,w
  3186  00BB  0084               	movwf	4
  3187  00BC  1383               	bcf	3,7	;select IRP bank0
  3188  00BD  0800               	movf	0,w
  3189  00BE  00FD               	movwf	??_userInput_getTime+3
  3190  00BF  0AFA               	incf	??_userInput_getTime,f
  3191  00C0  087B               	movf	??_userInput_getTime+1,w
  3192  00C1  0084               	movwf	4
  3193  00C2  087D               	movf	??_userInput_getTime+3,w
  3194  00C3  0080               	movwf	0
  3195  00C4  0AFB               	incf	??_userInput_getTime+1,f
  3196  00C5  0BFC               	decfsz	??_userInput_getTime+2,f
  3197  00C6  28BA               	goto	u3370
  3198  00C7  160A  118A  2526  120A  118A  	fcall	_userInput_displayTime
  3199                           
  3200                           ;userInput.c: 293:                     increment = 0;
  3201  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  3202  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  3203  00CE  01C6               	clrf	userInput_getTime@increment
  3204                           
  3205                           ;userInput.c: 294:                 }
  3206  00CF  2833               	goto	l4247
  3207  00D0                     l4317:	
  3208  00D0  0347               	decf	userInput_getTime@decrement,w
  3209  00D1  1D03               	btfss	3,2
  3210  00D2  2833               	goto	l4247
  3211                           
  3212                           ;userInput.c: 296:                 {;userInput.c: 297:                     if (time.hour
      +                          1 == 0x00 && time.hour2 == 0x00)
  3213  00D3  0834               	movf	userInput_getTime@time+4,w
  3214  00D4  1D03               	btfss	3,2
  3215  00D5  28E2               	goto	l4325
  3216  00D6  0835               	movf	userInput_getTime@time+5,w
  3217  00D7  1D03               	btfss	3,2
  3218  00D8  28E2               	goto	l4325
  3219                           
  3220                           ;userInput.c: 298:                     {;userInput.c: 299:                         time.
      +                          hour1 = 0x02;
  3221  00D9  3002               	movlw	2
  3222  00DA  00FA               	movwf	??_userInput_getTime
  3223  00DB  087A               	movf	??_userInput_getTime,w
  3224  00DC  00B4               	movwf	userInput_getTime@time+4
  3225                           
  3226                           ;userInput.c: 300:                         time.hour2 = 0x03;
  3227  00DD  3003               	movlw	3
  3228  00DE  00FA               	movwf	??_userInput_getTime
  3229  00DF  087A               	movf	??_userInput_getTime,w
  3230  00E0  00B5               	movwf	userInput_getTime@time+5
  3231                           
  3232                           ;userInput.c: 301:                     }
  3233  00E1  28F6               	goto	l4337
  3234  00E2                     l4325:	
  3235  00E2  0835               	movf	userInput_getTime@time+5,w
  3236  00E3  1D03               	btfss	3,2
  3237  00E4  28F4               	goto	l4335
  3238                           
  3239                           ;userInput.c: 303:                     {;userInput.c: 304:                         time.
      +                          hour2 = 0x09;
  3240  00E5  3009               	movlw	9
  3241  00E6  00FA               	movwf	??_userInput_getTime
  3242  00E7  087A               	movf	??_userInput_getTime,w
  3243  00E8  00B5               	movwf	userInput_getTime@time+5
  3244                           
  3245                           ;userInput.c: 305:                         if (time.hour1 == 0x00)
  3246  00E9  0834               	movf	userInput_getTime@time+4,w
  3247  00EA  1D03               	btfss	3,2
  3248  00EB  28F1               	goto	l4333
  3249                           
  3250                           ;userInput.c: 306:                         {;userInput.c: 307:                          
      +                             time.hour1 = 0x05;
  3251  00EC  3005               	movlw	5
  3252  00ED  00FA               	movwf	??_userInput_getTime
  3253  00EE  087A               	movf	??_userInput_getTime,w
  3254  00EF  00B4               	movwf	userInput_getTime@time+4
  3255                           
  3256                           ;userInput.c: 308:                         }
  3257  00F0  28F6               	goto	l4337
  3258  00F1                     l4333:	
  3259                           
  3260                           ;userInput.c: 310:                         {;userInput.c: 311:                          
      +                             time.hour1--;
  3261  00F1  3001               	movlw	1
  3262  00F2  02B4               	subwf	userInput_getTime@time+4,f
  3263  00F3  28F6               	goto	l4337
  3264  00F4                     l4335:	
  3265                           
  3266                           ;userInput.c: 315:                     {;userInput.c: 316:                         time.
      +                          hour2--;
  3267  00F4  3001               	movlw	1
  3268  00F5  02B5               	subwf	userInput_getTime@time+5,f
  3269  00F6                     l4337:	
  3270                           
  3271                           ;userInput.c: 318:                     userInput_displayTime(time);
  3272  00F6  3020               	movlw	userInput_displayTime@time& (0+255)
  3273  00F7  0084               	movwf	4
  3274  00F8  3030               	movlw	low userInput_getTime@time
  3275  00F9  00FA               	movwf	??_userInput_getTime
  3276  00FA  0804               	movf	4,w
  3277  00FB  00FB               	movwf	??_userInput_getTime+1
  3278  00FC  3010               	movlw	16
  3279  00FD  00FC               	movwf	??_userInput_getTime+2
  3280  00FE                     u3430:	
  3281  00FE  087A               	movf	??_userInput_getTime,w
  3282  00FF  0084               	movwf	4
  3283  0100  1383               	bcf	3,7	;select IRP bank0
  3284  0101  0800               	movf	0,w
  3285  0102  00FD               	movwf	??_userInput_getTime+3
  3286  0103  0AFA               	incf	??_userInput_getTime,f
  3287  0104  087B               	movf	??_userInput_getTime+1,w
  3288  0105  0084               	movwf	4
  3289  0106  087D               	movf	??_userInput_getTime+3,w
  3290  0107  0080               	movwf	0
  3291  0108  0AFB               	incf	??_userInput_getTime+1,f
  3292  0109  0BFC               	decfsz	??_userInput_getTime+2,f
  3293  010A  28FE               	goto	u3430
  3294  010B  160A  118A  2526  120A  118A  	fcall	_userInput_displayTime
  3295                           
  3296                           ;userInput.c: 319:                     decrement = 0;
  3297  0110  1283               	bcf	3,5	;RP0=0, select bank0
  3298  0111  1303               	bcf	3,6	;RP1=0, select bank0
  3299  0112  2832               	goto	L4
  3300  0113                     l4341:	
  3301                           
  3302                           ;userInput.c: 325:                 LCD_writeCmd(0x83);
  3303  0113  3083               	movlw	131
  3304  0114  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  3305                           
  3306                           ;userInput.c: 326:                 if (increment == 1)
  3307  0119  1283               	bcf	3,5	;RP0=0, select bank0
  3308  011A  1303               	bcf	3,6	;RP1=0, select bank0
  3309  011B  0346               	decf	userInput_getTime@increment,w
  3310  011C  1D03               	btfss	3,2
  3311  011D  2933               	goto	l4361
  3312                           
  3313                           ;userInput.c: 327:                 {;userInput.c: 328:                     if (time.min2
      +                           == 0x09)
  3314  011E  3009               	movlw	9
  3315  011F  0633               	xorwf	userInput_getTime@time+3,w
  3316  0120  1D03               	btfss	3,2
  3317  0121  292E               	goto	l4355
  3318                           
  3319                           ;userInput.c: 329:                     {;userInput.c: 330:                         time.
      +                          min2 = 0x00;
  3320  0122  01B3               	clrf	userInput_getTime@time+3
  3321                           
  3322                           ;userInput.c: 331:                         if (time.min1 == 0x05)
  3323  0123  3005               	movlw	5
  3324  0124  0632               	xorwf	userInput_getTime@time+2,w
  3325  0125  1D03               	btfss	3,2
  3326  0126  2929               	goto	l4353
  3327                           
  3328                           ;userInput.c: 332:                         {;userInput.c: 333:                          
      +                             time.min1 = 0x00;
  3329  0127  01B2               	clrf	userInput_getTime@time+2
  3330                           
  3331                           ;userInput.c: 334:                         }
  3332  0128  28B2               	goto	l4313
  3333  0129                     l4353:	
  3334                           
  3335                           ;userInput.c: 336:                         {;userInput.c: 337:                          
      +                             time.min1++;
  3336  0129  3001               	movlw	1
  3337  012A  00FA               	movwf	??_userInput_getTime
  3338  012B  087A               	movf	??_userInput_getTime,w
  3339  012C  07B2               	addwf	userInput_getTime@time+2,f
  3340  012D  28B2               	goto	l4313
  3341  012E                     l4355:	
  3342                           
  3343                           ;userInput.c: 341:                     {;userInput.c: 342:                         time.
      +                          min2++;
  3344  012E  3001               	movlw	1
  3345  012F  00FA               	movwf	??_userInput_getTime
  3346  0130  087A               	movf	??_userInput_getTime,w
  3347  0131  07B3               	addwf	userInput_getTime@time+3,f
  3348  0132  28B2               	goto	l4313
  3349  0133                     l4361:	
  3350  0133  0347               	decf	userInput_getTime@decrement,w
  3351  0134  1D03               	btfss	3,2
  3352  0135  2833               	goto	l4247
  3353                           
  3354                           ;userInput.c: 348:                 {;userInput.c: 349:                    if (time.min1 
      +                          == 0x00 && time.min2 == 0x00)
  3355  0136  0832               	movf	userInput_getTime@time+2,w
  3356  0137  1D03               	btfss	3,2
  3357  0138  2941               	goto	l4369
  3358  0139  0833               	movf	userInput_getTime@time+3,w
  3359  013A  1D03               	btfss	3,2
  3360  013B  2941               	goto	l4369
  3361                           
  3362                           ;userInput.c: 350:                     {;userInput.c: 351:                         time.
      +                          min1 = 0x05;
  3363  013C  3005               	movlw	5
  3364  013D  00FA               	movwf	??_userInput_getTime
  3365  013E  087A               	movf	??_userInput_getTime,w
  3366  013F  00B2               	movwf	userInput_getTime@time+2
  3367  0140  2946               	goto	l4373
  3368  0141                     l4369:	
  3369                           ;userInput.c: 353:                     }
  3370                           
  3371                           ;userInput.c: 352:                         time.min2 = 0x09;
  3372                           
  3373  0141  0833               	movf	userInput_getTime@time+3,w
  3374  0142  1D03               	btfss	3,2
  3375  0143  294B               	goto	l4375
  3376                           
  3377                           ;userInput.c: 355:                    {;userInput.c: 356:                        time.mi
      +                          n1--;
  3378  0144  3001               	movlw	1
  3379  0145  02B2               	subwf	userInput_getTime@time+2,f
  3380  0146                     l4373:	
  3381                           
  3382                           ;userInput.c: 357:                        time.min2 = 0x09;
  3383  0146  3009               	movlw	9
  3384  0147  00FA               	movwf	??_userInput_getTime
  3385  0148  087A               	movf	??_userInput_getTime,w
  3386  0149  00B3               	movwf	userInput_getTime@time+3
  3387                           
  3388                           ;userInput.c: 358:                    }
  3389  014A  28F6               	goto	l4337
  3390  014B                     l4375:	
  3391                           
  3392                           ;userInput.c: 360:                    {;userInput.c: 361:                        time.mi
      +                          n2--;
  3393  014B  3001               	movlw	1
  3394  014C  02B3               	subwf	userInput_getTime@time+3,f
  3395  014D  28F6               	goto	l4337
  3396  014E                     l4381:	
  3397                           
  3398                           ;userInput.c: 370:                 LCD_writeCmd(0x85);
  3399  014E  3085               	movlw	133
  3400  014F  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  3401                           
  3402                           ;userInput.c: 371:                 if (increment == 1)
  3403  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0156  0346               	decf	userInput_getTime@increment,w
  3406  0157  1D03               	btfss	3,2
  3407  0158  296E               	goto	l4401
  3408                           
  3409                           ;userInput.c: 372:                 {;userInput.c: 373:                     if (time.sec2
      +                           == 0x09)
  3410  0159  3009               	movlw	9
  3411  015A  0631               	xorwf	userInput_getTime@time+1,w
  3412  015B  1D03               	btfss	3,2
  3413  015C  2969               	goto	l4395
  3414                           
  3415                           ;userInput.c: 374:                     {;userInput.c: 375:                         time.
      +                          sec2 = 0x00;
  3416  015D  01B1               	clrf	userInput_getTime@time+1
  3417                           
  3418                           ;userInput.c: 376:                         if (time.sec1 == 0x05)
  3419  015E  3005               	movlw	5
  3420  015F  0630               	xorwf	userInput_getTime@time,w
  3421  0160  1D03               	btfss	3,2
  3422  0161  2964               	goto	l4393
  3423                           
  3424                           ;userInput.c: 377:                         {;userInput.c: 378:                          
      +                             time.sec1 = 0x00;
  3425  0162  01B0               	clrf	userInput_getTime@time
  3426                           
  3427                           ;userInput.c: 379:                         }
  3428  0163  28B2               	goto	l4313
  3429  0164                     l4393:	
  3430                           
  3431                           ;userInput.c: 381:                         {;userInput.c: 382:                          
      +                             time.sec1++;
  3432  0164  3001               	movlw	1
  3433  0165  00FA               	movwf	??_userInput_getTime
  3434  0166  087A               	movf	??_userInput_getTime,w
  3435  0167  07B0               	addwf	userInput_getTime@time,f
  3436  0168  28B2               	goto	l4313
  3437  0169                     l4395:	
  3438                           
  3439                           ;userInput.c: 386:                     {;userInput.c: 387:                         time.
      +                          sec2++;
  3440  0169  3001               	movlw	1
  3441  016A  00FA               	movwf	??_userInput_getTime
  3442  016B  087A               	movf	??_userInput_getTime,w
  3443  016C  07B1               	addwf	userInput_getTime@time+1,f
  3444  016D  28B2               	goto	l4313
  3445  016E                     l4401:	
  3446  016E  0347               	decf	userInput_getTime@decrement,w
  3447  016F  1D03               	btfss	3,2
  3448  0170  2833               	goto	l4247
  3449                           
  3450                           ;userInput.c: 393:                 {;userInput.c: 394:                    if (time.sec1 
      +                          == 0x00 && time.sec2 == 0x00)
  3451  0171  0830               	movf	userInput_getTime@time,w
  3452  0172  1D03               	btfss	3,2
  3453  0173  297C               	goto	l4409
  3454  0174  0831               	movf	userInput_getTime@time+1,w
  3455  0175  1D03               	btfss	3,2
  3456  0176  297C               	goto	l4409
  3457                           
  3458                           ;userInput.c: 395:                     {;userInput.c: 396:                         time.
      +                          sec1 = 0x05;
  3459  0177  3005               	movlw	5
  3460  0178  00FA               	movwf	??_userInput_getTime
  3461  0179  087A               	movf	??_userInput_getTime,w
  3462  017A  00B0               	movwf	userInput_getTime@time
  3463  017B  2981               	goto	l4413
  3464  017C                     l4409:	
  3465                           ;userInput.c: 398:                     }
  3466                           
  3467                           ;userInput.c: 397:                         time.sec2 = 0x09;
  3468                           
  3469  017C  0831               	movf	userInput_getTime@time+1,w
  3470  017D  1D03               	btfss	3,2
  3471  017E  2986               	goto	l4415
  3472                           
  3473                           ;userInput.c: 400:                    {;userInput.c: 401:                        time.se
      +                          c1--;
  3474  017F  3001               	movlw	1
  3475  0180  02B0               	subwf	userInput_getTime@time,f
  3476  0181                     l4413:	
  3477                           
  3478                           ;userInput.c: 402:                        time.sec2 = 0x09;
  3479  0181  3009               	movlw	9
  3480  0182  00FA               	movwf	??_userInput_getTime
  3481  0183  087A               	movf	??_userInput_getTime,w
  3482  0184  00B1               	movwf	userInput_getTime@time+1
  3483                           
  3484                           ;userInput.c: 403:                    }
  3485  0185  28F6               	goto	l4337
  3486  0186                     l4415:	
  3487                           
  3488                           ;userInput.c: 405:                    {;userInput.c: 406:                        time.se
      +                          c2--;
  3489  0186  3001               	movlw	1
  3490  0187  02B1               	subwf	userInput_getTime@time+1,f
  3491  0188  28F6               	goto	l4337
  3492  0189                     l4423:	
  3493                           
  3494                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3495                           ; Switch size 1, requested type "simple"
  3496                           ; Number of cases is 1, Range of values is 0 to 0
  3497                           ; switch strategies available:
  3498                           ; Name         Instructions Cycles
  3499                           ; simple_byte            4     3 (average)
  3500                           ; direct_byte           11     8 (fixed)
  3501                           ; jumptable            260     6 (fixed)
  3502                           ;	Chosen strategy is simple_byte
  3503  0189  0845               	movf	userInput_getTime@timeAddressCounter+1,w
  3504  018A  3A00               	xorlw	0	; case 0
  3505  018B  1903               	skipnz
  3506  018C  298E               	goto	l5067
  3507  018D  2833               	goto	l4247
  3508  018E                     l5067:	
  3509                           
  3510                           ; Switch size 1, requested type "simple"
  3511                           ; Number of cases is 3, Range of values is 0 to 2
  3512                           ; switch strategies available:
  3513                           ; Name         Instructions Cycles
  3514                           ; simple_byte           10     6 (average)
  3515                           ; direct_byte           17     8 (fixed)
  3516                           ; jumptable            260     6 (fixed)
  3517                           ;	Chosen strategy is simple_byte
  3518  018E  0844               	movf	userInput_getTime@timeAddressCounter,w
  3519  018F  3A00               	xorlw	0	; case 0
  3520  0190  1903               	skipnz
  3521  0191  288F               	goto	l4295
  3522  0192  3A01               	xorlw	1	; case 1
  3523  0193  1903               	skipnz
  3524  0194  2913               	goto	l4341
  3525  0195  3A03               	xorlw	3	; case 2
  3526  0196  1903               	skipnz
  3527  0197  294E               	goto	l4381
  3528  0198  2833               	goto	l4247
  3529  0199  2833               	goto	l4247
  3530  019A                     __end_of_userInput_getTime:	
  3531                           
  3532                           	psect	text2
  3533  1526                     __ptext2:	
  3534 ;; *************** function _userInput_displayTime *****************
  3535 ;; Defined at:
  3536 ;;		line 586 in file "userInput.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  time           16    0[BANK0 ] struct Time
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3550 ;;      Params:         0      16       0       0       0
  3551 ;;      Locals:         0       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0
  3553 ;;      Totals:         0      16       0       0       0
  3554 ;;Total ram usage:       16 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    3
  3557 ;; This function calls:
  3558 ;;		_LCD_clear
  3559 ;;		_LCD_init
  3560 ;;		_LCD_writeChar
  3561 ;;		_LCD_writeCmd
  3562 ;; This function is called by:
  3563 ;;		_userInput_getTime
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function _userInput_displayTime
  3569  1526                     _userInput_displayTime:	
  3570                           
  3571                           ;userInput.c: 586: void userInput_displayTime (struct Time time);userInput.c: 587: {;use
      +                          rInput.c: 588:     LCD_init();
  3572                           
  3573                           ;incstack = 0
  3574                           ; Regs used in _userInput_displayTime: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3575  1526  160A  158A  2748  160A  118A  	fcall	_LCD_init
  3576                           
  3577                           ;userInput.c: 589:     LCD_clear();
  3578  152B  160A  158A  2675  160A  118A  	fcall	_LCD_clear
  3579                           
  3580                           ;userInput.c: 591:     LCD_writeCmd(0x82);
  3581  1530  3082               	movlw	130
  3582  1531  160A  158A  275E  160A  118A  	fcall	_LCD_writeCmd
  3583                           
  3584                           ;userInput.c: 592:     LCD_writeChar(time.hour1 + 48);
  3585  1536  1283               	bcf	3,5	;RP0=0, select bank0
  3586  1537  1303               	bcf	3,6	;RP1=0, select bank0
  3587  1538  0824               	movf	userInput_displayTime@time+4,w
  3588  1539  3E30               	addlw	48
  3589  153A  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3590                           
  3591                           ;userInput.c: 593:     LCD_writeChar(time.hour2 + 48);
  3592  153F  1283               	bcf	3,5	;RP0=0, select bank0
  3593  1540  1303               	bcf	3,6	;RP1=0, select bank0
  3594  1541  0825               	movf	userInput_displayTime@time+5,w
  3595  1542  3E30               	addlw	48
  3596  1543  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3597                           
  3598                           ;userInput.c: 594:     LCD_writeChar(':');
  3599  1548  303A               	movlw	58
  3600  1549  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3601                           
  3602                           ;userInput.c: 595:     LCD_writeChar(' ');
  3603  154E  3020               	movlw	32
  3604  154F  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3605                           
  3606                           ;userInput.c: 596:     LCD_writeChar(time.min1 + '0');
  3607  1554  1283               	bcf	3,5	;RP0=0, select bank0
  3608  1555  1303               	bcf	3,6	;RP1=0, select bank0
  3609  1556  0822               	movf	userInput_displayTime@time+2,w
  3610  1557  3E30               	addlw	48
  3611  1558  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3612                           
  3613                           ;userInput.c: 597:     LCD_writeChar(time.min2 + '0');
  3614  155D  1283               	bcf	3,5	;RP0=0, select bank0
  3615  155E  1303               	bcf	3,6	;RP1=0, select bank0
  3616  155F  0823               	movf	userInput_displayTime@time+3,w
  3617  1560  3E30               	addlw	48
  3618  1561  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3619                           
  3620                           ;userInput.c: 598:     LCD_writeChar(':');
  3621  1566  303A               	movlw	58
  3622  1567  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3623                           
  3624                           ;userInput.c: 599:     LCD_writeChar(time.sec1 + '0');
  3625  156C  1283               	bcf	3,5	;RP0=0, select bank0
  3626  156D  1303               	bcf	3,6	;RP1=0, select bank0
  3627  156E  0820               	movf	userInput_displayTime@time,w
  3628  156F  3E30               	addlw	48
  3629  1570  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  3630                           
  3631                           ;userInput.c: 600:     LCD_writeChar(time.sec2 + '0');
  3632  1575  1283               	bcf	3,5	;RP0=0, select bank0
  3633  1576  1303               	bcf	3,6	;RP1=0, select bank0
  3634  1577  0821               	movf	userInput_displayTime@time+1,w
  3635  1578  3E30               	addlw	48
  3636  1579  160A  158A  277C   	fcall	_LCD_writeChar
  3637  157C  0008               	return
  3638  157D                     __end_of_userInput_displayTime:	
  3639                           
  3640                           	psect	text3
  3641  0C61                     __ptext3:	
  3642 ;; *************** function _userInput_getTempLimits *****************
  3643 ;; Defined at:
  3644 ;;		line 416 in file "userInput.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  limit           8   25[BANK0 ] struct Limits
  3647 ;;  day             2   33[BANK0 ] int 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  button          2   41[BANK0 ] int 
  3650 ;;  newLimits       8   48[BANK0 ] struct Limits
  3651 ;;  addressCount    2   44[BANK0 ] int 
  3652 ;;  exit            2   39[BANK0 ] int 
  3653 ;;  decrement       1   47[BANK0 ] _Bool 
  3654 ;;  increment       1   46[BANK0 ] _Bool 
  3655 ;;  buttonPress     1   43[BANK0 ] _Bool 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  8   25[BANK0 ] struct Limits
  3658 ;; Registers used:
  3659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3665 ;;      Params:         0      10       0       0       0
  3666 ;;      Locals:         0      17       0       0       0
  3667 ;;      Temps:          0       4       0       0       0
  3668 ;;      Totals:         0      31       0       0       0
  3669 ;;Total ram usage:       31 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    4
  3672 ;; This function calls:
  3673 ;;		_LCD_writeCmd
  3674 ;;		_matrix_checkButtons
  3675 ;;		_userInput_displayLimits
  3676 ;; This function is called by:
  3677 ;;		_main
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           
  3682                           ;psect for function _userInput_getTempLimits
  3683  0C61                     _userInput_getTempLimits:	
  3684                           
  3685                           ;userInput.c: 419:     struct Limits newLimits = limit;
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in _userInput_getTempLimits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  3689  0C61  3050               	movlw	userInput_getTempLimits@newLimits& (0+255)
  3690  0C62  0084               	movwf	4
  3691  0C63  3039               	movlw	low userInput_getTempLimits@limit
  3692  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  3693  0C65  1303               	bcf	3,6	;RP1=0, select bank0
  3694  0C66  00C3               	movwf	??_userInput_getTempLimits
  3695  0C67  0804               	movf	4,w
  3696  0C68  00C4               	movwf	??_userInput_getTempLimits+1
  3697  0C69  3008               	movlw	8
  3698  0C6A  00C5               	movwf	??_userInput_getTempLimits+2
  3699  0C6B                     u3830:	
  3700  0C6B  0843               	movf	??_userInput_getTempLimits,w
  3701  0C6C  0084               	movwf	4
  3702  0C6D  1383               	bcf	3,7	;select IRP bank0
  3703  0C6E  0800               	movf	0,w
  3704  0C6F  00C6               	movwf	??_userInput_getTempLimits+3
  3705  0C70  0AC3               	incf	??_userInput_getTempLimits,f
  3706  0C71  0844               	movf	??_userInput_getTempLimits+1,w
  3707  0C72  0084               	movwf	4
  3708  0C73  0846               	movf	??_userInput_getTempLimits+3,w
  3709  0C74  0080               	movwf	0
  3710  0C75  0AC4               	incf	??_userInput_getTempLimits+1,f
  3711  0C76  0BC5               	decfsz	??_userInput_getTempLimits+2,f
  3712  0C77  2C6B               	goto	u3830
  3713                           
  3714                           ;userInput.c: 421:     userInput_displayLimits(newLimits,day);
  3715  0C78  3022               	movlw	userInput_displayLimits@limits& (0+255)
  3716  0C79  0084               	movwf	4
  3717  0C7A  3050               	movlw	low userInput_getTempLimits@newLimits
  3718  0C7B  00C3               	movwf	??_userInput_getTempLimits
  3719  0C7C  0804               	movf	4,w
  3720  0C7D  00C4               	movwf	??_userInput_getTempLimits+1
  3721  0C7E  3008               	movlw	8
  3722  0C7F  00C5               	movwf	??_userInput_getTempLimits+2
  3723  0C80                     u3840:	
  3724  0C80  0843               	movf	??_userInput_getTempLimits,w
  3725  0C81  0084               	movwf	4
  3726  0C82  1383               	bcf	3,7	;select IRP bank0
  3727  0C83  0800               	movf	0,w
  3728  0C84  00C6               	movwf	??_userInput_getTempLimits+3
  3729  0C85  0AC3               	incf	??_userInput_getTempLimits,f
  3730  0C86  0844               	movf	??_userInput_getTempLimits+1,w
  3731  0C87  0084               	movwf	4
  3732  0C88  0846               	movf	??_userInput_getTempLimits+3,w
  3733  0C89  0080               	movwf	0
  3734  0C8A  0AC4               	incf	??_userInput_getTempLimits+1,f
  3735  0C8B  0BC5               	decfsz	??_userInput_getTempLimits+2,f
  3736  0C8C  2C80               	goto	u3840
  3737  0C8D  0842               	movf	userInput_getTempLimits@day+1,w
  3738  0C8E  00AB               	movwf	userInput_displayLimits@day+1
  3739  0C8F  0841               	movf	userInput_getTempLimits@day,w
  3740  0C90  00AA               	movwf	userInput_displayLimits@day
  3741  0C91  120A  158A  25D9  120A  158A  	fcall	_userInput_displayLimits
  3742                           
  3743                           ;userInput.c: 423:     LCD_writeCmd(0x91);
  3744  0C96  3091               	movlw	145
  3745  0C97  160A  158A  275E  120A  158A  	fcall	_LCD_writeCmd
  3746                           
  3747                           ;userInput.c: 425:     int addressCounter = 0;
  3748  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  3749  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  3750  0C9E  01CC               	clrf	userInput_getTempLimits@addressCounter
  3751  0C9F  01CD               	clrf	userInput_getTempLimits@addressCounter+1
  3752                           
  3753                           ;userInput.c: 426:     _Bool buttonPress = 0;
  3754  0CA0  01CB               	clrf	userInput_getTempLimits@buttonPress
  3755                           
  3756                           ;userInput.c: 427:     _Bool increment = 0;
  3757  0CA1  01CE               	clrf	userInput_getTempLimits@increment
  3758                           
  3759                           ;userInput.c: 428:     _Bool decrement = 0;
  3760  0CA2  01CF               	clrf	userInput_getTempLimits@decrement
  3761                           
  3762                           ;userInput.c: 434:     int exit = 0;
  3763  0CA3  01C7               	clrf	userInput_getTempLimits@exit
  3764  0CA4  01C8               	clrf	userInput_getTempLimits@exit+1
  3765  0CA5                     l4771:	
  3766                           ;userInput.c: 435:     while (exit == 0) {
  3767                           
  3768                           
  3769                           ;userInput.c: 435:     while (exit == 0) {
  3770  0CA5  0847               	movf	userInput_getTempLimits@exit,w
  3771  0CA6  0448               	iorwf	userInput_getTempLimits@exit+1,w
  3772  0CA7  1D03               	btfss	3,2
  3773  0CA8  0008               	return
  3774                           
  3775                           ;userInput.c: 436:         int button = matrix_checkButtons();
  3776  0CA9  160A  118A  25D6  120A  158A  	fcall	_matrix_checkButtons
  3777  0CAE  0873               	movf	?_matrix_checkButtons+1,w
  3778  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  3780  0CB1  00CA               	movwf	userInput_getTempLimits@button+1
  3781  0CB2  0872               	movf	?_matrix_checkButtons,w
  3782  0CB3  00C9               	movwf	userInput_getTempLimits@button
  3783                           
  3784                           ;userInput.c: 437:         switch (button) {
  3785  0CB4  2CF2               	goto	l4691
  3786  0CB5                     l4661:	
  3787                           
  3788                           ;userInput.c: 440:                 buttonPress = 0;
  3789  0CB5  01CB               	clrf	userInput_getTempLimits@buttonPress
  3790                           
  3791                           ;userInput.c: 441:                 break;
  3792  0CB6  2DC5               	goto	l4769
  3793  0CB7                     l4665:	
  3794                           
  3795                           ;userInput.c: 445:                 if (!buttonPress && addressCounter != 0) addressCount
      +                          er--;
  3796  0CB7  084B               	movf	userInput_getTempLimits@buttonPress,w
  3797  0CB8  1D03               	btfss	3,2
  3798  0CB9  2CC4               	goto	l4671
  3799  0CBA  084C               	movf	userInput_getTempLimits@addressCounter,w
  3800  0CBB  044D               	iorwf	userInput_getTempLimits@addressCounter+1,w
  3801  0CBC  1903               	btfsc	3,2
  3802  0CBD  2CC4               	goto	l4671
  3803  0CBE  30FF               	movlw	255
  3804  0CBF  07CC               	addwf	userInput_getTempLimits@addressCounter,f
  3805  0CC0  1803               	skipnc
  3806  0CC1  0ACD               	incf	userInput_getTempLimits@addressCounter+1,f
  3807  0CC2  30FF               	movlw	255
  3808  0CC3                     L5:	
  3809  0CC3  07CD               	addwf	userInput_getTempLimits@addressCounter+1,f
  3810  0CC4                     l4671:	
  3811                           
  3812                           ;userInput.c: 446:                 buttonPress = 1;
  3813  0CC4  01CB               	clrf	userInput_getTempLimits@buttonPress
  3814  0CC5  0ACB               	incf	userInput_getTempLimits@buttonPress,f
  3815                           
  3816                           ;userInput.c: 447:                 break;
  3817  0CC6  2DC5               	goto	l4769
  3818  0CC7                     l614:	
  3819                           ;userInput.c: 448:             case 5:
  3820                           
  3821                           
  3822                           ;userInput.c: 449:                 decrement = 1;
  3823  0CC7  01CF               	clrf	userInput_getTempLimits@decrement
  3824  0CC8  0ACF               	incf	userInput_getTempLimits@decrement,f
  3825                           
  3826                           ;userInput.c: 450:                 break;
  3827  0CC9  2DC5               	goto	l4769
  3828  0CCA                     l615:	
  3829                           ;userInput.c: 451:             case 7:
  3830                           
  3831                           
  3832                           ;userInput.c: 452:                 increment = 1;
  3833  0CCA  01CE               	clrf	userInput_getTempLimits@increment
  3834  0CCB  0ACE               	incf	userInput_getTempLimits@increment,f
  3835                           
  3836                           ;userInput.c: 453:                 break;
  3837  0CCC  2DC5               	goto	l4769
  3838  0CCD                     l4673:	
  3839                           
  3840                           ;userInput.c: 456:                 if (!buttonPress && addressCounter != 4) addressCount
      +                          er++;
  3841  0CCD  084B               	movf	userInput_getTempLimits@buttonPress,w
  3842  0CCE  1D03               	btfss	3,2
  3843  0CCF  2CC4               	goto	l4671
  3844  0CD0  3004               	movlw	4
  3845  0CD1  064C               	xorwf	userInput_getTempLimits@addressCounter,w
  3846  0CD2  044D               	iorwf	userInput_getTempLimits@addressCounter+1,w
  3847  0CD3  1903               	btfsc	3,2
  3848  0CD4  2CC4               	goto	l4671
  3849  0CD5  3001               	movlw	1
  3850  0CD6  07CC               	addwf	userInput_getTempLimits@addressCounter,f
  3851  0CD7  1803               	skipnc
  3852  0CD8  0ACD               	incf	userInput_getTempLimits@addressCounter+1,f
  3853  0CD9  3000               	movlw	0
  3854  0CDA  2CC3               	goto	L5
  3855  0CDB                     l618:	
  3856                           ;userInput.c: 459:             case 13:
  3857                           
  3858                           
  3859                           ;userInput.c: 460:                 return limit;
  3860  0CDB  0008               	return
  3861  0CDC                     l4683:	
  3862                           
  3863                           ;userInput.c: 463:                 return newLimits;
  3864  0CDC  3039               	movlw	?_userInput_getTempLimits& (0+255)
  3865  0CDD  0084               	movwf	4
  3866  0CDE  3050               	movlw	low userInput_getTempLimits@newLimits
  3867  0CDF  00C3               	movwf	??_userInput_getTempLimits
  3868  0CE0  0804               	movf	4,w
  3869  0CE1  00C4               	movwf	??_userInput_getTempLimits+1
  3870  0CE2  3008               	movlw	8
  3871  0CE3  00C5               	movwf	??_userInput_getTempLimits+2
  3872  0CE4                     u3890:	
  3873  0CE4  0843               	movf	??_userInput_getTempLimits,w
  3874  0CE5  0084               	movwf	4
  3875  0CE6  1383               	bcf	3,7	;select IRP bank0
  3876  0CE7  0800               	movf	0,w
  3877  0CE8  00C6               	movwf	??_userInput_getTempLimits+3
  3878  0CE9  0AC3               	incf	??_userInput_getTempLimits,f
  3879  0CEA  0844               	movf	??_userInput_getTempLimits+1,w
  3880  0CEB  0084               	movwf	4
  3881  0CEC  0846               	movf	??_userInput_getTempLimits+3,w
  3882  0CED  0080               	movwf	0
  3883  0CEE  0AC4               	incf	??_userInput_getTempLimits+1,f
  3884  0CEF  0BC5               	decfsz	??_userInput_getTempLimits+2,f
  3885  0CF0  2CE4               	goto	u3890
  3886  0CF1  0008               	return
  3887  0CF2                     l4691:	
  3888                           
  3889                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3890                           ; Switch size 1, requested type "simple"
  3891                           ; Number of cases is 1, Range of values is 0 to 0
  3892                           ; switch strategies available:
  3893                           ; Name         Instructions Cycles
  3894                           ; simple_byte            4     3 (average)
  3895                           ; direct_byte           11     8 (fixed)
  3896                           ; jumptable            260     6 (fixed)
  3897                           ;	Chosen strategy is simple_byte
  3898  0CF2  084A               	movf	userInput_getTempLimits@button+1,w
  3899  0CF3  3A00               	xorlw	0	; case 0
  3900  0CF4  1903               	skipnz
  3901  0CF5  2CF7               	goto	l5069
  3902  0CF6  2DC5               	goto	l4769
  3903  0CF7                     l5069:	
  3904                           
  3905                           ; Switch size 1, requested type "simple"
  3906                           ; Number of cases is 7, Range of values is 0 to 16
  3907                           ; switch strategies available:
  3908                           ; Name         Instructions Cycles
  3909                           ; simple_byte           22    12 (average)
  3910                           ; direct_byte           59     8 (fixed)
  3911                           ; jumptable            260     6 (fixed)
  3912                           ;	Chosen strategy is simple_byte
  3913  0CF7  0849               	movf	userInput_getTempLimits@button,w
  3914  0CF8  3A00               	xorlw	0	; case 0
  3915  0CF9  1903               	skipnz
  3916  0CFA  2CB5               	goto	l4661
  3917  0CFB  3A02               	xorlw	2	; case 2
  3918  0CFC  1903               	skipnz
  3919  0CFD  2CB7               	goto	l4665
  3920  0CFE  3A07               	xorlw	7	; case 5
  3921  0CFF  1903               	skipnz
  3922  0D00  2CC7               	goto	l614
  3923  0D01  3A02               	xorlw	2	; case 7
  3924  0D02  1903               	skipnz
  3925  0D03  2CCA               	goto	l615
  3926  0D04  3A0D               	xorlw	13	; case 10
  3927  0D05  1903               	skipnz
  3928  0D06  2CCD               	goto	l4673
  3929  0D07  3A07               	xorlw	7	; case 13
  3930  0D08  1903               	skipnz
  3931  0D09  2CDB               	goto	l618
  3932  0D0A  3A1D               	xorlw	29	; case 16
  3933  0D0B  1903               	skipnz
  3934  0D0C  2CDC               	goto	l4683
  3935  0D0D  2DC5               	goto	l4769
  3936  0D0E                     l4693:	
  3937                           
  3938                           ;userInput.c: 470:                 LCD_writeCmd(0x91);
  3939  0D0E  3091               	movlw	145
  3940  0D0F  160A  158A  275E  120A  158A  	fcall	_LCD_writeCmd
  3941                           
  3942                           ;userInput.c: 473:                 if (increment == 1 && newLimits.lowLimit!= 100) {
  3943  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  3945  0D16  034E               	decf	userInput_getTempLimits@increment,w
  3946  0D17  1D03               	btfss	3,2
  3947  0D18  2D46               	goto	l4705
  3948  0D19  3064               	movlw	100
  3949  0D1A  0650               	xorwf	userInput_getTempLimits@newLimits,w
  3950  0D1B  0451               	iorwf	userInput_getTempLimits@newLimits+1,w
  3951  0D1C  1903               	btfsc	3,2
  3952  0D1D  2D46               	goto	l4705
  3953                           
  3954                           ;userInput.c: 474:                     newLimits.lowLimit++;
  3955  0D1E  3001               	movlw	1
  3956  0D1F  07D0               	addwf	userInput_getTempLimits@newLimits,f
  3957  0D20  1803               	skipnc
  3958  0D21  0AD1               	incf	userInput_getTempLimits@newLimits+1,f
  3959  0D22  3000               	movlw	0
  3960  0D23  07D1               	addwf	userInput_getTempLimits@newLimits+1,f
  3961  0D24                     l4701:	
  3962                           
  3963                           ;userInput.c: 475:                     userInput_displayLimits(newLimits,day);
  3964  0D24  3022               	movlw	userInput_displayLimits@limits& (0+255)
  3965  0D25  0084               	movwf	4
  3966  0D26  3050               	movlw	low userInput_getTempLimits@newLimits
  3967  0D27  00C3               	movwf	??_userInput_getTempLimits
  3968  0D28  0804               	movf	4,w
  3969  0D29  00C4               	movwf	??_userInput_getTempLimits+1
  3970  0D2A  3008               	movlw	8
  3971  0D2B  00C5               	movwf	??_userInput_getTempLimits+2
  3972  0D2C                     u3920:	
  3973  0D2C  0843               	movf	??_userInput_getTempLimits,w
  3974  0D2D  0084               	movwf	4
  3975  0D2E  1383               	bcf	3,7	;select IRP bank0
  3976  0D2F  0800               	movf	0,w
  3977  0D30  00C6               	movwf	??_userInput_getTempLimits+3
  3978  0D31  0AC3               	incf	??_userInput_getTempLimits,f
  3979  0D32  0844               	movf	??_userInput_getTempLimits+1,w
  3980  0D33  0084               	movwf	4
  3981  0D34  0846               	movf	??_userInput_getTempLimits+3,w
  3982  0D35  0080               	movwf	0
  3983  0D36  0AC4               	incf	??_userInput_getTempLimits+1,f
  3984  0D37  0BC5               	decfsz	??_userInput_getTempLimits+2,f
  3985  0D38  2D2C               	goto	u3920
  3986  0D39  0842               	movf	userInput_getTempLimits@day+1,w
  3987  0D3A  00AB               	movwf	userInput_displayLimits@day+1
  3988  0D3B  0841               	movf	userInput_getTempLimits@day,w
  3989  0D3C  00AA               	movwf	userInput_displayLimits@day
  3990  0D3D  120A  158A  25D9  120A  158A  	fcall	_userInput_displayLimits
  3991                           
  3992                           ;userInput.c: 476:                     increment = 0;
  3993  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  3994  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  3995  0D44  01CE               	clrf	userInput_getTempLimits@increment
  3996                           
  3997                           ;userInput.c: 477:                 }
  3998  0D45  2CA5               	goto	l4771
  3999  0D46                     l4705:	
  4000  0D46  034F               	decf	userInput_getTempLimits@decrement,w
  4001  0D47  1D03               	btfss	3,2
  4002  0D48  2CA5               	goto	l4771
  4003                           
  4004                           ;userInput.c: 481:                     newLimits.lowLimit--;
  4005  0D49  30FF               	movlw	255
  4006  0D4A  07D0               	addwf	userInput_getTempLimits@newLimits,f
  4007  0D4B  1803               	skipnc
  4008  0D4C  0AD1               	incf	userInput_getTempLimits@newLimits+1,f
  4009  0D4D  30FF               	movlw	255
  4010  0D4E  07D1               	addwf	userInput_getTempLimits@newLimits+1,f
  4011  0D4F                     l4709:	
  4012                           
  4013                           ;userInput.c: 482:                     userInput_displayLimits(newLimits,day);
  4014  0D4F  3022               	movlw	userInput_displayLimits@limits& (0+255)
  4015  0D50  0084               	movwf	4
  4016  0D51  3050               	movlw	low userInput_getTempLimits@newLimits
  4017  0D52  00C3               	movwf	??_userInput_getTempLimits
  4018  0D53  0804               	movf	4,w
  4019  0D54  00C4               	movwf	??_userInput_getTempLimits+1
  4020  0D55  3008               	movlw	8
  4021  0D56  00C5               	movwf	??_userInput_getTempLimits+2
  4022  0D57                     u3940:	
  4023  0D57  0843               	movf	??_userInput_getTempLimits,w
  4024  0D58  0084               	movwf	4
  4025  0D59  1383               	bcf	3,7	;select IRP bank0
  4026  0D5A  0800               	movf	0,w
  4027  0D5B  00C6               	movwf	??_userInput_getTempLimits+3
  4028  0D5C  0AC3               	incf	??_userInput_getTempLimits,f
  4029  0D5D  0844               	movf	??_userInput_getTempLimits+1,w
  4030  0D5E  0084               	movwf	4
  4031  0D5F  0846               	movf	??_userInput_getTempLimits+3,w
  4032  0D60  0080               	movwf	0
  4033  0D61  0AC4               	incf	??_userInput_getTempLimits+1,f
  4034  0D62  0BC5               	decfsz	??_userInput_getTempLimits+2,f
  4035  0D63  2D57               	goto	u3940
  4036  0D64  0842               	movf	userInput_getTempLimits@day+1,w
  4037  0D65  00AB               	movwf	userInput_displayLimits@day+1
  4038  0D66  0841               	movf	userInput_getTempLimits@day,w
  4039  0D67  00AA               	movwf	userInput_displayLimits@day
  4040  0D68  120A  158A  25D9  120A  158A  	fcall	_userInput_displayLimits
  4041                           
  4042                           ;userInput.c: 483:                     decrement = 0;
  4043  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  4044  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  4045  0D6F  01CF               	clrf	userInput_getTempLimits@decrement
  4046  0D70  2CA5               	goto	l4771
  4047  0D71                     l4713:	
  4048                           
  4049                           ;userInput.c: 488:                 LCD_writeCmd(0x96);
  4050  0D71  3096               	movlw	150
  4051  0D72  160A  158A  275E  120A  158A  	fcall	_LCD_writeCmd
  4052                           
  4053                           ;userInput.c: 489:                 if (increment == 1) {
  4054  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  4055  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  4056  0D79  034E               	decf	userInput_getTempLimits@increment,w
  4057  0D7A  1D03               	btfss	3,2
  4058  0D7B  2D83               	goto	l4723
  4059                           
  4060                           ;userInput.c: 490:                     newLimits.low++;
  4061  0D7C  3001               	movlw	1
  4062  0D7D  07D2               	addwf	userInput_getTempLimits@newLimits+2,f
  4063  0D7E  1803               	skipnc
  4064  0D7F  0AD3               	incf	userInput_getTempLimits@newLimits+3,f
  4065  0D80  3000               	movlw	0
  4066  0D81  07D3               	addwf	userInput_getTempLimits@newLimits+3,f
  4067  0D82  2D24               	goto	l4701
  4068  0D83                     l4723:	
  4069  0D83  034F               	decf	userInput_getTempLimits@decrement,w
  4070  0D84  1D03               	btfss	3,2
  4071  0D85  2CA5               	goto	l4771
  4072                           
  4073                           ;userInput.c: 494:                     newLimits.low--;
  4074  0D86  30FF               	movlw	255
  4075  0D87  07D2               	addwf	userInput_getTempLimits@newLimits+2,f
  4076  0D88  1803               	skipnc
  4077  0D89  0AD3               	incf	userInput_getTempLimits@newLimits+3,f
  4078  0D8A  30FF               	movlw	255
  4079  0D8B  07D3               	addwf	userInput_getTempLimits@newLimits+3,f
  4080  0D8C  2D4F               	goto	l4709
  4081  0D8D                     l4731:	
  4082                           
  4083                           ;userInput.c: 501:                 LCD_writeCmd(0x99);
  4084  0D8D  3099               	movlw	153
  4085  0D8E  160A  158A  275E  120A  158A  	fcall	_LCD_writeCmd
  4086                           
  4087                           ;userInput.c: 502:                 if (increment == 1) {
  4088  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  4089  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  4090  0D95  034E               	decf	userInput_getTempLimits@increment,w
  4091  0D96  1D03               	btfss	3,2
  4092  0D97  2D9F               	goto	l4741
  4093                           
  4094                           ;userInput.c: 503:                     newLimits.high++;
  4095  0D98  3001               	movlw	1
  4096  0D99  07D4               	addwf	userInput_getTempLimits@newLimits+4,f
  4097  0D9A  1803               	skipnc
  4098  0D9B  0AD5               	incf	userInput_getTempLimits@newLimits+5,f
  4099  0D9C  3000               	movlw	0
  4100  0D9D  07D5               	addwf	userInput_getTempLimits@newLimits+5,f
  4101  0D9E  2D24               	goto	l4701
  4102  0D9F                     l4741:	
  4103  0D9F  034F               	decf	userInput_getTempLimits@decrement,w
  4104  0DA0  1D03               	btfss	3,2
  4105  0DA1  2CA5               	goto	l4771
  4106                           
  4107                           ;userInput.c: 507:                     newLimits.high--;
  4108  0DA2  30FF               	movlw	255
  4109  0DA3  07D4               	addwf	userInput_getTempLimits@newLimits+4,f
  4110  0DA4  1803               	skipnc
  4111  0DA5  0AD5               	incf	userInput_getTempLimits@newLimits+5,f
  4112  0DA6  30FF               	movlw	255
  4113  0DA7  07D5               	addwf	userInput_getTempLimits@newLimits+5,f
  4114  0DA8  2D4F               	goto	l4709
  4115  0DA9                     l4749:	
  4116                           
  4117                           ;userInput.c: 514:                 LCD_writeCmd(0x9E);
  4118  0DA9  309E               	movlw	158
  4119  0DAA  160A  158A  275E  120A  158A  	fcall	_LCD_writeCmd
  4120                           
  4121                           ;userInput.c: 515:                 if (increment == 1) {
  4122  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
  4123  0DB0  1303               	bcf	3,6	;RP1=0, select bank0
  4124  0DB1  034E               	decf	userInput_getTempLimits@increment,w
  4125  0DB2  1D03               	btfss	3,2
  4126  0DB3  2DBB               	goto	l4759
  4127                           
  4128                           ;userInput.c: 516:                     newLimits.highLimit++;
  4129  0DB4  3001               	movlw	1
  4130  0DB5  07D6               	addwf	userInput_getTempLimits@newLimits+6,f
  4131  0DB6  1803               	skipnc
  4132  0DB7  0AD7               	incf	userInput_getTempLimits@newLimits+7,f
  4133  0DB8  3000               	movlw	0
  4134  0DB9  07D7               	addwf	userInput_getTempLimits@newLimits+7,f
  4135  0DBA  2D24               	goto	l4701
  4136  0DBB                     l4759:	
  4137  0DBB  034F               	decf	userInput_getTempLimits@decrement,w
  4138  0DBC  1D03               	btfss	3,2
  4139  0DBD  2CA5               	goto	l4771
  4140                           
  4141                           ;userInput.c: 520:                     newLimits.highLimit--;
  4142  0DBE  30FF               	movlw	255
  4143  0DBF  07D6               	addwf	userInput_getTempLimits@newLimits+6,f
  4144  0DC0  1803               	skipnc
  4145  0DC1  0AD7               	incf	userInput_getTempLimits@newLimits+7,f
  4146  0DC2  30FF               	movlw	255
  4147  0DC3  07D7               	addwf	userInput_getTempLimits@newLimits+7,f
  4148  0DC4  2D4F               	goto	l4709
  4149  0DC5                     l4769:	
  4150                           
  4151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4152                           ; Switch size 1, requested type "simple"
  4153                           ; Number of cases is 1, Range of values is 0 to 0
  4154                           ; switch strategies available:
  4155                           ; Name         Instructions Cycles
  4156                           ; simple_byte            4     3 (average)
  4157                           ; direct_byte           11     8 (fixed)
  4158                           ; jumptable            260     6 (fixed)
  4159                           ;	Chosen strategy is simple_byte
  4160  0DC5  084D               	movf	userInput_getTempLimits@addressCounter+1,w
  4161  0DC6  3A00               	xorlw	0	; case 0
  4162  0DC7  1903               	skipnz
  4163  0DC8  2DCA               	goto	l5071
  4164  0DC9  2CA5               	goto	l4771
  4165  0DCA                     l5071:	
  4166                           
  4167                           ; Switch size 1, requested type "simple"
  4168                           ; Number of cases is 4, Range of values is 0 to 3
  4169                           ; switch strategies available:
  4170                           ; Name         Instructions Cycles
  4171                           ; simple_byte           13     7 (average)
  4172                           ; direct_byte           20     8 (fixed)
  4173                           ; jumptable            260     6 (fixed)
  4174                           ;	Chosen strategy is simple_byte
  4175  0DCA  084C               	movf	userInput_getTempLimits@addressCounter,w
  4176  0DCB  3A00               	xorlw	0	; case 0
  4177  0DCC  1903               	skipnz
  4178  0DCD  2D0E               	goto	l4693
  4179  0DCE  3A01               	xorlw	1	; case 1
  4180  0DCF  1903               	skipnz
  4181  0DD0  2D71               	goto	l4713
  4182  0DD1  3A03               	xorlw	3	; case 2
  4183  0DD2  1903               	skipnz
  4184  0DD3  2D8D               	goto	l4731
  4185  0DD4  3A01               	xorlw	1	; case 3
  4186  0DD5  1903               	skipnz
  4187  0DD6  2DA9               	goto	l4749
  4188  0DD7  2CA5               	goto	l4771
  4189  0DD8  2CA5               	goto	l4771
  4190  0DD9                     __end_of_userInput_getTempLimits:	
  4191                           
  4192                           	psect	text4
  4193  0DD9                     __ptext4:	
  4194 ;; *************** function _userInput_displayLimits *****************
  4195 ;; Defined at:
  4196 ;;		line 529 in file "userInput.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  limits          8    2[BANK0 ] struct Limits
  4199 ;;  day             2   10[BANK0 ] int 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  HL2             1   24[BANK0 ] unsigned char 
  4202 ;;  HL1             1   23[BANK0 ] unsigned char 
  4203 ;;  HL0             1   22[BANK0 ] unsigned char 
  4204 ;;  H2              1   21[BANK0 ] unsigned char 
  4205 ;;  H1              1   20[BANK0 ] unsigned char 
  4206 ;;  H0              1   19[BANK0 ] unsigned char 
  4207 ;;  L2              1   18[BANK0 ] unsigned char 
  4208 ;;  L1              1   17[BANK0 ] unsigned char 
  4209 ;;  L0              1   16[BANK0 ] unsigned char 
  4210 ;;  LL2             1   15[BANK0 ] unsigned char 
  4211 ;;  LL1             1   14[BANK0 ] unsigned char 
  4212 ;;  LL0             1   13[BANK0 ] unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4222 ;;      Params:         0      10       0       0       0
  4223 ;;      Locals:         0      12       0       0       0
  4224 ;;      Temps:          0       1       0       0       0
  4225 ;;      Totals:         0      23       0       0       0
  4226 ;;Total ram usage:       23 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    3
  4229 ;; This function calls:
  4230 ;;		_LCD_clear
  4231 ;;		_LCD_fourthLine
  4232 ;;		_LCD_init
  4233 ;;		_LCD_secondLine
  4234 ;;		_LCD_write
  4235 ;;		_LCD_writeChar
  4236 ;;		_LCD_writeCmd
  4237 ;;		___awdiv
  4238 ;;		___awmod
  4239 ;; This function is called by:
  4240 ;;		_userInput_getTempLimits
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _userInput_displayLimits
  4246  0DD9                     _userInput_displayLimits:	
  4247                           
  4248                           ;userInput.c: 530:     LCD_init();
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _userInput_displayLimits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  4252  0DD9  160A  158A  2748  120A  158A  	fcall	_LCD_init
  4253                           
  4254                           ;userInput.c: 531:     LCD_clear();
  4255  0DDE  160A  158A  2675  120A  158A  	fcall	_LCD_clear
  4256                           
  4257                           ;userInput.c: 532:     LCD_writeCmd(0x81);
  4258  0DE3  3081               	movlw	129
  4259  0DE4  160A  158A  275E  120A  158A  	fcall	_LCD_writeCmd
  4260                           
  4261                           ;userInput.c: 533:     if (day) LCD_write("DAY LIMITS", 10);
  4262  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  4263  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  4264  0DEB  082A               	movf	userInput_displayLimits@day,w
  4265  0DEC  042B               	iorwf	userInput_displayLimits@day+1,w
  4266  0DED  1903               	btfsc	3,2
  4267  0DEE  2DF5               	goto	l3923
  4268  0DEF  300A               	movlw	10
  4269  0DF0  00AC               	movwf	??_userInput_displayLimits
  4270  0DF1  082C               	movf	??_userInput_displayLimits,w
  4271  0DF2  00F3               	movwf	LCD_write@len
  4272  0DF3  307B               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  4273  0DF4  2DFA               	goto	L6
  4274  0DF5                     l3923:	
  4275  0DF5  300C               	movlw	12
  4276  0DF6  00AC               	movwf	??_userInput_displayLimits
  4277  0DF7  082C               	movf	??_userInput_displayLimits,w
  4278  0DF8  00F3               	movwf	LCD_write@len
  4279  0DF9  306E               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  4280  0DFA                     L6:	
  4281  0DFA  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  4282                           
  4283                           ;userInput.c: 535:     LCD_secondLine();
  4284  0DFF  160A  158A  267F  120A  158A  	fcall	_LCD_secondLine
  4285                           
  4286                           ;userInput.c: 538:     char LL0 = (limits.lowLimit / 100) % 10;
  4287  0E04  300A               	movlw	10
  4288  0E05  00F9               	movwf	___awmod@divisor
  4289  0E06  3000               	movlw	0
  4290  0E07  00FA               	movwf	___awmod@divisor+1
  4291  0E08  3064               	movlw	100
  4292  0E09  00F0               	movwf	___awdiv@divisor
  4293  0E0A  3000               	movlw	0
  4294  0E0B  00F1               	movwf	___awdiv@divisor+1
  4295  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  4296  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  4297  0E0E  0823               	movf	userInput_displayLimits@limits+1,w
  4298  0E0F  00F3               	movwf	___awdiv@dividend+1
  4299  0E10  0822               	movf	userInput_displayLimits@limits,w
  4300  0E11  00F2               	movwf	___awdiv@dividend
  4301  0E12  160A  118A  257D  120A  158A  	fcall	___awdiv
  4302  0E17  0871               	movf	?___awdiv+1,w
  4303  0E18  00FC               	movwf	___awmod@dividend+1
  4304  0E19  0870               	movf	?___awdiv,w
  4305  0E1A  00FB               	movwf	___awmod@dividend
  4306  0E1B  160A  118A  2488  120A  158A  	fcall	___awmod
  4307  0E20  0879               	movf	?___awmod,w
  4308  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  4309  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  4310  0E23  00AC               	movwf	??_userInput_displayLimits
  4311  0E24  082C               	movf	??_userInput_displayLimits,w
  4312  0E25  00AD               	movwf	userInput_displayLimits@LL0
  4313                           
  4314                           ;userInput.c: 539:     char LL1 = (limits.lowLimit / 10) % 10;
  4315  0E26  300A               	movlw	10
  4316  0E27  00F9               	movwf	___awmod@divisor
  4317  0E28  3000               	movlw	0
  4318  0E29  00FA               	movwf	___awmod@divisor+1
  4319  0E2A  300A               	movlw	10
  4320  0E2B  00F0               	movwf	___awdiv@divisor
  4321  0E2C  3000               	movlw	0
  4322  0E2D  00F1               	movwf	___awdiv@divisor+1
  4323  0E2E  0823               	movf	userInput_displayLimits@limits+1,w
  4324  0E2F  00F3               	movwf	___awdiv@dividend+1
  4325  0E30  0822               	movf	userInput_displayLimits@limits,w
  4326  0E31  00F2               	movwf	___awdiv@dividend
  4327  0E32  160A  118A  257D  120A  158A  	fcall	___awdiv
  4328  0E37  0871               	movf	?___awdiv+1,w
  4329  0E38  00FC               	movwf	___awmod@dividend+1
  4330  0E39  0870               	movf	?___awdiv,w
  4331  0E3A  00FB               	movwf	___awmod@dividend
  4332  0E3B  160A  118A  2488  120A  158A  	fcall	___awmod
  4333  0E40  0879               	movf	?___awmod,w
  4334  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  4335  0E42  1303               	bcf	3,6	;RP1=0, select bank0
  4336  0E43  00AC               	movwf	??_userInput_displayLimits
  4337  0E44  082C               	movf	??_userInput_displayLimits,w
  4338  0E45  00AE               	movwf	userInput_displayLimits@LL1
  4339                           
  4340                           ;userInput.c: 540:     char LL2 = (limits.lowLimit % 10);
  4341  0E46  300A               	movlw	10
  4342  0E47  00F9               	movwf	___awmod@divisor
  4343  0E48  3000               	movlw	0
  4344  0E49  00FA               	movwf	___awmod@divisor+1
  4345  0E4A  0823               	movf	userInput_displayLimits@limits+1,w
  4346  0E4B  00FC               	movwf	___awmod@dividend+1
  4347  0E4C  0822               	movf	userInput_displayLimits@limits,w
  4348  0E4D  00FB               	movwf	___awmod@dividend
  4349  0E4E  160A  118A  2488  120A  158A  	fcall	___awmod
  4350  0E53  0879               	movf	?___awmod,w
  4351  0E54  1283               	bcf	3,5	;RP0=0, select bank0
  4352  0E55  1303               	bcf	3,6	;RP1=0, select bank0
  4353  0E56  00AC               	movwf	??_userInput_displayLimits
  4354  0E57  082C               	movf	??_userInput_displayLimits,w
  4355  0E58  00AF               	movwf	userInput_displayLimits@LL2
  4356                           
  4357                           ;userInput.c: 542:     LCD_writeChar(' ');
  4358  0E59  3020               	movlw	32
  4359  0E5A  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4360                           
  4361                           ;userInput.c: 543:     LCD_writeChar(LL0 + '0');
  4362  0E5F  1283               	bcf	3,5	;RP0=0, select bank0
  4363  0E60  1303               	bcf	3,6	;RP1=0, select bank0
  4364  0E61  082D               	movf	userInput_displayLimits@LL0,w
  4365  0E62  3E30               	addlw	48
  4366  0E63  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4367                           
  4368                           ;userInput.c: 544:     LCD_writeChar(LL1 + '0');
  4369  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  4370  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  4371  0E6A  082E               	movf	userInput_displayLimits@LL1,w
  4372  0E6B  3E30               	addlw	48
  4373  0E6C  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4374                           
  4375                           ;userInput.c: 545:     LCD_writeChar('.');
  4376  0E71  302E               	movlw	46
  4377  0E72  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4378                           
  4379                           ;userInput.c: 546:     LCD_writeChar(LL2 + '0');
  4380  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  4381  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  4382  0E79  082F               	movf	userInput_displayLimits@LL2,w
  4383  0E7A  3E30               	addlw	48
  4384  0E7B  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4385                           
  4386                           ;userInput.c: 549:     LCD_write("      ", 6);
  4387  0E80  3006               	movlw	6
  4388  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  4389  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  4390  0E83  00AC               	movwf	??_userInput_displayLimits
  4391  0E84  082C               	movf	??_userInput_displayLimits,w
  4392  0E85  00F3               	movwf	LCD_write@len
  4393  0E86  3013               	movlw	(low (((STR_19+10)-__stringbase)| (0+32768)))& (0+255)
  4394  0E87  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  4395                           
  4396                           ;userInput.c: 550:     char L0 = (limits.low / 100) % 10;
  4397  0E8C  300A               	movlw	10
  4398  0E8D  00F9               	movwf	___awmod@divisor
  4399  0E8E  3000               	movlw	0
  4400  0E8F  00FA               	movwf	___awmod@divisor+1
  4401  0E90  3064               	movlw	100
  4402  0E91  00F0               	movwf	___awdiv@divisor
  4403  0E92  3000               	movlw	0
  4404  0E93  00F1               	movwf	___awdiv@divisor+1
  4405  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  4406  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  4407  0E96  0825               	movf	userInput_displayLimits@limits+3,w
  4408  0E97  00F3               	movwf	___awdiv@dividend+1
  4409  0E98  0824               	movf	userInput_displayLimits@limits+2,w
  4410  0E99  00F2               	movwf	___awdiv@dividend
  4411  0E9A  160A  118A  257D  120A  158A  	fcall	___awdiv
  4412  0E9F  0871               	movf	?___awdiv+1,w
  4413  0EA0  00FC               	movwf	___awmod@dividend+1
  4414  0EA1  0870               	movf	?___awdiv,w
  4415  0EA2  00FB               	movwf	___awmod@dividend
  4416  0EA3  160A  118A  2488  120A  158A  	fcall	___awmod
  4417  0EA8  0879               	movf	?___awmod,w
  4418  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  4419  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  4420  0EAB  00AC               	movwf	??_userInput_displayLimits
  4421  0EAC  082C               	movf	??_userInput_displayLimits,w
  4422  0EAD  00B0               	movwf	userInput_displayLimits@L0
  4423                           
  4424                           ;userInput.c: 551:     char L1 = (limits.low / 10) % 10;
  4425  0EAE  300A               	movlw	10
  4426  0EAF  00F9               	movwf	___awmod@divisor
  4427  0EB0  3000               	movlw	0
  4428  0EB1  00FA               	movwf	___awmod@divisor+1
  4429  0EB2  300A               	movlw	10
  4430  0EB3  00F0               	movwf	___awdiv@divisor
  4431  0EB4  3000               	movlw	0
  4432  0EB5  00F1               	movwf	___awdiv@divisor+1
  4433  0EB6  0825               	movf	userInput_displayLimits@limits+3,w
  4434  0EB7  00F3               	movwf	___awdiv@dividend+1
  4435  0EB8  0824               	movf	userInput_displayLimits@limits+2,w
  4436  0EB9  00F2               	movwf	___awdiv@dividend
  4437  0EBA  160A  118A  257D  120A  158A  	fcall	___awdiv
  4438  0EBF  0871               	movf	?___awdiv+1,w
  4439  0EC0  00FC               	movwf	___awmod@dividend+1
  4440  0EC1  0870               	movf	?___awdiv,w
  4441  0EC2  00FB               	movwf	___awmod@dividend
  4442  0EC3  160A  118A  2488  120A  158A  	fcall	___awmod
  4443  0EC8  0879               	movf	?___awmod,w
  4444  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  4445  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  4446  0ECB  00AC               	movwf	??_userInput_displayLimits
  4447  0ECC  082C               	movf	??_userInput_displayLimits,w
  4448  0ECD  00B1               	movwf	userInput_displayLimits@L1
  4449                           
  4450                           ;userInput.c: 552:     char L2 = (limits.low % 10);
  4451  0ECE  300A               	movlw	10
  4452  0ECF  00F9               	movwf	___awmod@divisor
  4453  0ED0  3000               	movlw	0
  4454  0ED1  00FA               	movwf	___awmod@divisor+1
  4455  0ED2  0825               	movf	userInput_displayLimits@limits+3,w
  4456  0ED3  00FC               	movwf	___awmod@dividend+1
  4457  0ED4  0824               	movf	userInput_displayLimits@limits+2,w
  4458  0ED5  00FB               	movwf	___awmod@dividend
  4459  0ED6  160A  118A  2488  120A  158A  	fcall	___awmod
  4460  0EDB  0879               	movf	?___awmod,w
  4461  0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0EDE  00AC               	movwf	??_userInput_displayLimits
  4464  0EDF  082C               	movf	??_userInput_displayLimits,w
  4465  0EE0  00B2               	movwf	userInput_displayLimits@L2
  4466                           
  4467                           ;userInput.c: 554:     LCD_writeChar(L0 + '0');
  4468  0EE1  0830               	movf	userInput_displayLimits@L0,w
  4469  0EE2  3E30               	addlw	48
  4470  0EE3  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4471                           
  4472                           ;userInput.c: 555:     LCD_writeChar(L1 + '0');
  4473  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  4474  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  4475  0EEA  0831               	movf	userInput_displayLimits@L1,w
  4476  0EEB  3E30               	addlw	48
  4477  0EEC  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4478                           
  4479                           ;userInput.c: 556:     LCD_writeChar('.');
  4480  0EF1  302E               	movlw	46
  4481  0EF2  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4482                           
  4483                           ;userInput.c: 557:     LCD_writeChar(L2 + '0');
  4484  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  4485  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  4486  0EF9  0832               	movf	userInput_displayLimits@L2,w
  4487  0EFA  3E30               	addlw	48
  4488  0EFB  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4489                           
  4490                           ;userInput.c: 560:     LCD_fourthLine();
  4491  0F00  160A  158A  2670  120A  158A  	fcall	_LCD_fourthLine
  4492                           
  4493                           ;userInput.c: 561:     char H0 = (limits.high / 100) % 10;
  4494  0F05  300A               	movlw	10
  4495  0F06  00F9               	movwf	___awmod@divisor
  4496  0F07  3000               	movlw	0
  4497  0F08  00FA               	movwf	___awmod@divisor+1
  4498  0F09  3064               	movlw	100
  4499  0F0A  00F0               	movwf	___awdiv@divisor
  4500  0F0B  3000               	movlw	0
  4501  0F0C  00F1               	movwf	___awdiv@divisor+1
  4502  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  4503  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  4504  0F0F  0827               	movf	userInput_displayLimits@limits+5,w
  4505  0F10  00F3               	movwf	___awdiv@dividend+1
  4506  0F11  0826               	movf	userInput_displayLimits@limits+4,w
  4507  0F12  00F2               	movwf	___awdiv@dividend
  4508  0F13  160A  118A  257D  120A  158A  	fcall	___awdiv
  4509  0F18  0871               	movf	?___awdiv+1,w
  4510  0F19  00FC               	movwf	___awmod@dividend+1
  4511  0F1A  0870               	movf	?___awdiv,w
  4512  0F1B  00FB               	movwf	___awmod@dividend
  4513  0F1C  160A  118A  2488  120A  158A  	fcall	___awmod
  4514  0F21  0879               	movf	?___awmod,w
  4515  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  4516  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  4517  0F24  00AC               	movwf	??_userInput_displayLimits
  4518  0F25  082C               	movf	??_userInput_displayLimits,w
  4519  0F26  00B3               	movwf	userInput_displayLimits@H0
  4520                           
  4521                           ;userInput.c: 562:     char H1 = (limits.high / 10) % 10;
  4522  0F27  300A               	movlw	10
  4523  0F28  00F9               	movwf	___awmod@divisor
  4524  0F29  3000               	movlw	0
  4525  0F2A  00FA               	movwf	___awmod@divisor+1
  4526  0F2B  300A               	movlw	10
  4527  0F2C  00F0               	movwf	___awdiv@divisor
  4528  0F2D  3000               	movlw	0
  4529  0F2E  00F1               	movwf	___awdiv@divisor+1
  4530  0F2F  0827               	movf	userInput_displayLimits@limits+5,w
  4531  0F30  00F3               	movwf	___awdiv@dividend+1
  4532  0F31  0826               	movf	userInput_displayLimits@limits+4,w
  4533  0F32  00F2               	movwf	___awdiv@dividend
  4534  0F33  160A  118A  257D  120A  158A  	fcall	___awdiv
  4535  0F38  0871               	movf	?___awdiv+1,w
  4536  0F39  00FC               	movwf	___awmod@dividend+1
  4537  0F3A  0870               	movf	?___awdiv,w
  4538  0F3B  00FB               	movwf	___awmod@dividend
  4539  0F3C  160A  118A  2488  120A  158A  	fcall	___awmod
  4540  0F41  0879               	movf	?___awmod,w
  4541  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  4542  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  4543  0F44  00AC               	movwf	??_userInput_displayLimits
  4544  0F45  082C               	movf	??_userInput_displayLimits,w
  4545  0F46  00B4               	movwf	userInput_displayLimits@H1
  4546                           
  4547                           ;userInput.c: 563:     char H2 = (limits.high % 10);
  4548  0F47  300A               	movlw	10
  4549  0F48  00F9               	movwf	___awmod@divisor
  4550  0F49  3000               	movlw	0
  4551  0F4A  00FA               	movwf	___awmod@divisor+1
  4552  0F4B  0827               	movf	userInput_displayLimits@limits+5,w
  4553  0F4C  00FC               	movwf	___awmod@dividend+1
  4554  0F4D  0826               	movf	userInput_displayLimits@limits+4,w
  4555  0F4E  00FB               	movwf	___awmod@dividend
  4556  0F4F  160A  118A  2488  120A  158A  	fcall	___awmod
  4557  0F54  0879               	movf	?___awmod,w
  4558  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  4559  0F56  1303               	bcf	3,6	;RP1=0, select bank0
  4560  0F57  00AC               	movwf	??_userInput_displayLimits
  4561  0F58  082C               	movf	??_userInput_displayLimits,w
  4562  0F59  00B5               	movwf	userInput_displayLimits@H2
  4563                           
  4564                           ;userInput.c: 565:     LCD_writeChar(' ');
  4565  0F5A  3020               	movlw	32
  4566  0F5B  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4567                           
  4568                           ;userInput.c: 566:     LCD_writeChar(H0 + '0');
  4569  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  4570  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  4571  0F62  0833               	movf	userInput_displayLimits@H0,w
  4572  0F63  3E30               	addlw	48
  4573  0F64  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4574                           
  4575                           ;userInput.c: 567:     LCD_writeChar(H1 + '0');
  4576  0F69  1283               	bcf	3,5	;RP0=0, select bank0
  4577  0F6A  1303               	bcf	3,6	;RP1=0, select bank0
  4578  0F6B  0834               	movf	userInput_displayLimits@H1,w
  4579  0F6C  3E30               	addlw	48
  4580  0F6D  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4581                           
  4582                           ;userInput.c: 568:     LCD_writeChar('.');
  4583  0F72  302E               	movlw	46
  4584  0F73  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4585                           
  4586                           ;userInput.c: 569:     LCD_writeChar(H2 + '0');
  4587  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4588  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4589  0F7A  0835               	movf	userInput_displayLimits@H2,w
  4590  0F7B  3E30               	addlw	48
  4591  0F7C  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4592                           
  4593                           ;userInput.c: 572:     LCD_write("      ", 6);
  4594  0F81  3006               	movlw	6
  4595  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  4596  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  4597  0F84  00AC               	movwf	??_userInput_displayLimits
  4598  0F85  082C               	movf	??_userInput_displayLimits,w
  4599  0F86  00F3               	movwf	LCD_write@len
  4600  0F87  3013               	movlw	(low (((STR_19+10)-__stringbase)| (0+32768)))& (0+255)
  4601  0F88  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  4602                           
  4603                           ;userInput.c: 573:     char HL0 = (limits.highLimit / 100) % 10;
  4604  0F8D  300A               	movlw	10
  4605  0F8E  00F9               	movwf	___awmod@divisor
  4606  0F8F  3000               	movlw	0
  4607  0F90  00FA               	movwf	___awmod@divisor+1
  4608  0F91  3064               	movlw	100
  4609  0F92  00F0               	movwf	___awdiv@divisor
  4610  0F93  3000               	movlw	0
  4611  0F94  00F1               	movwf	___awdiv@divisor+1
  4612  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  4613  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  4614  0F97  0829               	movf	userInput_displayLimits@limits+7,w
  4615  0F98  00F3               	movwf	___awdiv@dividend+1
  4616  0F99  0828               	movf	userInput_displayLimits@limits+6,w
  4617  0F9A  00F2               	movwf	___awdiv@dividend
  4618  0F9B  160A  118A  257D  120A  158A  	fcall	___awdiv
  4619  0FA0  0871               	movf	?___awdiv+1,w
  4620  0FA1  00FC               	movwf	___awmod@dividend+1
  4621  0FA2  0870               	movf	?___awdiv,w
  4622  0FA3  00FB               	movwf	___awmod@dividend
  4623  0FA4  160A  118A  2488  120A  158A  	fcall	___awmod
  4624  0FA9  0879               	movf	?___awmod,w
  4625  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  4626  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  4627  0FAC  00AC               	movwf	??_userInput_displayLimits
  4628  0FAD  082C               	movf	??_userInput_displayLimits,w
  4629  0FAE  00B6               	movwf	userInput_displayLimits@HL0
  4630                           
  4631                           ;userInput.c: 574:     char HL1 = (limits.highLimit / 10) % 10;
  4632  0FAF  300A               	movlw	10
  4633  0FB0  00F9               	movwf	___awmod@divisor
  4634  0FB1  3000               	movlw	0
  4635  0FB2  00FA               	movwf	___awmod@divisor+1
  4636  0FB3  300A               	movlw	10
  4637  0FB4  00F0               	movwf	___awdiv@divisor
  4638  0FB5  3000               	movlw	0
  4639  0FB6  00F1               	movwf	___awdiv@divisor+1
  4640  0FB7  0829               	movf	userInput_displayLimits@limits+7,w
  4641  0FB8  00F3               	movwf	___awdiv@dividend+1
  4642  0FB9  0828               	movf	userInput_displayLimits@limits+6,w
  4643  0FBA  00F2               	movwf	___awdiv@dividend
  4644  0FBB  160A  118A  257D  120A  158A  	fcall	___awdiv
  4645  0FC0  0871               	movf	?___awdiv+1,w
  4646  0FC1  00FC               	movwf	___awmod@dividend+1
  4647  0FC2  0870               	movf	?___awdiv,w
  4648  0FC3  00FB               	movwf	___awmod@dividend
  4649  0FC4  160A  118A  2488  120A  158A  	fcall	___awmod
  4650  0FC9  0879               	movf	?___awmod,w
  4651  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  4652  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  4653  0FCC  00AC               	movwf	??_userInput_displayLimits
  4654  0FCD  082C               	movf	??_userInput_displayLimits,w
  4655  0FCE  00B7               	movwf	userInput_displayLimits@HL1
  4656                           
  4657                           ;userInput.c: 575:     char HL2 = (limits.highLimit % 10);
  4658  0FCF  300A               	movlw	10
  4659  0FD0  00F9               	movwf	___awmod@divisor
  4660  0FD1  3000               	movlw	0
  4661  0FD2  00FA               	movwf	___awmod@divisor+1
  4662  0FD3  0829               	movf	userInput_displayLimits@limits+7,w
  4663  0FD4  00FC               	movwf	___awmod@dividend+1
  4664  0FD5  0828               	movf	userInput_displayLimits@limits+6,w
  4665  0FD6  00FB               	movwf	___awmod@dividend
  4666  0FD7  160A  118A  2488  120A  158A  	fcall	___awmod
  4667  0FDC  0879               	movf	?___awmod,w
  4668  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  4669  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  4670  0FDF  00AC               	movwf	??_userInput_displayLimits
  4671  0FE0  082C               	movf	??_userInput_displayLimits,w
  4672  0FE1  00B8               	movwf	userInput_displayLimits@HL2
  4673                           
  4674                           ;userInput.c: 577:     LCD_writeChar(HL0 + '0');
  4675  0FE2  0836               	movf	userInput_displayLimits@HL0,w
  4676  0FE3  3E30               	addlw	48
  4677  0FE4  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4678                           
  4679                           ;userInput.c: 578:     LCD_writeChar(HL1 + '0');
  4680  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  4681  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  4682  0FEB  0837               	movf	userInput_displayLimits@HL1,w
  4683  0FEC  3E30               	addlw	48
  4684  0FED  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4685                           
  4686                           ;userInput.c: 579:     LCD_writeChar('.');
  4687  0FF2  302E               	movlw	46
  4688  0FF3  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  4689                           
  4690                           ;userInput.c: 580:     LCD_writeChar(HL2 + '0');
  4691  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  4692  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  4693  0FFA  0838               	movf	userInput_displayLimits@HL2,w
  4694  0FFB  3E30               	addlw	48
  4695  0FFC  160A  158A  277C   	fcall	_LCD_writeChar
  4696  0FFF  0008               	return
  4697  1000                     __end_of_userInput_displayLimits:	
  4698                           
  4699                           	psect	text5
  4700  03E1                     __ptext5:	
  4701 ;; *************** function _userInput_getDate *****************
  4702 ;; Defined at:
  4703 ;;		line 36 in file "userInput.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  date           16   16[BANK0 ] struct Time
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  day             2   51[BANK0 ] int 
  4708 ;;  month           2   49[BANK0 ] int 
  4709 ;;  year            2   47[BANK0 ] int 
  4710 ;;  dayLimit        2   40[BANK0 ] int 
  4711 ;;  month           2   38[BANK0 ] int 
  4712 ;;  button          2   36[BANK0 ] int 
  4713 ;;  dateAddressC    2   42[BANK0 ] int 
  4714 ;;  buttonPress     1   46[BANK0 ] _Bool 
  4715 ;;  decrement       1   45[BANK0 ] _Bool 
  4716 ;;  increment       1   44[BANK0 ] _Bool 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  16   16[BANK0 ] struct Time
  4719 ;; Registers used:
  4720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4726 ;;      Params:         0      16       0       0       0
  4727 ;;      Locals:         0      17       0       0       0
  4728 ;;      Temps:          0       4       0       0       0
  4729 ;;      Totals:         0      37       0       0       0
  4730 ;;Total ram usage:       37 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    4
  4733 ;; This function calls:
  4734 ;;		_LCD_writeCmd
  4735 ;;		___awdiv
  4736 ;;		___awmod
  4737 ;;		___wmul
  4738 ;;		_matrix_checkButtons
  4739 ;;		_userInput_displayDate
  4740 ;; This function is called by:
  4741 ;;		_main
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _userInput_getDate
  4747  03E1                     _userInput_getDate:	
  4748                           
  4749                           ;userInput.c: 36: struct Time userInput_getDate(struct Time date);userInput.c: 37: {;use
      +                          rInput.c: 38:     userInput_displayDate(date);
  4750                           
  4751                           ;incstack = 0
  4752                           ; Regs used in _userInput_getDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4753  03E1  3020               	movlw	userInput_displayDate@date& (0+255)
  4754  03E2  0084               	movwf	4
  4755  03E3  3030               	movlw	low userInput_getDate@date
  4756  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  4757  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  4758  03E6  00C0               	movwf	??_userInput_getDate
  4759  03E7  0804               	movf	4,w
  4760  03E8  00C1               	movwf	??_userInput_getDate+1
  4761  03E9  3010               	movlw	16
  4762  03EA  00C2               	movwf	??_userInput_getDate+2
  4763  03EB                     u3580:	
  4764  03EB  0840               	movf	??_userInput_getDate,w
  4765  03EC  0084               	movwf	4
  4766  03ED  1383               	bcf	3,7	;select IRP bank0
  4767  03EE  0800               	movf	0,w
  4768  03EF  00C3               	movwf	??_userInput_getDate+3
  4769  03F0  0AC0               	incf	??_userInput_getDate,f
  4770  03F1  0841               	movf	??_userInput_getDate+1,w
  4771  03F2  0084               	movwf	4
  4772  03F3  0843               	movf	??_userInput_getDate+3,w
  4773  03F4  0080               	movwf	0
  4774  03F5  0AC1               	incf	??_userInput_getDate+1,f
  4775  03F6  0BC2               	decfsz	??_userInput_getDate+2,f
  4776  03F7  2BEB               	goto	u3580
  4777  03F8  160A  118A  24D5  120A  118A  	fcall	_userInput_displayDate
  4778                           
  4779                           ;userInput.c: 41:     LCD_writeCmd(0x84);
  4780  03FD  3084               	movlw	132
  4781  03FE  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  4782                           
  4783                           ;userInput.c: 43:     int dateAddressCounter = 0;
  4784  0403  1283               	bcf	3,5	;RP0=0, select bank0
  4785  0404  1303               	bcf	3,6	;RP1=0, select bank0
  4786  0405  01CA               	clrf	userInput_getDate@dateAddressCounter
  4787  0406  01CB               	clrf	userInput_getDate@dateAddressCounter+1
  4788                           
  4789                           ;userInput.c: 44:     _Bool buttonPress = 0;
  4790  0407  01CE               	clrf	userInput_getDate@buttonPress
  4791                           
  4792                           ;userInput.c: 45:     _Bool increment = 0;
  4793  0408  01CC               	clrf	userInput_getDate@increment
  4794  0409                     l4447:	
  4795                           
  4796                           ;userInput.c: 46:     _Bool decrement = 0;
  4797  0409  1283               	bcf	3,5	;RP0=0, select bank0
  4798  040A  1303               	bcf	3,6	;RP1=0, select bank0
  4799  040B  01CD               	clrf	userInput_getDate@decrement
  4800  040C                     l4449:	
  4801                           
  4802                           ;userInput.c: 52:     {;userInput.c: 53:         int button = matrix_checkButtons();
  4803  040C  160A  118A  25D6  120A  118A  	fcall	_matrix_checkButtons
  4804  0411  0873               	movf	?_matrix_checkButtons+1,w
  4805  0412  1283               	bcf	3,5	;RP0=0, select bank0
  4806  0413  1303               	bcf	3,6	;RP1=0, select bank0
  4807  0414  00C5               	movwf	userInput_getDate@button+1
  4808  0415  0872               	movf	?_matrix_checkButtons,w
  4809  0416  00C4               	movwf	userInput_getDate@button
  4810                           
  4811                           ;userInput.c: 54:         switch (button)
  4812  0417  2C4C               	goto	l4495
  4813  0418                     l4451:	
  4814                           
  4815                           ;userInput.c: 57:                 buttonPress = 0;
  4816  0418  01CE               	clrf	userInput_getDate@buttonPress
  4817                           
  4818                           ;userInput.c: 58:                 break;
  4819  0419  2C68               	goto	l4497
  4820  041A                     l4453:	
  4821                           
  4822                           ;userInput.c: 62:                 if (!buttonPress && dateAddressCounter != 0) dateAddre
      +                          ssCounter--;
  4823  041A  084E               	movf	userInput_getDate@buttonPress,w
  4824  041B  1D03               	btfss	3,2
  4825  041C  2C27               	goto	l4459
  4826  041D  084A               	movf	userInput_getDate@dateAddressCounter,w
  4827  041E  044B               	iorwf	userInput_getDate@dateAddressCounter+1,w
  4828  041F  1903               	btfsc	3,2
  4829  0420  2C27               	goto	l4459
  4830  0421  30FF               	movlw	255
  4831  0422  07CA               	addwf	userInput_getDate@dateAddressCounter,f
  4832  0423  1803               	skipnc
  4833  0424  0ACB               	incf	userInput_getDate@dateAddressCounter+1,f
  4834  0425  30FF               	movlw	255
  4835  0426                     L7:	
  4836  0426  07CB               	addwf	userInput_getDate@dateAddressCounter+1,f
  4837  0427                     l4459:	
  4838                           
  4839                           ;userInput.c: 63:                 buttonPress = 1;
  4840  0427  01CE               	clrf	userInput_getDate@buttonPress
  4841  0428  0ACE               	incf	userInput_getDate@buttonPress,f
  4842                           
  4843                           ;userInput.c: 64:                 break;
  4844  0429  2C68               	goto	l4497
  4845  042A                     l4461:	
  4846                           
  4847                           ;userInput.c: 66:                 if (!buttonPress) decrement = 1;
  4848  042A  084E               	movf	userInput_getDate@buttonPress,w
  4849  042B  1D03               	btfss	3,2
  4850  042C  2C68               	goto	l4497
  4851  042D  01CD               	clrf	userInput_getDate@decrement
  4852  042E  0ACD               	incf	userInput_getDate@decrement,f
  4853  042F  2C68               	goto	l4497
  4854  0430                     l4465:	
  4855                           
  4856                           ;userInput.c: 69:                 if (!buttonPress) increment = 1;
  4857  0430  084E               	movf	userInput_getDate@buttonPress,w
  4858  0431  1D03               	btfss	3,2
  4859  0432  2C68               	goto	l4497
  4860  0433  01CC               	clrf	userInput_getDate@increment
  4861  0434  0ACC               	incf	userInput_getDate@increment,f
  4862  0435  2C68               	goto	l4497
  4863  0436                     l4469:	
  4864                           
  4865                           ;userInput.c: 74:                 if (!buttonPress && dateAddressCounter != 3) dateAddre
      +                          ssCounter++;
  4866  0436  084E               	movf	userInput_getDate@buttonPress,w
  4867  0437  1D03               	btfss	3,2
  4868  0438  2C27               	goto	l4459
  4869  0439  3003               	movlw	3
  4870  043A  064A               	xorwf	userInput_getDate@dateAddressCounter,w
  4871  043B  044B               	iorwf	userInput_getDate@dateAddressCounter+1,w
  4872  043C  1903               	btfsc	3,2
  4873  043D  2C27               	goto	l4459
  4874  043E  3001               	movlw	1
  4875  043F  07CA               	addwf	userInput_getDate@dateAddressCounter,f
  4876  0440  1803               	skipnc
  4877  0441  0ACB               	incf	userInput_getDate@dateAddressCounter+1,f
  4878  0442  3000               	movlw	0
  4879  0443  2C26               	goto	L7
  4880  0444                     l4477:	
  4881                           
  4882                           ;userInput.c: 79:                 date.valid = 0;
  4883  0444  01BE               	clrf	userInput_getDate@date+14
  4884  0445  01BF               	clrf	userInput_getDate@date+15
  4885                           
  4886                           ;userInput.c: 80:                 return date;
  4887  0446  0008               	return
  4888  0447                     l4485:	
  4889                           
  4890                           ;userInput.c: 83:                 date.valid = 1;
  4891  0447  3001               	movlw	1
  4892  0448  00BE               	movwf	userInput_getDate@date+14
  4893  0449  3000               	movlw	0
  4894  044A  00BF               	movwf	userInput_getDate@date+15
  4895  044B  0008               	return
  4896  044C                     l4495:	
  4897                           
  4898                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4899                           ; Switch size 1, requested type "simple"
  4900                           ; Number of cases is 1, Range of values is 0 to 0
  4901                           ; switch strategies available:
  4902                           ; Name         Instructions Cycles
  4903                           ; simple_byte            4     3 (average)
  4904                           ; direct_byte           11     8 (fixed)
  4905                           ; jumptable            260     6 (fixed)
  4906                           ;	Chosen strategy is simple_byte
  4907  044C  0845               	movf	userInput_getDate@button+1,w
  4908  044D  3A00               	xorlw	0	; case 0
  4909  044E  1903               	skipnz
  4910  044F  2C51               	goto	l5073
  4911  0450  2C68               	goto	l4497
  4912  0451                     l5073:	
  4913                           
  4914                           ; Switch size 1, requested type "simple"
  4915                           ; Number of cases is 7, Range of values is 0 to 16
  4916                           ; switch strategies available:
  4917                           ; Name         Instructions Cycles
  4918                           ; simple_byte           22    12 (average)
  4919                           ; direct_byte           59     8 (fixed)
  4920                           ; jumptable            260     6 (fixed)
  4921                           ;	Chosen strategy is simple_byte
  4922  0451  0844               	movf	userInput_getDate@button,w
  4923  0452  3A00               	xorlw	0	; case 0
  4924  0453  1903               	skipnz
  4925  0454  2C18               	goto	l4451
  4926  0455  3A02               	xorlw	2	; case 2
  4927  0456  1903               	skipnz
  4928  0457  2C1A               	goto	l4453
  4929  0458  3A07               	xorlw	7	; case 5
  4930  0459  1903               	skipnz
  4931  045A  2C2A               	goto	l4461
  4932  045B  3A02               	xorlw	2	; case 7
  4933  045C  1903               	skipnz
  4934  045D  2C30               	goto	l4465
  4935  045E  3A0D               	xorlw	13	; case 10
  4936  045F  1903               	skipnz
  4937  0460  2C36               	goto	l4469
  4938  0461  3A07               	xorlw	7	; case 13
  4939  0462  1903               	skipnz
  4940  0463  2C44               	goto	l4477
  4941  0464  3A1D               	xorlw	29	; case 16
  4942  0465  1903               	skipnz
  4943  0466  2C47               	goto	l4485
  4944  0467  2C68               	goto	l4497
  4945  0468                     l4497:	
  4946                           
  4947                           ;userInput.c: 88:         int month = ((date.month1)*10) + (date.month2) -1;
  4948  0468  0838               	movf	userInput_getDate@date+8,w
  4949  0469  00C0               	movwf	??_userInput_getDate
  4950  046A  01C1               	clrf	??_userInput_getDate+1
  4951  046B  0840               	movf	??_userInput_getDate,w
  4952  046C  00F0               	movwf	___wmul@multiplier
  4953  046D  0841               	movf	??_userInput_getDate+1,w
  4954  046E  00F1               	movwf	___wmul@multiplier+1
  4955  046F  300A               	movlw	10
  4956  0470  00F2               	movwf	___wmul@multiplicand
  4957  0471  3000               	movlw	0
  4958  0472  00F3               	movwf	___wmul@multiplicand+1
  4959  0473  160A  158A  279A  120A  118A  	fcall	___wmul
  4960  0478  1283               	bcf	3,5	;RP0=0, select bank0
  4961  0479  1303               	bcf	3,6	;RP1=0, select bank0
  4962  047A  0839               	movf	userInput_getDate@date+9,w
  4963  047B  0770               	addwf	?___wmul,w
  4964  047C  00C2               	movwf	??_userInput_getDate+2
  4965  047D  3000               	movlw	0
  4966  047E  1803               	skipnc
  4967  047F  3001               	movlw	1
  4968  0480  0771               	addwf	?___wmul+1,w
  4969  0481  00C3               	movwf	??_userInput_getDate+3
  4970  0482  0842               	movf	??_userInput_getDate+2,w
  4971  0483  3EFF               	addlw	255
  4972  0484  00C6               	movwf	userInput_getDate@month
  4973  0485  0843               	movf	??_userInput_getDate+3,w
  4974  0486  1803               	skipnc
  4975  0487  3E01               	addlw	1
  4976  0488  3EFF               	addlw	255
  4977  0489  00C7               	movwf	userInput_getDate@month+1
  4978                           
  4979                           ;userInput.c: 89:         int dayLimit = daysInMonth[month];
  4980  048A  0846               	movf	userInput_getDate@month,w
  4981  048B  00C0               	movwf	??_userInput_getDate
  4982  048C  0740               	addwf	??_userInput_getDate,w
  4983  048D  3EBB               	addlw	(low (_daysInMonth| (0+256)))& (0+255)
  4984  048E  0084               	movwf	4
  4985  048F  1783               	bsf	3,7	;select IRP bank3
  4986  0490  0800               	movf	0,w
  4987  0491  00C8               	movwf	userInput_getDate@dayLimit
  4988  0492  0A84               	incf	4,f
  4989  0493  0800               	movf	0,w
  4990  0494  00C9               	movwf	userInput_getDate@dayLimit+1
  4991                           
  4992                           ;userInput.c: 94:         switch (dateAddressCounter)
  4993  0495  2FB4               	goto	l4629
  4994  0496                     l4501:	
  4995                           
  4996                           ;userInput.c: 99:                 LCD_writeCmd(0x82);
  4997  0496  3082               	movlw	130
  4998  0497  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  4999                           
  5000                           ;userInput.c: 102:                 day = ((date.day1)*10) + (date.day2);
  5001  049C  1283               	bcf	3,5	;RP0=0, select bank0
  5002  049D  1303               	bcf	3,6	;RP1=0, select bank0
  5003  049E  0836               	movf	userInput_getDate@date+6,w
  5004  049F  00C0               	movwf	??_userInput_getDate
  5005  04A0  01C1               	clrf	??_userInput_getDate+1
  5006  04A1  0840               	movf	??_userInput_getDate,w
  5007  04A2  00F0               	movwf	___wmul@multiplier
  5008  04A3  0841               	movf	??_userInput_getDate+1,w
  5009  04A4  00F1               	movwf	___wmul@multiplier+1
  5010  04A5  300A               	movlw	10
  5011  04A6  00F2               	movwf	___wmul@multiplicand
  5012  04A7  3000               	movlw	0
  5013  04A8  00F3               	movwf	___wmul@multiplicand+1
  5014  04A9  160A  158A  279A  120A  118A  	fcall	___wmul
  5015  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  5016  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  5017  04B0  0837               	movf	userInput_getDate@date+7,w
  5018  04B1  0770               	addwf	?___wmul,w
  5019  04B2  00D3               	movwf	userInput_getDate@day
  5020  04B3  3000               	movlw	0
  5021  04B4  1803               	skipnc
  5022  04B5  3001               	movlw	1
  5023  04B6  0771               	addwf	?___wmul+1,w
  5024  04B7  00D4               	movwf	userInput_getDate@day+1
  5025                           
  5026                           ;userInput.c: 104:                 if (increment == 1)
  5027  04B8  034C               	decf	userInput_getDate@increment,w
  5028  04B9  1D03               	btfss	3,2
  5029  04BA  2D27               	goto	l4521
  5030                           
  5031                           ;userInput.c: 105:                 {;userInput.c: 107:                     if (day >= da
      +                          yLimit) day = 1;
  5032  04BB  0854               	movf	userInput_getDate@day+1,w
  5033  04BC  3A80               	xorlw	128
  5034  04BD  00C0               	movwf	??_userInput_getDate
  5035  04BE  0849               	movf	userInput_getDate@dayLimit+1,w
  5036  04BF  3A80               	xorlw	128
  5037  04C0  0240               	subwf	??_userInput_getDate,w
  5038  04C1  1D03               	skipz
  5039  04C2  2CC5               	goto	u3665
  5040  04C3  0848               	movf	userInput_getDate@dayLimit,w
  5041  04C4  0253               	subwf	userInput_getDate@day,w
  5042  04C5                     u3665:	
  5043  04C5  1C03               	skipc
  5044  04C6  2CCE               	goto	l4511
  5045  04C7  3001               	movlw	1
  5046  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  5047  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  5048  04CA  00D3               	movwf	userInput_getDate@day
  5049  04CB  3000               	movlw	0
  5050  04CC  00D4               	movwf	userInput_getDate@day+1
  5051  04CD  2CD6               	goto	l4513
  5052  04CE                     l4511:	
  5053  04CE  3001               	movlw	1
  5054  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  5055  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  5056  04D1  07D3               	addwf	userInput_getDate@day,f
  5057  04D2  1803               	skipnc
  5058  04D3  0AD4               	incf	userInput_getDate@day+1,f
  5059  04D4  3000               	movlw	0
  5060  04D5  07D4               	addwf	userInput_getDate@day+1,f
  5061  04D6                     l4513:	
  5062                           
  5063                           ;userInput.c: 111:                     date.day1 = (day / 10) % 10;
  5064  04D6  300A               	movlw	10
  5065  04D7  00F9               	movwf	___awmod@divisor
  5066  04D8  3000               	movlw	0
  5067  04D9  00FA               	movwf	___awmod@divisor+1
  5068  04DA  300A               	movlw	10
  5069  04DB  00F0               	movwf	___awdiv@divisor
  5070  04DC  3000               	movlw	0
  5071  04DD  00F1               	movwf	___awdiv@divisor+1
  5072  04DE  0854               	movf	userInput_getDate@day+1,w
  5073  04DF  00F3               	movwf	___awdiv@dividend+1
  5074  04E0  0853               	movf	userInput_getDate@day,w
  5075  04E1  00F2               	movwf	___awdiv@dividend
  5076  04E2  160A  118A  257D  120A  118A  	fcall	___awdiv
  5077  04E7  0871               	movf	?___awdiv+1,w
  5078  04E8  00FC               	movwf	___awmod@dividend+1
  5079  04E9  0870               	movf	?___awdiv,w
  5080  04EA  00FB               	movwf	___awmod@dividend
  5081  04EB  160A  118A  2488  120A  118A  	fcall	___awmod
  5082  04F0  0879               	movf	?___awmod,w
  5083  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  5084  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  5085  04F3  00C0               	movwf	??_userInput_getDate
  5086  04F4  0840               	movf	??_userInput_getDate,w
  5087  04F5  00B6               	movwf	userInput_getDate@date+6
  5088                           
  5089                           ;userInput.c: 112:                     date.day2 = (day % 10);
  5090  04F6  300A               	movlw	10
  5091  04F7  00F9               	movwf	___awmod@divisor
  5092  04F8  3000               	movlw	0
  5093  04F9  00FA               	movwf	___awmod@divisor+1
  5094  04FA  0854               	movf	userInput_getDate@day+1,w
  5095  04FB  00FC               	movwf	___awmod@dividend+1
  5096  04FC  0853               	movf	userInput_getDate@day,w
  5097  04FD  00FB               	movwf	___awmod@dividend
  5098  04FE  160A  118A  2488  120A  118A  	fcall	___awmod
  5099  0503  0879               	movf	?___awmod,w
  5100  0504  1283               	bcf	3,5	;RP0=0, select bank0
  5101  0505  1303               	bcf	3,6	;RP1=0, select bank0
  5102  0506  00C0               	movwf	??_userInput_getDate
  5103  0507  0840               	movf	??_userInput_getDate,w
  5104  0508  00B7               	movwf	userInput_getDate@date+7
  5105                           
  5106                           ;userInput.c: 114:                     userInput_displayDate(date);
  5107  0509  3020               	movlw	userInput_displayDate@date& (0+255)
  5108  050A  0084               	movwf	4
  5109  050B  3030               	movlw	low userInput_getDate@date
  5110  050C  00C0               	movwf	??_userInput_getDate
  5111  050D  0804               	movf	4,w
  5112  050E  00C1               	movwf	??_userInput_getDate+1
  5113  050F  3010               	movlw	16
  5114  0510  00C2               	movwf	??_userInput_getDate+2
  5115  0511                     u3670:	
  5116  0511  0840               	movf	??_userInput_getDate,w
  5117  0512  0084               	movwf	4
  5118  0513  1383               	bcf	3,7	;select IRP bank0
  5119  0514  0800               	movf	0,w
  5120  0515  00C3               	movwf	??_userInput_getDate+3
  5121  0516  0AC0               	incf	??_userInput_getDate,f
  5122  0517  0841               	movf	??_userInput_getDate+1,w
  5123  0518  0084               	movwf	4
  5124  0519  0843               	movf	??_userInput_getDate+3,w
  5125  051A  0080               	movwf	0
  5126  051B  0AC1               	incf	??_userInput_getDate+1,f
  5127  051C  0BC2               	decfsz	??_userInput_getDate+2,f
  5128  051D  2D11               	goto	u3670
  5129  051E  160A  118A  24D5  120A  118A  	fcall	_userInput_displayDate
  5130                           
  5131                           ;userInput.c: 115:                     increment = 0;
  5132  0523  1283               	bcf	3,5	;RP0=0, select bank0
  5133  0524  1303               	bcf	3,6	;RP1=0, select bank0
  5134  0525  01CC               	clrf	userInput_getDate@increment
  5135                           
  5136                           ;userInput.c: 116:                 }
  5137  0526  2C0C               	goto	l4449
  5138  0527                     l4521:	
  5139  0527  034D               	decf	userInput_getDate@decrement,w
  5140  0528  1D03               	btfss	3,2
  5141  0529  2C0C               	goto	l4449
  5142                           
  5143                           ;userInput.c: 118:                     if (day == 0) day = dayLimit;
  5144  052A  0853               	movf	userInput_getDate@day,w
  5145  052B  0454               	iorwf	userInput_getDate@day+1,w
  5146  052C  1D03               	btfss	3,2
  5147  052D  2D33               	goto	l4527
  5148  052E  0849               	movf	userInput_getDate@dayLimit+1,w
  5149  052F  00D4               	movwf	userInput_getDate@day+1
  5150  0530  0848               	movf	userInput_getDate@dayLimit,w
  5151  0531  00D3               	movwf	userInput_getDate@day
  5152  0532  2D39               	goto	l4529
  5153  0533                     l4527:	
  5154  0533  30FF               	movlw	255
  5155  0534  07D3               	addwf	userInput_getDate@day,f
  5156  0535  1803               	skipnc
  5157  0536  0AD4               	incf	userInput_getDate@day+1,f
  5158  0537  30FF               	movlw	255
  5159  0538  07D4               	addwf	userInput_getDate@day+1,f
  5160  0539                     l4529:	
  5161                           
  5162                           ;userInput.c: 122:                     date.day1 = (day / 10) % 10;
  5163  0539  300A               	movlw	10
  5164  053A  00F9               	movwf	___awmod@divisor
  5165  053B  3000               	movlw	0
  5166  053C  00FA               	movwf	___awmod@divisor+1
  5167  053D  300A               	movlw	10
  5168  053E  00F0               	movwf	___awdiv@divisor
  5169  053F  3000               	movlw	0
  5170  0540  00F1               	movwf	___awdiv@divisor+1
  5171  0541  0854               	movf	userInput_getDate@day+1,w
  5172  0542  00F3               	movwf	___awdiv@dividend+1
  5173  0543  0853               	movf	userInput_getDate@day,w
  5174  0544  00F2               	movwf	___awdiv@dividend
  5175  0545  160A  118A  257D  120A  118A  	fcall	___awdiv
  5176  054A  0871               	movf	?___awdiv+1,w
  5177  054B  00FC               	movwf	___awmod@dividend+1
  5178  054C  0870               	movf	?___awdiv,w
  5179  054D  00FB               	movwf	___awmod@dividend
  5180  054E  160A  118A  2488  120A  118A  	fcall	___awmod
  5181  0553  0879               	movf	?___awmod,w
  5182  0554  1283               	bcf	3,5	;RP0=0, select bank0
  5183  0555  1303               	bcf	3,6	;RP1=0, select bank0
  5184  0556  00C0               	movwf	??_userInput_getDate
  5185  0557  0840               	movf	??_userInput_getDate,w
  5186  0558  00B6               	movwf	userInput_getDate@date+6
  5187                           
  5188                           ;userInput.c: 123:                     date.day2 = (day % 10);
  5189  0559  300A               	movlw	10
  5190  055A  00F9               	movwf	___awmod@divisor
  5191  055B  3000               	movlw	0
  5192  055C  00FA               	movwf	___awmod@divisor+1
  5193  055D  0854               	movf	userInput_getDate@day+1,w
  5194  055E  00FC               	movwf	___awmod@dividend+1
  5195  055F  0853               	movf	userInput_getDate@day,w
  5196  0560  00FB               	movwf	___awmod@dividend
  5197  0561  160A  118A  2488  120A  118A  	fcall	___awmod
  5198  0566  0879               	movf	?___awmod,w
  5199  0567  1283               	bcf	3,5	;RP0=0, select bank0
  5200  0568  1303               	bcf	3,6	;RP1=0, select bank0
  5201  0569  00C0               	movwf	??_userInput_getDate
  5202  056A  0840               	movf	??_userInput_getDate,w
  5203  056B  00B7               	movwf	userInput_getDate@date+7
  5204  056C                     l4533:	
  5205                           
  5206                           ;userInput.c: 125:                     userInput_displayDate(date);
  5207  056C  3020               	movlw	userInput_displayDate@date& (0+255)
  5208  056D  0084               	movwf	4
  5209  056E  3030               	movlw	low userInput_getDate@date
  5210  056F  1283               	bcf	3,5	;RP0=0, select bank0
  5211  0570  1303               	bcf	3,6	;RP1=0, select bank0
  5212  0571  00C0               	movwf	??_userInput_getDate
  5213  0572  0804               	movf	4,w
  5214  0573  00C1               	movwf	??_userInput_getDate+1
  5215  0574  3010               	movlw	16
  5216  0575  00C2               	movwf	??_userInput_getDate+2
  5217  0576                     u3700:	
  5218  0576  0840               	movf	??_userInput_getDate,w
  5219  0577  0084               	movwf	4
  5220  0578  1383               	bcf	3,7	;select IRP bank0
  5221  0579  0800               	movf	0,w
  5222  057A  00C3               	movwf	??_userInput_getDate+3
  5223  057B  0AC0               	incf	??_userInput_getDate,f
  5224  057C  0841               	movf	??_userInput_getDate+1,w
  5225  057D  0084               	movwf	4
  5226  057E  0843               	movf	??_userInput_getDate+3,w
  5227  057F  0080               	movwf	0
  5228  0580  0AC1               	incf	??_userInput_getDate+1,f
  5229  0581  0BC2               	decfsz	??_userInput_getDate+2,f
  5230  0582  2D76               	goto	u3700
  5231  0583  160A  118A  24D5  120A  118A  	fcall	_userInput_displayDate
  5232  0588  2C09               	goto	l4447
  5233  0589                     l4537:	
  5234                           
  5235                           ;userInput.c: 132:                 LCD_writeCmd(0x83);
  5236  0589  3083               	movlw	131
  5237  058A  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  5238                           
  5239                           ;userInput.c: 135:                 int month = ((date.month1)*10) + (date.month2);
  5240  058F  1283               	bcf	3,5	;RP0=0, select bank0
  5241  0590  1303               	bcf	3,6	;RP1=0, select bank0
  5242  0591  0838               	movf	userInput_getDate@date+8,w
  5243  0592  00C0               	movwf	??_userInput_getDate
  5244  0593  01C1               	clrf	??_userInput_getDate+1
  5245  0594  0840               	movf	??_userInput_getDate,w
  5246  0595  00F0               	movwf	___wmul@multiplier
  5247  0596  0841               	movf	??_userInput_getDate+1,w
  5248  0597  00F1               	movwf	___wmul@multiplier+1
  5249  0598  300A               	movlw	10
  5250  0599  00F2               	movwf	___wmul@multiplicand
  5251  059A  3000               	movlw	0
  5252  059B  00F3               	movwf	___wmul@multiplicand+1
  5253  059C  160A  158A  279A  120A  118A  	fcall	___wmul
  5254  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  5255  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  5256  05A3  0839               	movf	userInput_getDate@date+9,w
  5257  05A4  0770               	addwf	?___wmul,w
  5258  05A5  00D1               	movwf	userInput_getDate@month_669
  5259  05A6  3000               	movlw	0
  5260  05A7  1803               	skipnc
  5261  05A8  3001               	movlw	1
  5262  05A9  0771               	addwf	?___wmul+1,w
  5263  05AA  00D2               	movwf	userInput_getDate@month_669+1
  5264                           
  5265                           ;userInput.c: 136:                 day = ((date.day1)*10) + (date.day2);
  5266  05AB  0836               	movf	userInput_getDate@date+6,w
  5267  05AC  00C0               	movwf	??_userInput_getDate
  5268  05AD  01C1               	clrf	??_userInput_getDate+1
  5269  05AE  0840               	movf	??_userInput_getDate,w
  5270  05AF  00F0               	movwf	___wmul@multiplier
  5271  05B0  0841               	movf	??_userInput_getDate+1,w
  5272  05B1  00F1               	movwf	___wmul@multiplier+1
  5273  05B2  300A               	movlw	10
  5274  05B3  00F2               	movwf	___wmul@multiplicand
  5275  05B4  3000               	movlw	0
  5276  05B5  00F3               	movwf	___wmul@multiplicand+1
  5277  05B6  160A  158A  279A  120A  118A  	fcall	___wmul
  5278  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  5279  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  5280  05BD  0837               	movf	userInput_getDate@date+7,w
  5281  05BE  0770               	addwf	?___wmul,w
  5282  05BF  00D3               	movwf	userInput_getDate@day
  5283  05C0  3000               	movlw	0
  5284  05C1  1803               	skipnc
  5285  05C2  3001               	movlw	1
  5286  05C3  0771               	addwf	?___wmul+1,w
  5287  05C4  00D4               	movwf	userInput_getDate@day+1
  5288                           
  5289                           ;userInput.c: 138:                 if (increment == 1)
  5290  05C5  034C               	decf	userInput_getDate@increment,w
  5291  05C6  1D03               	btfss	3,2
  5292  05C7  2E81               	goto	l4567
  5293                           
  5294                           ;userInput.c: 139:                 {;userInput.c: 141:                     if (month == 
      +                          12) month = 1;
  5295  05C8  300C               	movlw	12
  5296  05C9  0651               	xorwf	userInput_getDate@month_669,w
  5297  05CA  0452               	iorwf	userInput_getDate@month_669+1,w
  5298  05CB  1D03               	btfss	3,2
  5299  05CC  2DD2               	goto	l4549
  5300  05CD  3001               	movlw	1
  5301  05CE  00D1               	movwf	userInput_getDate@month_669
  5302  05CF  3000               	movlw	0
  5303  05D0  00D2               	movwf	userInput_getDate@month_669+1
  5304  05D1  2DD8               	goto	l4551
  5305  05D2                     l4549:	
  5306  05D2  3001               	movlw	1
  5307  05D3  07D1               	addwf	userInput_getDate@month_669,f
  5308  05D4  1803               	skipnc
  5309  05D5  0AD2               	incf	userInput_getDate@month_669+1,f
  5310  05D6  3000               	movlw	0
  5311  05D7  07D2               	addwf	userInput_getDate@month_669+1,f
  5312  05D8                     l4551:	
  5313                           
  5314                           ;userInput.c: 145:                     date.month1 = (month / 10) % 10;
  5315  05D8  300A               	movlw	10
  5316  05D9  00F9               	movwf	___awmod@divisor
  5317  05DA  3000               	movlw	0
  5318  05DB  00FA               	movwf	___awmod@divisor+1
  5319  05DC  300A               	movlw	10
  5320  05DD  00F0               	movwf	___awdiv@divisor
  5321  05DE  3000               	movlw	0
  5322  05DF  00F1               	movwf	___awdiv@divisor+1
  5323  05E0  0852               	movf	userInput_getDate@month_669+1,w
  5324  05E1  00F3               	movwf	___awdiv@dividend+1
  5325  05E2  0851               	movf	userInput_getDate@month_669,w
  5326  05E3  00F2               	movwf	___awdiv@dividend
  5327  05E4  160A  118A  257D  120A  118A  	fcall	___awdiv
  5328  05E9  0871               	movf	?___awdiv+1,w
  5329  05EA  00FC               	movwf	___awmod@dividend+1
  5330  05EB  0870               	movf	?___awdiv,w
  5331  05EC  00FB               	movwf	___awmod@dividend
  5332  05ED  160A  118A  2488  120A  118A  	fcall	___awmod
  5333  05F2  0879               	movf	?___awmod,w
  5334  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  5335  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  5336  05F5  00C0               	movwf	??_userInput_getDate
  5337  05F6  0840               	movf	??_userInput_getDate,w
  5338  05F7  00B8               	movwf	userInput_getDate@date+8
  5339                           
  5340                           ;userInput.c: 146:                     date.month2 = (month % 10);
  5341  05F8  300A               	movlw	10
  5342  05F9  00F9               	movwf	___awmod@divisor
  5343  05FA  3000               	movlw	0
  5344  05FB  00FA               	movwf	___awmod@divisor+1
  5345  05FC  0852               	movf	userInput_getDate@month_669+1,w
  5346  05FD  00FC               	movwf	___awmod@dividend+1
  5347  05FE  0851               	movf	userInput_getDate@month_669,w
  5348  05FF  00FB               	movwf	___awmod@dividend
  5349  0600  160A  118A  2488  120A  118A  	fcall	___awmod
  5350  0605  0879               	movf	?___awmod,w
  5351  0606  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0607  1303               	bcf	3,6	;RP1=0, select bank0
  5353  0608  00C0               	movwf	??_userInput_getDate
  5354  0609  0840               	movf	??_userInput_getDate,w
  5355  060A  00B9               	movwf	userInput_getDate@date+9
  5356                           
  5357                           ;userInput.c: 149:                     if (day > daysInMonth[month-1] )
  5358  060B  0851               	movf	userInput_getDate@month_669,w
  5359  060C  00C0               	movwf	??_userInput_getDate
  5360  060D  0740               	addwf	??_userInput_getDate,w
  5361  060E  3EB9               	addlw	(low ((_daysInMonth| (0+256)+254)))& (0+255)
  5362  060F  0084               	movwf	4
  5363  0610  1783               	bsf	3,7	;select IRP bank3
  5364  0611  0800               	movf	0,w
  5365  0612  00C1               	movwf	??_userInput_getDate+1
  5366  0613  0A84               	incf	4,f
  5367  0614  0800               	movf	0,w
  5368  0615  00C2               	movwf	??_userInput_getDate+2
  5369  0616  0842               	movf	??_userInput_getDate+2,w
  5370  0617  3A80               	xorlw	128
  5371  0618  00C3               	movwf	??_userInput_getDate+3
  5372  0619  0854               	movf	userInput_getDate@day+1,w
  5373  061A  3A80               	xorlw	128
  5374  061B  0243               	subwf	??_userInput_getDate+3,w
  5375  061C  1D03               	skipz
  5376  061D  2E20               	goto	u3735
  5377  061E  0853               	movf	userInput_getDate@day,w
  5378  061F  0241               	subwf	??_userInput_getDate+1,w
  5379  0620                     u3735:	
  5380  0620  1803               	skipnc
  5381  0621  2E62               	goto	l4563
  5382                           
  5383                           ;userInput.c: 150:                     {;userInput.c: 151:                         day =
      +                           daysInMonth[month-1];
  5384  0622  1283               	bcf	3,5	;RP0=0, select bank0
  5385  0623  1303               	bcf	3,6	;RP1=0, select bank0
  5386  0624  0851               	movf	userInput_getDate@month_669,w
  5387  0625  00C0               	movwf	??_userInput_getDate
  5388  0626  0740               	addwf	??_userInput_getDate,w
  5389  0627  3EB9               	addlw	(low ((_daysInMonth| (0+256)+254)))& (0+255)
  5390  0628  0084               	movwf	4
  5391  0629  1783               	bsf	3,7	;select IRP bank3
  5392  062A  0800               	movf	0,w
  5393  062B  00D3               	movwf	userInput_getDate@day
  5394  062C  0A84               	incf	4,f
  5395  062D  0800               	movf	0,w
  5396  062E  00D4               	movwf	userInput_getDate@day+1
  5397                           
  5398                           ;userInput.c: 152:                         date.day1 = (day / 10) % 10;
  5399  062F  300A               	movlw	10
  5400  0630  00F9               	movwf	___awmod@divisor
  5401  0631  3000               	movlw	0
  5402  0632  00FA               	movwf	___awmod@divisor+1
  5403  0633  300A               	movlw	10
  5404  0634  00F0               	movwf	___awdiv@divisor
  5405  0635  3000               	movlw	0
  5406  0636  00F1               	movwf	___awdiv@divisor+1
  5407  0637  0854               	movf	userInput_getDate@day+1,w
  5408  0638  00F3               	movwf	___awdiv@dividend+1
  5409  0639  0853               	movf	userInput_getDate@day,w
  5410  063A  00F2               	movwf	___awdiv@dividend
  5411  063B  160A  118A  257D  120A  118A  	fcall	___awdiv
  5412  0640  0871               	movf	?___awdiv+1,w
  5413  0641  00FC               	movwf	___awmod@dividend+1
  5414  0642  0870               	movf	?___awdiv,w
  5415  0643  00FB               	movwf	___awmod@dividend
  5416  0644  160A  118A  2488  120A  118A  	fcall	___awmod
  5417  0649  0879               	movf	?___awmod,w
  5418  064A  1283               	bcf	3,5	;RP0=0, select bank0
  5419  064B  1303               	bcf	3,6	;RP1=0, select bank0
  5420  064C  00C0               	movwf	??_userInput_getDate
  5421  064D  0840               	movf	??_userInput_getDate,w
  5422  064E  00B6               	movwf	userInput_getDate@date+6
  5423                           
  5424                           ;userInput.c: 153:                         date.day2 = (day % 10);
  5425  064F  300A               	movlw	10
  5426  0650  00F9               	movwf	___awmod@divisor
  5427  0651  3000               	movlw	0
  5428  0652  00FA               	movwf	___awmod@divisor+1
  5429  0653  0854               	movf	userInput_getDate@day+1,w
  5430  0654  00FC               	movwf	___awmod@dividend+1
  5431  0655  0853               	movf	userInput_getDate@day,w
  5432  0656  00FB               	movwf	___awmod@dividend
  5433  0657  160A  118A  2488  120A  118A  	fcall	___awmod
  5434  065C  0879               	movf	?___awmod,w
  5435  065D  1283               	bcf	3,5	;RP0=0, select bank0
  5436  065E  1303               	bcf	3,6	;RP1=0, select bank0
  5437  065F  00C0               	movwf	??_userInput_getDate
  5438  0660  0840               	movf	??_userInput_getDate,w
  5439  0661  00B7               	movwf	userInput_getDate@date+7
  5440  0662                     l4563:	
  5441                           
  5442                           ;userInput.c: 155:                     userInput_displayDate(date);
  5443  0662  3020               	movlw	userInput_displayDate@date& (0+255)
  5444  0663  0084               	movwf	4
  5445  0664  3030               	movlw	low userInput_getDate@date
  5446  0665  1283               	bcf	3,5	;RP0=0, select bank0
  5447  0666  1303               	bcf	3,6	;RP1=0, select bank0
  5448  0667  00C0               	movwf	??_userInput_getDate
  5449  0668  0804               	movf	4,w
  5450  0669  00C1               	movwf	??_userInput_getDate+1
  5451  066A  3010               	movlw	16
  5452  066B  00C2               	movwf	??_userInput_getDate+2
  5453  066C                     u3740:	
  5454  066C  0840               	movf	??_userInput_getDate,w
  5455  066D  0084               	movwf	4
  5456  066E  1383               	bcf	3,7	;select IRP bank0
  5457  066F  0800               	movf	0,w
  5458  0670  00C3               	movwf	??_userInput_getDate+3
  5459  0671  0AC0               	incf	??_userInput_getDate,f
  5460  0672  0841               	movf	??_userInput_getDate+1,w
  5461  0673  0084               	movwf	4
  5462  0674  0843               	movf	??_userInput_getDate+3,w
  5463  0675  0080               	movwf	0
  5464  0676  0AC1               	incf	??_userInput_getDate+1,f
  5465  0677  0BC2               	decfsz	??_userInput_getDate+2,f
  5466  0678  2E6C               	goto	u3740
  5467  0679  160A  118A  24D5  120A  118A  	fcall	_userInput_displayDate
  5468                           
  5469                           ;userInput.c: 156:                     increment = 0;
  5470  067E  1283               	bcf	3,5	;RP0=0, select bank0
  5471  067F  1303               	bcf	3,6	;RP1=0, select bank0
  5472  0680  01CC               	clrf	userInput_getDate@increment
  5473  0681                     l4567:	
  5474                           
  5475                           ;userInput.c: 158:                 if (decrement == 1)
  5476  0681  034D               	decf	userInput_getDate@decrement,w
  5477  0682  1D03               	btfss	3,2
  5478  0683  2C0C               	goto	l4449
  5479                           
  5480                           ;userInput.c: 159:                 {;userInput.c: 161:                     if (month == 
      +                          1) month = 12;
  5481  0684  0351               	decf	userInput_getDate@month_669,w
  5482  0685  0452               	iorwf	userInput_getDate@month_669+1,w
  5483  0686  1D03               	btfss	3,2
  5484  0687  2E8D               	goto	l4573
  5485  0688  300C               	movlw	12
  5486  0689  00D1               	movwf	userInput_getDate@month_669
  5487  068A  3000               	movlw	0
  5488  068B  00D2               	movwf	userInput_getDate@month_669+1
  5489  068C  2E93               	goto	l4575
  5490  068D                     l4573:	
  5491  068D  30FF               	movlw	255
  5492  068E  07D1               	addwf	userInput_getDate@month_669,f
  5493  068F  1803               	skipnc
  5494  0690  0AD2               	incf	userInput_getDate@month_669+1,f
  5495  0691  30FF               	movlw	255
  5496  0692  07D2               	addwf	userInput_getDate@month_669+1,f
  5497  0693                     l4575:	
  5498                           
  5499                           ;userInput.c: 165:                     date.month1 = (month / 10) % 10;
  5500  0693  300A               	movlw	10
  5501  0694  00F9               	movwf	___awmod@divisor
  5502  0695  3000               	movlw	0
  5503  0696  00FA               	movwf	___awmod@divisor+1
  5504  0697  300A               	movlw	10
  5505  0698  00F0               	movwf	___awdiv@divisor
  5506  0699  3000               	movlw	0
  5507  069A  00F1               	movwf	___awdiv@divisor+1
  5508  069B  0852               	movf	userInput_getDate@month_669+1,w
  5509  069C  00F3               	movwf	___awdiv@dividend+1
  5510  069D  0851               	movf	userInput_getDate@month_669,w
  5511  069E  00F2               	movwf	___awdiv@dividend
  5512  069F  160A  118A  257D  120A  118A  	fcall	___awdiv
  5513  06A4  0871               	movf	?___awdiv+1,w
  5514  06A5  00FC               	movwf	___awmod@dividend+1
  5515  06A6  0870               	movf	?___awdiv,w
  5516  06A7  00FB               	movwf	___awmod@dividend
  5517  06A8  160A  118A  2488  120A  118A  	fcall	___awmod
  5518  06AD  0879               	movf	?___awmod,w
  5519  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  5520  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  5521  06B0  00C0               	movwf	??_userInput_getDate
  5522  06B1  0840               	movf	??_userInput_getDate,w
  5523  06B2  00B8               	movwf	userInput_getDate@date+8
  5524                           
  5525                           ;userInput.c: 166:                     date.month2 = (month % 10);
  5526  06B3  300A               	movlw	10
  5527  06B4  00F9               	movwf	___awmod@divisor
  5528  06B5  3000               	movlw	0
  5529  06B6  00FA               	movwf	___awmod@divisor+1
  5530  06B7  0852               	movf	userInput_getDate@month_669+1,w
  5531  06B8  00FC               	movwf	___awmod@dividend+1
  5532  06B9  0851               	movf	userInput_getDate@month_669,w
  5533  06BA  00FB               	movwf	___awmod@dividend
  5534  06BB  160A  118A  2488  120A  118A  	fcall	___awmod
  5535  06C0  0879               	movf	?___awmod,w
  5536  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  5537  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  5538  06C3  00C0               	movwf	??_userInput_getDate
  5539  06C4  0840               	movf	??_userInput_getDate,w
  5540  06C5  00B9               	movwf	userInput_getDate@date+9
  5541                           
  5542                           ;userInput.c: 169:                     if (day > daysInMonth[month-1] )
  5543  06C6  0851               	movf	userInput_getDate@month_669,w
  5544  06C7  00C0               	movwf	??_userInput_getDate
  5545  06C8  0740               	addwf	??_userInput_getDate,w
  5546  06C9  3EB9               	addlw	(low ((_daysInMonth| (0+256)+254)))& (0+255)
  5547  06CA  0084               	movwf	4
  5548  06CB  1783               	bsf	3,7	;select IRP bank3
  5549  06CC  0800               	movf	0,w
  5550  06CD  00C1               	movwf	??_userInput_getDate+1
  5551  06CE  0A84               	incf	4,f
  5552  06CF  0800               	movf	0,w
  5553  06D0  00C2               	movwf	??_userInput_getDate+2
  5554  06D1  0842               	movf	??_userInput_getDate+2,w
  5555  06D2  3A80               	xorlw	128
  5556  06D3  00C3               	movwf	??_userInput_getDate+3
  5557  06D4  0854               	movf	userInput_getDate@day+1,w
  5558  06D5  3A80               	xorlw	128
  5559  06D6  0243               	subwf	??_userInput_getDate+3,w
  5560  06D7  1D03               	skipz
  5561  06D8  2EDB               	goto	u3775
  5562  06D9  0853               	movf	userInput_getDate@day,w
  5563  06DA  0241               	subwf	??_userInput_getDate+1,w
  5564  06DB                     u3775:	
  5565  06DB  1803               	skipnc
  5566  06DC  2D6C               	goto	l4533
  5567                           
  5568                           ;userInput.c: 170:                     {;userInput.c: 171:                         day =
      +                           daysInMonth[month-1];
  5569  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  5570  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  5571  06DF  0851               	movf	userInput_getDate@month_669,w
  5572  06E0  00C0               	movwf	??_userInput_getDate
  5573  06E1  0740               	addwf	??_userInput_getDate,w
  5574  06E2  3EB9               	addlw	(low ((_daysInMonth| (0+256)+254)))& (0+255)
  5575  06E3  0084               	movwf	4
  5576  06E4  1783               	bsf	3,7	;select IRP bank3
  5577  06E5  0800               	movf	0,w
  5578  06E6  00D3               	movwf	userInput_getDate@day
  5579  06E7  0A84               	incf	4,f
  5580  06E8  0800               	movf	0,w
  5581  06E9  00D4               	movwf	userInput_getDate@day+1
  5582  06EA  2D39               	goto	l4529
  5583  06EB                     l4591:	
  5584                           
  5585                           ;userInput.c: 183:                 LCD_writeCmd(0x85);
  5586  06EB  3085               	movlw	133
  5587  06EC  160A  158A  275E  120A  118A  	fcall	_LCD_writeCmd
  5588                           
  5589                           ;userInput.c: 186:                 int year = ((date.year1)*10) + (date.year2);
  5590  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  5591  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  5592  06F3  083C               	movf	userInput_getDate@date+12,w
  5593  06F4  00C0               	movwf	??_userInput_getDate
  5594  06F5  01C1               	clrf	??_userInput_getDate+1
  5595  06F6  0840               	movf	??_userInput_getDate,w
  5596  06F7  00F0               	movwf	___wmul@multiplier
  5597  06F8  0841               	movf	??_userInput_getDate+1,w
  5598  06F9  00F1               	movwf	___wmul@multiplier+1
  5599  06FA  300A               	movlw	10
  5600  06FB  00F2               	movwf	___wmul@multiplicand
  5601  06FC  3000               	movlw	0
  5602  06FD  00F3               	movwf	___wmul@multiplicand+1
  5603  06FE  160A  158A  279A  120A  118A  	fcall	___wmul
  5604  0703  1283               	bcf	3,5	;RP0=0, select bank0
  5605  0704  1303               	bcf	3,6	;RP1=0, select bank0
  5606  0705  083D               	movf	userInput_getDate@date+13,w
  5607  0706  0770               	addwf	?___wmul,w
  5608  0707  00CF               	movwf	userInput_getDate@year
  5609  0708  3000               	movlw	0
  5610  0709  1803               	skipnc
  5611  070A  3001               	movlw	1
  5612  070B  0771               	addwf	?___wmul+1,w
  5613  070C  00D0               	movwf	userInput_getDate@year+1
  5614                           
  5615                           ;userInput.c: 187:                 if (increment == 1)
  5616  070D  034C               	decf	userInput_getDate@increment,w
  5617  070E  1D03               	btfss	3,2
  5618  070F  2F6E               	goto	l4611
  5619                           
  5620                           ;userInput.c: 188:                 {;userInput.c: 190:                     if (year == 9
      +                          9) year = 0;
  5621  0710  3063               	movlw	99
  5622  0711  064F               	xorwf	userInput_getDate@year,w
  5623  0712  0450               	iorwf	userInput_getDate@year+1,w
  5624  0713  1D03               	btfss	3,2
  5625  0714  2F18               	goto	l4601
  5626  0715  01CF               	clrf	userInput_getDate@year
  5627  0716  01D0               	clrf	userInput_getDate@year+1
  5628  0717  2F1E               	goto	l4603
  5629  0718                     l4601:	
  5630  0718  3001               	movlw	1
  5631  0719  07CF               	addwf	userInput_getDate@year,f
  5632  071A  1803               	skipnc
  5633  071B  0AD0               	incf	userInput_getDate@year+1,f
  5634  071C  3000               	movlw	0
  5635  071D  07D0               	addwf	userInput_getDate@year+1,f
  5636  071E                     l4603:	
  5637                           
  5638                           ;userInput.c: 195:                     date.year1 = (year / 10) % 10;
  5639  071E  300A               	movlw	10
  5640  071F  00F9               	movwf	___awmod@divisor
  5641  0720  3000               	movlw	0
  5642  0721  00FA               	movwf	___awmod@divisor+1
  5643  0722  300A               	movlw	10
  5644  0723  00F0               	movwf	___awdiv@divisor
  5645  0724  3000               	movlw	0
  5646  0725  00F1               	movwf	___awdiv@divisor+1
  5647  0726  0850               	movf	userInput_getDate@year+1,w
  5648  0727  00F3               	movwf	___awdiv@dividend+1
  5649  0728  084F               	movf	userInput_getDate@year,w
  5650  0729  00F2               	movwf	___awdiv@dividend
  5651  072A  160A  118A  257D  120A  118A  	fcall	___awdiv
  5652  072F  0871               	movf	?___awdiv+1,w
  5653  0730  00FC               	movwf	___awmod@dividend+1
  5654  0731  0870               	movf	?___awdiv,w
  5655  0732  00FB               	movwf	___awmod@dividend
  5656  0733  160A  118A  2488  120A  118A  	fcall	___awmod
  5657  0738  0879               	movf	?___awmod,w
  5658  0739  1283               	bcf	3,5	;RP0=0, select bank0
  5659  073A  1303               	bcf	3,6	;RP1=0, select bank0
  5660  073B  00C0               	movwf	??_userInput_getDate
  5661  073C  0840               	movf	??_userInput_getDate,w
  5662  073D  00BC               	movwf	userInput_getDate@date+12
  5663                           
  5664                           ;userInput.c: 196:                     date.year2 = (year % 10);
  5665  073E  300A               	movlw	10
  5666  073F  00F9               	movwf	___awmod@divisor
  5667  0740  3000               	movlw	0
  5668  0741  00FA               	movwf	___awmod@divisor+1
  5669  0742  0850               	movf	userInput_getDate@year+1,w
  5670  0743  00FC               	movwf	___awmod@dividend+1
  5671  0744  084F               	movf	userInput_getDate@year,w
  5672  0745  00FB               	movwf	___awmod@dividend
  5673  0746  160A  118A  2488  120A  118A  	fcall	___awmod
  5674  074B  0879               	movf	?___awmod,w
  5675  074C  1283               	bcf	3,5	;RP0=0, select bank0
  5676  074D  1303               	bcf	3,6	;RP1=0, select bank0
  5677  074E  00C0               	movwf	??_userInput_getDate
  5678  074F  0840               	movf	??_userInput_getDate,w
  5679  0750  00BD               	movwf	userInput_getDate@date+13
  5680                           
  5681                           ;userInput.c: 198:                     userInput_displayDate(date);
  5682  0751  3020               	movlw	userInput_displayDate@date& (0+255)
  5683  0752  0084               	movwf	4
  5684  0753  3030               	movlw	low userInput_getDate@date
  5685  0754  00C0               	movwf	??_userInput_getDate
  5686  0755  0804               	movf	4,w
  5687  0756  00C1               	movwf	??_userInput_getDate+1
  5688  0757  3010               	movlw	16
  5689  0758  00C2               	movwf	??_userInput_getDate+2
  5690  0759                     u3800:	
  5691  0759  0840               	movf	??_userInput_getDate,w
  5692  075A  0084               	movwf	4
  5693  075B  1383               	bcf	3,7	;select IRP bank0
  5694  075C  0800               	movf	0,w
  5695  075D  00C3               	movwf	??_userInput_getDate+3
  5696  075E  0AC0               	incf	??_userInput_getDate,f
  5697  075F  0841               	movf	??_userInput_getDate+1,w
  5698  0760  0084               	movwf	4
  5699  0761  0843               	movf	??_userInput_getDate+3,w
  5700  0762  0080               	movwf	0
  5701  0763  0AC1               	incf	??_userInput_getDate+1,f
  5702  0764  0BC2               	decfsz	??_userInput_getDate+2,f
  5703  0765  2F59               	goto	u3800
  5704  0766  160A  118A  24D5  120A  118A  	fcall	_userInput_displayDate
  5705                           
  5706                           ;userInput.c: 199:                     increment = 0;
  5707  076B  1283               	bcf	3,5	;RP0=0, select bank0
  5708  076C  1303               	bcf	3,6	;RP1=0, select bank0
  5709  076D  01CC               	clrf	userInput_getDate@increment
  5710  076E                     l4611:	
  5711                           
  5712                           ;userInput.c: 201:                 if (decrement == 1)
  5713  076E  034D               	decf	userInput_getDate@decrement,w
  5714  076F  1D03               	btfss	3,2
  5715  0770  2C0C               	goto	l4449
  5716                           
  5717                           ;userInput.c: 202:                 {;userInput.c: 204:                     if (year == 0
      +                          ) year = 99;
  5718  0771  084F               	movf	userInput_getDate@year,w
  5719  0772  0450               	iorwf	userInput_getDate@year+1,w
  5720  0773  1D03               	btfss	3,2
  5721  0774  2F7A               	goto	l4617
  5722  0775  3063               	movlw	99
  5723  0776  00CF               	movwf	userInput_getDate@year
  5724  0777  3000               	movlw	0
  5725  0778  00D0               	movwf	userInput_getDate@year+1
  5726  0779  2F80               	goto	l4619
  5727  077A                     l4617:	
  5728  077A  30FF               	movlw	255
  5729  077B  07CF               	addwf	userInput_getDate@year,f
  5730  077C  1803               	skipnc
  5731  077D  0AD0               	incf	userInput_getDate@year+1,f
  5732  077E  30FF               	movlw	255
  5733  077F  07D0               	addwf	userInput_getDate@year+1,f
  5734  0780                     l4619:	
  5735                           
  5736                           ;userInput.c: 208:                     date.year1 = (year / 10) % 10;
  5737  0780  300A               	movlw	10
  5738  0781  00F9               	movwf	___awmod@divisor
  5739  0782  3000               	movlw	0
  5740  0783  00FA               	movwf	___awmod@divisor+1
  5741  0784  300A               	movlw	10
  5742  0785  00F0               	movwf	___awdiv@divisor
  5743  0786  3000               	movlw	0
  5744  0787  00F1               	movwf	___awdiv@divisor+1
  5745  0788  0850               	movf	userInput_getDate@year+1,w
  5746  0789  00F3               	movwf	___awdiv@dividend+1
  5747  078A  084F               	movf	userInput_getDate@year,w
  5748  078B  00F2               	movwf	___awdiv@dividend
  5749  078C  160A  118A  257D  120A  118A  	fcall	___awdiv
  5750  0791  0871               	movf	?___awdiv+1,w
  5751  0792  00FC               	movwf	___awmod@dividend+1
  5752  0793  0870               	movf	?___awdiv,w
  5753  0794  00FB               	movwf	___awmod@dividend
  5754  0795  160A  118A  2488  120A  118A  	fcall	___awmod
  5755  079A  0879               	movf	?___awmod,w
  5756  079B  1283               	bcf	3,5	;RP0=0, select bank0
  5757  079C  1303               	bcf	3,6	;RP1=0, select bank0
  5758  079D  00C0               	movwf	??_userInput_getDate
  5759  079E  0840               	movf	??_userInput_getDate,w
  5760  079F  00BC               	movwf	userInput_getDate@date+12
  5761                           
  5762                           ;userInput.c: 209:                     date.year2 = (year % 10);
  5763  07A0  300A               	movlw	10
  5764  07A1  00F9               	movwf	___awmod@divisor
  5765  07A2  3000               	movlw	0
  5766  07A3  00FA               	movwf	___awmod@divisor+1
  5767  07A4  0850               	movf	userInput_getDate@year+1,w
  5768  07A5  00FC               	movwf	___awmod@dividend+1
  5769  07A6  084F               	movf	userInput_getDate@year,w
  5770  07A7  00FB               	movwf	___awmod@dividend
  5771  07A8  160A  118A  2488  120A  118A  	fcall	___awmod
  5772  07AD  0879               	movf	?___awmod,w
  5773  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  5774  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  5775  07B0  00C0               	movwf	??_userInput_getDate
  5776  07B1  0840               	movf	??_userInput_getDate,w
  5777  07B2  00BD               	movwf	userInput_getDate@date+13
  5778  07B3  2D6C               	goto	l4533
  5779  07B4                     l4629:	
  5780                           
  5781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5782                           ; Switch size 1, requested type "simple"
  5783                           ; Number of cases is 1, Range of values is 0 to 0
  5784                           ; switch strategies available:
  5785                           ; Name         Instructions Cycles
  5786                           ; simple_byte            4     3 (average)
  5787                           ; direct_byte           11     8 (fixed)
  5788                           ; jumptable            260     6 (fixed)
  5789                           ;	Chosen strategy is simple_byte
  5790  07B4  084B               	movf	userInput_getDate@dateAddressCounter+1,w
  5791  07B5  3A00               	xorlw	0	; case 0
  5792  07B6  1903               	skipnz
  5793  07B7  2FB9               	goto	l5075
  5794  07B8  2C0C               	goto	l4449
  5795  07B9                     l5075:	
  5796                           
  5797                           ; Switch size 1, requested type "simple"
  5798                           ; Number of cases is 3, Range of values is 0 to 2
  5799                           ; switch strategies available:
  5800                           ; Name         Instructions Cycles
  5801                           ; simple_byte           10     6 (average)
  5802                           ; direct_byte           17     8 (fixed)
  5803                           ; jumptable            260     6 (fixed)
  5804                           ;	Chosen strategy is simple_byte
  5805  07B9  084A               	movf	userInput_getDate@dateAddressCounter,w
  5806  07BA  3A00               	xorlw	0	; case 0
  5807  07BB  1903               	skipnz
  5808  07BC  2C96               	goto	l4501
  5809  07BD  3A01               	xorlw	1	; case 1
  5810  07BE  1903               	skipnz
  5811  07BF  2D89               	goto	l4537
  5812  07C0  3A03               	xorlw	3	; case 2
  5813  07C1  1903               	skipnz
  5814  07C2  2EEB               	goto	l4591
  5815  07C3  2C0C               	goto	l4449
  5816  07C4  2C0C               	goto	l4449
  5817  07C5                     __end_of_userInput_getDate:	
  5818                           
  5819                           	psect	text6
  5820  14D5                     __ptext6:	
  5821 ;; *************** function _userInput_displayDate *****************
  5822 ;; Defined at:
  5823 ;;		line 602 in file "userInput.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  date           16    0[BANK0 ] struct Time
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;		None
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      void 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5837 ;;      Params:         0      16       0       0       0
  5838 ;;      Locals:         0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0
  5840 ;;      Totals:         0      16       0       0       0
  5841 ;;Total ram usage:       16 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    3
  5844 ;; This function calls:
  5845 ;;		_LCD_clear
  5846 ;;		_LCD_init
  5847 ;;		_LCD_writeChar
  5848 ;;		_LCD_writeCmd
  5849 ;; This function is called by:
  5850 ;;		_userInput_getDate
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           
  5855                           ;psect for function _userInput_displayDate
  5856  14D5                     _userInput_displayDate:	
  5857                           
  5858                           ;userInput.c: 603:     LCD_init();
  5859                           
  5860                           ;incstack = 0
  5861                           ; Regs used in _userInput_displayDate: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5862  14D5  160A  158A  2748  160A  118A  	fcall	_LCD_init
  5863                           
  5864                           ;userInput.c: 604:     LCD_clear();
  5865  14DA  160A  158A  2675  160A  118A  	fcall	_LCD_clear
  5866                           
  5867                           ;userInput.c: 605:     LCD_writeCmd(0x82);
  5868  14DF  3082               	movlw	130
  5869  14E0  160A  158A  275E  160A  118A  	fcall	_LCD_writeCmd
  5870                           
  5871                           ;userInput.c: 606:     LCD_writeChar(date.day1 + 48);
  5872  14E5  1283               	bcf	3,5	;RP0=0, select bank0
  5873  14E6  1303               	bcf	3,6	;RP1=0, select bank0
  5874  14E7  0826               	movf	userInput_displayDate@date+6,w
  5875  14E8  3E30               	addlw	48
  5876  14E9  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  5877                           
  5878                           ;userInput.c: 607:     LCD_writeChar(date.day2 + 48);
  5879  14EE  1283               	bcf	3,5	;RP0=0, select bank0
  5880  14EF  1303               	bcf	3,6	;RP1=0, select bank0
  5881  14F0  0827               	movf	userInput_displayDate@date+7,w
  5882  14F1  3E30               	addlw	48
  5883  14F2  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  5884                           
  5885                           ;userInput.c: 608:     LCD_writeChar('/');
  5886  14F7  302F               	movlw	47
  5887  14F8  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  5888                           
  5889                           ;userInput.c: 609:     LCD_writeChar(date.month1 + '0');
  5890  14FD  1283               	bcf	3,5	;RP0=0, select bank0
  5891  14FE  1303               	bcf	3,6	;RP1=0, select bank0
  5892  14FF  0828               	movf	userInput_displayDate@date+8,w
  5893  1500  3E30               	addlw	48
  5894  1501  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  5895                           
  5896                           ;userInput.c: 610:     LCD_writeChar(date.month2 + '0');
  5897  1506  1283               	bcf	3,5	;RP0=0, select bank0
  5898  1507  1303               	bcf	3,6	;RP1=0, select bank0
  5899  1508  0829               	movf	userInput_displayDate@date+9,w
  5900  1509  3E30               	addlw	48
  5901  150A  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  5902                           
  5903                           ;userInput.c: 611:     LCD_writeChar('/');
  5904  150F  302F               	movlw	47
  5905  1510  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  5906                           
  5907                           ;userInput.c: 612:     LCD_writeChar(date.year1 + '0');
  5908  1515  1283               	bcf	3,5	;RP0=0, select bank0
  5909  1516  1303               	bcf	3,6	;RP1=0, select bank0
  5910  1517  082C               	movf	userInput_displayDate@date+12,w
  5911  1518  3E30               	addlw	48
  5912  1519  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  5913                           
  5914                           ;userInput.c: 613:     LCD_writeChar(date.year2 + '0');
  5915  151E  1283               	bcf	3,5	;RP0=0, select bank0
  5916  151F  1303               	bcf	3,6	;RP1=0, select bank0
  5917  1520  082D               	movf	userInput_displayDate@date+13,w
  5918  1521  3E30               	addlw	48
  5919  1522  160A  158A  277C   	fcall	_LCD_writeChar
  5920  1525  0008               	return
  5921  1526                     __end_of_userInput_displayDate:	
  5922                           
  5923                           	psect	text7
  5924  080E                     __ptext7:	
  5925 ;; *************** function _therm_getTemp *****************
  5926 ;; Defined at:
  5927 ;;		line 156 in file "Thermometer.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  t               5   21[BANK0 ] struct Temp
  5932 ;;  mergeTemp       2   19[BANK0 ] int 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  5    6[BANK0 ] struct Temp
  5935 ;; Registers used:
  5936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5942 ;;      Params:         0       5       0       0       0
  5943 ;;      Locals:         0       7       0       0       0
  5944 ;;      Temps:          0       8       0       0       0
  5945 ;;      Totals:         0      20       0       0       0
  5946 ;;Total ram usage:       20 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    3
  5949 ;; This function calls:
  5950 ;;		___wmul
  5951 ;;		_therm_get_temp
  5952 ;;		_therm_init
  5953 ;; This function is called by:
  5954 ;;		_main
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           
  5959                           ;psect for function _therm_getTemp
  5960  080E                     _therm_getTemp:	
  5961                           
  5962                           ;Thermometer.c: 158:     therm_init();
  5963                           
  5964                           ;incstack = 0
  5965                           ; Regs used in _therm_getTemp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5966  080E  160A  158A  2684  120A  158A  	fcall	_therm_init
  5967                           
  5968                           ;Thermometer.c: 159:     therm_get_temp();
  5969  0813  120A  158A  2179  120A  158A  	fcall	_therm_get_temp
  5970                           
  5971                           ;Thermometer.c: 162:     int mergeTemp = (tenth*100) + (first*10) + dp;
  5972  0818  1683               	bsf	3,5	;RP0=1, select bank1
  5973  0819  1303               	bcf	3,6	;RP1=0, select bank1
  5974  081A  0860               	movf	_tenth^(0+128),w
  5975  081B  1283               	bcf	3,5	;RP0=0, select bank0
  5976  081C  1303               	bcf	3,6	;RP1=0, select bank0
  5977  081D  00AB               	movwf	??_therm_getTemp
  5978  081E  01AC               	clrf	??_therm_getTemp+1
  5979  081F  082B               	movf	??_therm_getTemp,w
  5980  0820  00F0               	movwf	___wmul@multiplier
  5981  0821  082C               	movf	??_therm_getTemp+1,w
  5982  0822  00F1               	movwf	___wmul@multiplier+1
  5983  0823  3064               	movlw	100
  5984  0824  00F2               	movwf	___wmul@multiplicand
  5985  0825  3000               	movlw	0
  5986  0826  00F3               	movwf	___wmul@multiplicand+1
  5987  0827  160A  158A  279A  120A  158A  	fcall	___wmul
  5988  082C  0870               	movf	?___wmul,w
  5989  082D  1283               	bcf	3,5	;RP0=0, select bank0
  5990  082E  1303               	bcf	3,6	;RP1=0, select bank0
  5991  082F  00AD               	movwf	??_therm_getTemp+2
  5992  0830  0871               	movf	?___wmul+1,w
  5993  0831  00AE               	movwf	??_therm_getTemp+3
  5994  0832  1683               	bsf	3,5	;RP0=1, select bank1
  5995  0833  1303               	bcf	3,6	;RP1=0, select bank1
  5996  0834  085F               	movf	_first^(0+128),w
  5997  0835  1283               	bcf	3,5	;RP0=0, select bank0
  5998  0836  1303               	bcf	3,6	;RP1=0, select bank0
  5999  0837  00AF               	movwf	??_therm_getTemp+4
  6000  0838  01B0               	clrf	??_therm_getTemp+5
  6001  0839  082F               	movf	??_therm_getTemp+4,w
  6002  083A  00F0               	movwf	___wmul@multiplier
  6003  083B  0830               	movf	??_therm_getTemp+5,w
  6004  083C  00F1               	movwf	___wmul@multiplier+1
  6005  083D  300A               	movlw	10
  6006  083E  00F2               	movwf	___wmul@multiplicand
  6007  083F  3000               	movlw	0
  6008  0840  00F3               	movwf	___wmul@multiplicand+1
  6009  0841  160A  158A  279A  120A  158A  	fcall	___wmul
  6010  0846  0870               	movf	?___wmul,w
  6011  0847  1283               	bcf	3,5	;RP0=0, select bank0
  6012  0848  1303               	bcf	3,6	;RP1=0, select bank0
  6013  0849  072D               	addwf	??_therm_getTemp+2,w
  6014  084A  00B1               	movwf	??_therm_getTemp+6
  6015  084B  0871               	movf	?___wmul+1,w
  6016  084C  1803               	skipnc
  6017  084D  0A71               	incf	?___wmul+1,w
  6018  084E  072E               	addwf	??_therm_getTemp+3,w
  6019  084F  00B2               	movwf	??_therm_getTemp+7
  6020  0850  1683               	bsf	3,5	;RP0=1, select bank1
  6021  0851  1303               	bcf	3,6	;RP1=0, select bank1
  6022  0852  085E               	movf	_dp^(0+128),w
  6023  0853  1283               	bcf	3,5	;RP0=0, select bank0
  6024  0854  1303               	bcf	3,6	;RP1=0, select bank0
  6025  0855  0731               	addwf	??_therm_getTemp+6,w
  6026  0856  00B3               	movwf	therm_getTemp@mergeTemp
  6027  0857  3000               	movlw	0
  6028  0858  1803               	skipnc
  6029  0859  3001               	movlw	1
  6030  085A  0732               	addwf	??_therm_getTemp+7,w
  6031  085B  00B4               	movwf	therm_getTemp@mergeTemp+1
  6032                           
  6033                           ;Thermometer.c: 164:     struct Temp t = { tenth, first, dp , mergeTemp};
  6034  085C  3035               	movlw	therm_getTemp@t& (0+255)
  6035  085D  0084               	movwf	4
  6036  085E  1683               	bsf	3,5	;RP0=1, select bank1
  6037  085F  1303               	bcf	3,6	;RP1=0, select bank1
  6038  0860  0853               	movf	therm_getTemp@F960^(0+128),w
  6039  0861  1383               	bcf	3,7	;select IRP bank0
  6040  0862  0080               	movwf	0
  6041  0863  0A84               	incf	4,f
  6042  0864  0854               	movf	(therm_getTemp@F960^(0+128)+1),w
  6043  0865  0080               	movwf	0
  6044  0866  0A84               	incf	4,f
  6045  0867  0855               	movf	(therm_getTemp@F960^(0+128)+2),w
  6046  0868  0080               	movwf	0
  6047  0869  0A84               	incf	4,f
  6048  086A  0856               	movf	(therm_getTemp@F960^(0+128)+3),w
  6049  086B  0080               	movwf	0
  6050  086C  0A84               	incf	4,f
  6051  086D  0857               	movf	(therm_getTemp@F960^(0+128)+4),w
  6052  086E  0080               	movwf	0
  6053  086F  0860               	movf	_tenth^(0+128),w
  6054  0870  1283               	bcf	3,5	;RP0=0, select bank0
  6055  0871  1303               	bcf	3,6	;RP1=0, select bank0
  6056  0872  00AB               	movwf	??_therm_getTemp
  6057  0873  082B               	movf	??_therm_getTemp,w
  6058  0874  00B5               	movwf	therm_getTemp@t
  6059  0875  1683               	bsf	3,5	;RP0=1, select bank1
  6060  0876  1303               	bcf	3,6	;RP1=0, select bank1
  6061  0877  085F               	movf	_first^(0+128),w
  6062  0878  1283               	bcf	3,5	;RP0=0, select bank0
  6063  0879  1303               	bcf	3,6	;RP1=0, select bank0
  6064  087A  00AB               	movwf	??_therm_getTemp
  6065  087B  082B               	movf	??_therm_getTemp,w
  6066  087C  00B6               	movwf	therm_getTemp@t+1
  6067  087D  1683               	bsf	3,5	;RP0=1, select bank1
  6068  087E  1303               	bcf	3,6	;RP1=0, select bank1
  6069  087F  085E               	movf	_dp^(0+128),w
  6070  0880  1283               	bcf	3,5	;RP0=0, select bank0
  6071  0881  1303               	bcf	3,6	;RP1=0, select bank0
  6072  0882  00AB               	movwf	??_therm_getTemp
  6073  0883  082B               	movf	??_therm_getTemp,w
  6074  0884  00B7               	movwf	therm_getTemp@t+2
  6075  0885  0834               	movf	therm_getTemp@mergeTemp+1,w
  6076  0886  00B9               	movwf	therm_getTemp@t+4
  6077  0887  0833               	movf	therm_getTemp@mergeTemp,w
  6078  0888  00B8               	movwf	therm_getTemp@t+3
  6079                           
  6080                           ;Thermometer.c: 165:     return t;
  6081  0889  3026               	movlw	?_therm_getTemp& (0+255)
  6082  088A  0084               	movwf	4
  6083  088B  0835               	movf	therm_getTemp@t,w
  6084  088C  0080               	movwf	0
  6085  088D  0A84               	incf	4,f
  6086  088E  0836               	movf	therm_getTemp@t+1,w
  6087  088F  0080               	movwf	0
  6088  0890  0A84               	incf	4,f
  6089  0891  0837               	movf	therm_getTemp@t+2,w
  6090  0892  0080               	movwf	0
  6091  0893  0A84               	incf	4,f
  6092  0894  0838               	movf	therm_getTemp@t+3,w
  6093  0895  0080               	movwf	0
  6094  0896  0A84               	incf	4,f
  6095  0897  0839               	movf	therm_getTemp@t+4,w
  6096  0898  0080               	movwf	0
  6097  0899  0008               	return
  6098  089A                     __end_of_therm_getTemp:	
  6099                           
  6100                           	psect	text8
  6101  1E84                     __ptext8:	
  6102 ;; *************** function _therm_init *****************
  6103 ;; Defined at:
  6104 ;;		line 46 in file "Thermometer.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;		None
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;		None
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  1    wreg      void 
  6111 ;; Registers used:
  6112 ;;		wreg, status,2
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6118 ;;      Params:         0       0       0       0       0
  6119 ;;      Locals:         0       0       0       0       0
  6120 ;;      Temps:          0       0       0       0       0
  6121 ;;      Totals:         0       0       0       0       0
  6122 ;;Total ram usage:        0 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; This function calls:
  6125 ;;		Nothing
  6126 ;; This function is called by:
  6127 ;;		_therm_getTemp
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           
  6132                           ;psect for function _therm_init
  6133  1E84                     _therm_init:	
  6134                           
  6135                           ;Thermometer.c: 48:   ADCON1=0X07;
  6136                           
  6137                           ;incstack = 0
  6138                           ; Regs used in _therm_init: [wreg+status,2]
  6139  1E84  3007               	movlw	7
  6140  1E85  1683               	bsf	3,5	;RP0=1, select bank1
  6141  1E86  1303               	bcf	3,6	;RP1=0, select bank1
  6142  1E87  009F               	movwf	31	;volatile
  6143                           
  6144                           ;Thermometer.c: 49:   TRISA=0X00;
  6145  1E88  0185               	clrf	5	;volatile
  6146                           
  6147                           ;Thermometer.c: 50:   TRISD=0X00;
  6148  1E89  0188               	clrf	8	;volatile
  6149  1E8A  0008               	return
  6150  1E8B                     __end_of_therm_init:	
  6151                           
  6152                           	psect	text9
  6153  0979                     __ptext9:	
  6154 ;; *************** function _therm_get_temp *****************
  6155 ;; Defined at:
  6156 ;;		line 126 in file "Thermometer.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  i               2    0        int 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		wreg, status,2, status,0, pclath, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6170 ;;      Params:         0       0       0       0       0
  6171 ;;      Locals:         0       0       0       0       0
  6172 ;;      Temps:          0       4       0       0       0
  6173 ;;      Totals:         0       4       0       0       0
  6174 ;;Total ram usage:        4 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    2
  6177 ;; This function calls:
  6178 ;;		___awdiv
  6179 ;;		___awmod
  6180 ;;		___lwdiv
  6181 ;;		_therm_read_byte
  6182 ;;		_therm_reset
  6183 ;;		_therm_write_byte
  6184 ;; This function is called by:
  6185 ;;		_therm_getTemp
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function _therm_get_temp
  6191  0979                     _therm_get_temp:	
  6192                           
  6193                           ;Thermometer.c: 128: int i;;Thermometer.c: 129: TRISA0 =1;
  6194                           
  6195                           ;incstack = 0
  6196                           ; Regs used in _therm_get_temp: [wreg+status,2+status,0+pclath+cstack]
  6197  0979  1683               	bsf	3,5	;RP0=1, select bank1
  6198  097A  1303               	bcf	3,6	;RP1=0, select bank1
  6199  097B  1405               	bsf	5,0	;volatile
  6200                           
  6201                           ;Thermometer.c: 130: therm_reset();
  6202  097C  160A  118A  226F  120A  158A  	fcall	_therm_reset
  6203                           
  6204                           ;Thermometer.c: 131: therm_write_byte(0XCC);
  6205  0981  30CC               	movlw	204
  6206  0982  160A  118A  22DB  120A  158A  	fcall	_therm_write_byte
  6207                           
  6208                           ;Thermometer.c: 132: therm_write_byte(0X44);
  6209  0987  3044               	movlw	68
  6210  0988  160A  118A  22DB  120A  158A  	fcall	_therm_write_byte
  6211                           
  6212                           ;Thermometer.c: 134: therm_reset();
  6213  098D  160A  118A  226F  120A  158A  	fcall	_therm_reset
  6214                           
  6215                           ;Thermometer.c: 135: therm_write_byte(0XCC);
  6216  0992  30CC               	movlw	204
  6217  0993  160A  118A  22DB  120A  158A  	fcall	_therm_write_byte
  6218                           
  6219                           ;Thermometer.c: 136: therm_write_byte(0XBE);
  6220  0998  30BE               	movlw	190
  6221  0999  160A  118A  22DB  120A  158A  	fcall	_therm_write_byte
  6222                           
  6223                           ;Thermometer.c: 137: TLV=therm_read_byte();
  6224  099E  160A  118A  2312  120A  158A  	fcall	_therm_read_byte
  6225  09A3  1283               	bcf	3,5	;RP0=0, select bank0
  6226  09A4  1303               	bcf	3,6	;RP1=0, select bank0
  6227  09A5  00A2               	movwf	??_therm_get_temp
  6228  09A6  0822               	movf	??_therm_get_temp,w
  6229  09A7  1683               	bsf	3,5	;RP0=1, select bank1
  6230  09A8  1303               	bcf	3,6	;RP1=0, select bank1
  6231  09A9  00E4               	movwf	_TLV^(0+128)
  6232                           
  6233                           ;Thermometer.c: 138: THV=therm_read_byte();
  6234  09AA  160A  118A  2312  120A  158A  	fcall	_therm_read_byte
  6235  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  6236  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  6237  09B1  00A2               	movwf	??_therm_get_temp
  6238  09B2  0822               	movf	??_therm_get_temp,w
  6239  09B3  1683               	bsf	3,5	;RP0=1, select bank1
  6240  09B4  1303               	bcf	3,6	;RP1=0, select bank1
  6241  09B5  00E3               	movwf	_THV^(0+128)
  6242                           
  6243                           ;Thermometer.c: 139: TRISA0 =1;
  6244  09B6  1405               	bsf	5,0	;volatile
  6245                           
  6246                           ;Thermometer.c: 140: TZ=(TLV>>4)|(THV<<4)&0X3f;
  6247  09B7  0863               	movf	_THV^(0+128),w
  6248  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  6249  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  6250  09BA  00A2               	movwf	??_therm_get_temp
  6251  09BB  3004               	movlw	4
  6252  09BC                     u2705:	
  6253  09BC  1003               	clrc
  6254  09BD  0DA2               	rlf	??_therm_get_temp,f
  6255  09BE  3EFF               	addlw	-1
  6256  09BF  1D03               	skipz
  6257  09C0  29BC               	goto	u2705
  6258  09C1  303F               	movlw	63
  6259  09C2  0522               	andwf	??_therm_get_temp,w
  6260  09C3  00A3               	movwf	??_therm_get_temp+1
  6261  09C4  1683               	bsf	3,5	;RP0=1, select bank1
  6262  09C5  1303               	bcf	3,6	;RP1=0, select bank1
  6263  09C6  0864               	movf	_TLV^(0+128),w
  6264  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  6265  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  6266  09C9  00A4               	movwf	??_therm_get_temp+2
  6267  09CA  3004               	movlw	4
  6268  09CB                     u2715:	
  6269  09CB  1003               	clrc
  6270  09CC  0CA4               	rrf	??_therm_get_temp+2,f
  6271  09CD  3EFF               	addlw	-1
  6272  09CE  1D03               	skipz
  6273  09CF  29CB               	goto	u2715
  6274  09D0  0824               	movf	??_therm_get_temp+2,w
  6275  09D1  0423               	iorwf	??_therm_get_temp+1,w
  6276  09D2  00A5               	movwf	??_therm_get_temp+3
  6277  09D3  0825               	movf	??_therm_get_temp+3,w
  6278  09D4  1683               	bsf	3,5	;RP0=1, select bank1
  6279  09D5  1303               	bcf	3,6	;RP1=0, select bank1
  6280  09D6  00E2               	movwf	_TZ^(0+128)
  6281                           
  6282                           ;Thermometer.c: 141: TX=TLV<<4;
  6283  09D7  0864               	movf	_TLV^(0+128),w
  6284  09D8  1283               	bcf	3,5	;RP0=0, select bank0
  6285  09D9  1303               	bcf	3,6	;RP1=0, select bank0
  6286  09DA  00A2               	movwf	??_therm_get_temp
  6287  09DB  3003               	movlw	3
  6288  09DC                     u2725:	
  6289  09DC  1003               	clrc
  6290  09DD  0DA2               	rlf	??_therm_get_temp,f
  6291  09DE  3EFF               	addlw	-1
  6292  09DF  1D03               	skipz
  6293  09E0  29DC               	goto	u2725
  6294  09E1  1003               	clrc
  6295  09E2  0D22               	rlf	??_therm_get_temp,w
  6296  09E3  00A3               	movwf	??_therm_get_temp+1
  6297  09E4  0823               	movf	??_therm_get_temp+1,w
  6298  09E5  1683               	bsf	3,5	;RP0=1, select bank1
  6299  09E6  1303               	bcf	3,6	;RP1=0, select bank1
  6300  09E7  00E1               	movwf	_TX^(0+128)
  6301                           
  6302                           ;Thermometer.c: 143: first=TZ%10;
  6303  09E8  300A               	movlw	10
  6304  09E9  00F9               	movwf	___awmod@divisor
  6305  09EA  3000               	movlw	0
  6306  09EB  00FA               	movwf	___awmod@divisor+1
  6307  09EC  0862               	movf	_TZ^(0+128),w
  6308  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  6309  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  6310  09EF  00A2               	movwf	??_therm_get_temp
  6311  09F0  01A3               	clrf	??_therm_get_temp+1
  6312  09F1  0822               	movf	??_therm_get_temp,w
  6313  09F2  00FB               	movwf	___awmod@dividend
  6314  09F3  0823               	movf	??_therm_get_temp+1,w
  6315  09F4  00FC               	movwf	___awmod@dividend+1
  6316  09F5  160A  118A  2488  120A  158A  	fcall	___awmod
  6317  09FA  0879               	movf	?___awmod,w
  6318  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  6319  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  6320  09FD  00A4               	movwf	??_therm_get_temp+2
  6321  09FE  0824               	movf	??_therm_get_temp+2,w
  6322  09FF  1683               	bsf	3,5	;RP0=1, select bank1
  6323  0A00  1303               	bcf	3,6	;RP1=0, select bank1
  6324  0A01  00DF               	movwf	_first^(0+128)
  6325                           
  6326                           ;Thermometer.c: 144: tenth=TZ/10;
  6327  0A02  300A               	movlw	10
  6328  0A03  00F0               	movwf	___awdiv@divisor
  6329  0A04  3000               	movlw	0
  6330  0A05  00F1               	movwf	___awdiv@divisor+1
  6331  0A06  0862               	movf	_TZ^(0+128),w
  6332  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  6333  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  6334  0A09  00A2               	movwf	??_therm_get_temp
  6335  0A0A  01A3               	clrf	??_therm_get_temp+1
  6336  0A0B  0822               	movf	??_therm_get_temp,w
  6337  0A0C  00F2               	movwf	___awdiv@dividend
  6338  0A0D  0823               	movf	??_therm_get_temp+1,w
  6339  0A0E  00F3               	movwf	___awdiv@dividend+1
  6340  0A0F  160A  118A  257D  120A  158A  	fcall	___awdiv
  6341  0A14  0870               	movf	?___awdiv,w
  6342  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  6343  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  6344  0A17  00A4               	movwf	??_therm_get_temp+2
  6345  0A18  0824               	movf	??_therm_get_temp+2,w
  6346  0A19  1683               	bsf	3,5	;RP0=1, select bank1
  6347  0A1A  1303               	bcf	3,6	;RP1=0, select bank1
  6348  0A1B  00E0               	movwf	_tenth^(0+128)
  6349                           
  6350                           ;Thermometer.c: 145: wd=0;
  6351  0A1C  01DC               	clrf	_wd^(0+128)
  6352  0A1D  01DD               	clrf	(_wd+1)^(0+128)
  6353                           
  6354                           ;Thermometer.c: 146: if (TX & 0x80) wd=wd+5000;
  6355  0A1E  1FE1               	btfss	_TX^(0+128),7
  6356  0A1F  2A28               	goto	l3765
  6357  0A20  085C               	movf	_wd^(0+128),w
  6358  0A21  3E88               	addlw	136
  6359  0A22  00DC               	movwf	_wd^(0+128)
  6360  0A23  085D               	movf	(_wd+1)^(0+128),w
  6361  0A24  1803               	skipnc
  6362  0A25  3E01               	addlw	1
  6363  0A26  3E13               	addlw	19
  6364  0A27  00DD               	movwf	(_wd+1)^(0+128)
  6365  0A28                     l3765:	
  6366                           
  6367                           ;Thermometer.c: 147: if (TX & 0x40) wd=wd+2500;
  6368  0A28  1F61               	btfss	_TX^(0+128),6
  6369  0A29  2A32               	goto	l3769
  6370  0A2A  085C               	movf	_wd^(0+128),w
  6371  0A2B  3EC4               	addlw	196
  6372  0A2C  00DC               	movwf	_wd^(0+128)
  6373  0A2D  085D               	movf	(_wd+1)^(0+128),w
  6374  0A2E  1803               	skipnc
  6375  0A2F  3E01               	addlw	1
  6376  0A30  3E09               	addlw	9
  6377  0A31  00DD               	movwf	(_wd+1)^(0+128)
  6378  0A32                     l3769:	
  6379                           
  6380                           ;Thermometer.c: 148: if (TX & 0x20) wd=wd+1250;
  6381  0A32  1EE1               	btfss	_TX^(0+128),5
  6382  0A33  2A3C               	goto	l3773
  6383  0A34  085C               	movf	_wd^(0+128),w
  6384  0A35  3EE2               	addlw	226
  6385  0A36  00DC               	movwf	_wd^(0+128)
  6386  0A37  085D               	movf	(_wd+1)^(0+128),w
  6387  0A38  1803               	skipnc
  6388  0A39  3E01               	addlw	1
  6389  0A3A  3E04               	addlw	4
  6390  0A3B  00DD               	movwf	(_wd+1)^(0+128)
  6391  0A3C                     l3773:	
  6392                           
  6393                           ;Thermometer.c: 149: if (TX & 0x10) wd=wd+625;
  6394  0A3C  1E61               	btfss	_TX^(0+128),4
  6395  0A3D  2A46               	goto	l3777
  6396  0A3E  085C               	movf	_wd^(0+128),w
  6397  0A3F  3E71               	addlw	113
  6398  0A40  00DC               	movwf	_wd^(0+128)
  6399  0A41  085D               	movf	(_wd+1)^(0+128),w
  6400  0A42  1803               	skipnc
  6401  0A43  3E01               	addlw	1
  6402  0A44  3E02               	addlw	2
  6403  0A45  00DD               	movwf	(_wd+1)^(0+128)
  6404  0A46                     l3777:	
  6405                           
  6406                           ;Thermometer.c: 150: dp=wd/1000;
  6407  0A46  30E8               	movlw	232
  6408  0A47  00F0               	movwf	___lwdiv@divisor
  6409  0A48  3003               	movlw	3
  6410  0A49  00F1               	movwf	___lwdiv@divisor+1
  6411  0A4A  085D               	movf	(_wd+1)^(0+128),w
  6412  0A4B  00F3               	movwf	___lwdiv@dividend+1
  6413  0A4C  085C               	movf	_wd^(0+128),w
  6414  0A4D  00F2               	movwf	___lwdiv@dividend
  6415  0A4E  160A  118A  2388   	fcall	___lwdiv
  6416  0A51  0870               	movf	?___lwdiv,w
  6417  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  6418  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  6419  0A54  00A2               	movwf	??_therm_get_temp
  6420  0A55  0822               	movf	??_therm_get_temp,w
  6421  0A56  1683               	bsf	3,5	;RP0=1, select bank1
  6422  0A57  1303               	bcf	3,6	;RP1=0, select bank1
  6423  0A58  00DE               	movwf	_dp^(0+128)
  6424                           
  6425                           ;Thermometer.c: 151: __nop();
  6426  0A59  0000               	nop
  6427  0A5A  0008               	return
  6428  0A5B                     __end_of_therm_get_temp:	
  6429                           
  6430                           	psect	text10
  6431  12DB                     __ptext10:	
  6432 ;; *************** function _therm_write_byte *****************
  6433 ;; Defined at:
  6434 ;;		line 72 in file "Thermometer.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  val             1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  val             1    7[COMMON] unsigned char 
  6439 ;;  i               1    8[COMMON] unsigned char 
  6440 ;;  temp            1    6[COMMON] unsigned char 
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2, status,0, pclath, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6450 ;;      Params:         0       0       0       0       0
  6451 ;;      Locals:         3       0       0       0       0
  6452 ;;      Temps:          2       0       0       0       0
  6453 ;;      Totals:         5       0       0       0       0
  6454 ;;Total ram usage:        5 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    1
  6457 ;; This function calls:
  6458 ;;		_therm_delay
  6459 ;; This function is called by:
  6460 ;;		_therm_get_temp
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _therm_write_byte
  6466  12DB                     _therm_write_byte:	
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _therm_write_byte: [wreg+status,2+status,0+pclath+cstack]
  6470                           ;therm_write_byte@val stored from wreg
  6471  12DB  00F7               	movwf	therm_write_byte@val
  6472                           
  6473                           ;Thermometer.c: 72: void therm_write_byte(unsigned char val);Thermometer.c: 73: {;Thermo
      +                          meter.c: 74:  unsigned char i;;Thermometer.c: 75:  unsigned char temp;;Thermometer.c: 76
      +                          :  for(i=8;i>0;i--)
  6474  12DC  3008               	movlw	8
  6475  12DD  00F4               	movwf	??_therm_write_byte
  6476  12DE  0874               	movf	??_therm_write_byte,w
  6477  12DF  00F8               	movwf	therm_write_byte@i
  6478  12E0                     l3447:	
  6479                           
  6480                           ;Thermometer.c: 77:  {;Thermometer.c: 78:    temp=val&0x01;
  6481  12E0  0877               	movf	therm_write_byte@val,w
  6482  12E1  3901               	andlw	1
  6483  12E2  00F4               	movwf	??_therm_write_byte
  6484  12E3  0874               	movf	??_therm_write_byte,w
  6485  12E4  00F6               	movwf	therm_write_byte@temp
  6486                           
  6487                           ;Thermometer.c: 79:    RA0 = 0; TRISA0 = 0;
  6488  12E5  1283               	bcf	3,5	;RP0=0, select bank0
  6489  12E6  1303               	bcf	3,6	;RP1=0, select bank0
  6490  12E7  1005               	bcf	5,0	;volatile
  6491  12E8  1683               	bsf	3,5	;RP0=1, select bank1
  6492  12E9  1303               	bcf	3,6	;RP1=0, select bank1
  6493  12EA  1005               	bcf	5,0	;volatile
  6494                           
  6495                           ;Thermometer.c: 80:    __nop();
  6496  12EB  0000               	nop
  6497                           
  6498                           ;Thermometer.c: 81:    __nop();
  6499  12EC  0000               	nop
  6500                           
  6501                           ;Thermometer.c: 82:    __nop();
  6502  12ED  0000               	nop
  6503                           
  6504                           ;Thermometer.c: 83:    __nop();
  6505  12EE  0000               	nop
  6506                           
  6507                           ;Thermometer.c: 84:    __nop();
  6508  12EF  0000               	nop
  6509                           
  6510                           ;Thermometer.c: 85:    if(temp==1) TRISA0 =1;
  6511  12F0  0376               	decf	therm_write_byte@temp,w
  6512  12F1  1D03               	btfss	3,2
  6513  12F2  2AF6               	goto	l3467
  6514  12F3  1683               	bsf	3,5	;RP0=1, select bank1
  6515  12F4  1303               	bcf	3,6	;RP1=0, select bank1
  6516  12F5  1405               	bsf	5,0	;volatile
  6517  12F6                     l3467:	
  6518                           
  6519                           ;Thermometer.c: 86:    therm_delay(2,7);
  6520  12F6  3007               	movlw	7
  6521  12F7  00F4               	movwf	??_therm_write_byte
  6522  12F8  0874               	movf	??_therm_write_byte,w
  6523  12F9  00F0               	movwf	therm_delay@y
  6524  12FA  3002               	movlw	2
  6525  12FB  120A  158A  2000  160A  118A  	fcall	_therm_delay
  6526                           
  6527                           ;Thermometer.c: 87:    TRISA0 =1;
  6528  1300  1683               	bsf	3,5	;RP0=1, select bank1
  6529  1301  1303               	bcf	3,6	;RP1=0, select bank1
  6530  1302  1405               	bsf	5,0	;volatile
  6531                           
  6532                           ;Thermometer.c: 88:    __nop();
  6533  1303  0000               	nop
  6534                           
  6535                           ;Thermometer.c: 89:    __nop();
  6536  1304  0000               	nop
  6537                           
  6538                           ;Thermometer.c: 90:    val=val>>1;
  6539  1305  0877               	movf	therm_write_byte@val,w
  6540  1306  00F4               	movwf	??_therm_write_byte
  6541  1307  1003               	clrc
  6542  1308  0C74               	rrf	??_therm_write_byte,w
  6543  1309  00F5               	movwf	??_therm_write_byte+1
  6544  130A  0875               	movf	??_therm_write_byte+1,w
  6545  130B  00F7               	movwf	therm_write_byte@val
  6546                           
  6547                           ;Thermometer.c: 91:   }
  6548  130C  3001               	movlw	1
  6549  130D  02F8               	subwf	therm_write_byte@i,f
  6550  130E  0878               	movf	therm_write_byte@i,w
  6551  130F  1903               	btfsc	3,2
  6552  1310  0008               	return
  6553  1311  2AE0               	goto	l3447
  6554  1312                     __end_of_therm_write_byte:	
  6555                           
  6556                           	psect	text11
  6557  126F                     __ptext11:	
  6558 ;; *************** function _therm_reset *****************
  6559 ;; Defined at:
  6560 ;;		line 55 in file "Thermometer.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;		None
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;  presence        1    5[COMMON] unsigned char 
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  2   40[None  ] int 
  6567 ;; Registers used:
  6568 ;;		wreg, status,2, status,0, pclath, cstack
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6574 ;;      Params:         0       0       0       0       0
  6575 ;;      Locals:         1       0       0       0       0
  6576 ;;      Temps:          1       0       0       0       0
  6577 ;;      Totals:         2       0       0       0       0
  6578 ;;Total ram usage:        2 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; Hardware stack levels required when called:    1
  6581 ;; This function calls:
  6582 ;;		_therm_delay
  6583 ;; This function is called by:
  6584 ;;		_therm_get_temp
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           
  6589                           ;psect for function _therm_reset
  6590  126F                     _therm_reset:	
  6591                           
  6592                           ;Thermometer.c: 57:   char presence=1;
  6593                           
  6594                           ;incstack = 0
  6595                           ; Regs used in _therm_reset: [wreg+status,2+status,0+pclath+cstack]
  6596  126F  01F5               	clrf	therm_reset@presence
  6597  1270  0AF5               	incf	therm_reset@presence,f
  6598  1271                     l3439:	
  6599                           ;Thermometer.c: 58:   while(presence)
  6600                           
  6601                           
  6602                           ;Thermometer.c: 58:   while(presence)
  6603  1271  0875               	movf	therm_reset@presence,w
  6604  1272  1903               	btfsc	3,2
  6605  1273  0008               	return
  6606                           
  6607                           ;Thermometer.c: 59:   {;Thermometer.c: 60:     RA0 = 0; TRISA0 = 0 ;
  6608  1274  1283               	bcf	3,5	;RP0=0, select bank0
  6609  1275  1303               	bcf	3,6	;RP1=0, select bank0
  6610  1276  1005               	bcf	5,0	;volatile
  6611  1277  1683               	bsf	3,5	;RP0=1, select bank1
  6612  1278  1303               	bcf	3,6	;RP1=0, select bank1
  6613  1279  1005               	bcf	5,0	;volatile
  6614                           
  6615                           ;Thermometer.c: 61:     therm_delay(2,70);
  6616  127A  3046               	movlw	70
  6617  127B  00F4               	movwf	??_therm_reset
  6618  127C  0874               	movf	??_therm_reset,w
  6619  127D  00F0               	movwf	therm_delay@y
  6620  127E  3002               	movlw	2
  6621  127F  120A  158A  2000  160A  118A  	fcall	_therm_delay
  6622                           
  6623                           ;Thermometer.c: 62:     TRISA0 =1;
  6624  1284  1683               	bsf	3,5	;RP0=1, select bank1
  6625  1285  1303               	bcf	3,6	;RP1=0, select bank1
  6626  1286  1405               	bsf	5,0	;volatile
  6627                           
  6628                           ;Thermometer.c: 63:     therm_delay(2,8);
  6629  1287  3008               	movlw	8
  6630  1288  00F4               	movwf	??_therm_reset
  6631  1289  0874               	movf	??_therm_reset,w
  6632  128A  00F0               	movwf	therm_delay@y
  6633  128B  3002               	movlw	2
  6634  128C  120A  158A  2000  160A  118A  	fcall	_therm_delay
  6635                           
  6636                           ;Thermometer.c: 64:     if(RA0==1) presence=1;
  6637  1291  1283               	bcf	3,5	;RP0=0, select bank0
  6638  1292  1303               	bcf	3,6	;RP1=0, select bank0
  6639  1293  1C05               	btfss	5,0	;volatile
  6640  1294  2A98               	goto	l3435
  6641  1295  01F5               	clrf	therm_reset@presence
  6642  1296  0AF5               	incf	therm_reset@presence,f
  6643  1297  2A99               	goto	l3437
  6644  1298                     l3435:	
  6645  1298  01F5               	clrf	therm_reset@presence
  6646  1299                     l3437:	
  6647                           
  6648                           ;Thermometer.c: 66:     therm_delay(2,60);
  6649  1299  303C               	movlw	60
  6650  129A  00F4               	movwf	??_therm_reset
  6651  129B  0874               	movf	??_therm_reset,w
  6652  129C  00F0               	movwf	therm_delay@y
  6653  129D  3002               	movlw	2
  6654  129E  120A  158A  2000  160A  118A  	fcall	_therm_delay
  6655  12A3  2A71               	goto	l3439
  6656  12A4                     __end_of_therm_reset:	
  6657                           
  6658                           	psect	text12
  6659  1312                     __ptext12:	
  6660 ;; *************** function _therm_read_byte *****************
  6661 ;; Defined at:
  6662 ;;		line 96 in file "Thermometer.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;		None
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  i               1    6[COMMON] unsigned char 
  6667 ;;  value           1    5[COMMON] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  1    wreg      unsigned char 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6677 ;;      Params:         0       0       0       0       0
  6678 ;;      Locals:         2       0       0       0       0
  6679 ;;      Temps:          1       0       0       0       0
  6680 ;;      Totals:         3       0       0       0       0
  6681 ;;Total ram usage:        3 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    1
  6684 ;; This function calls:
  6685 ;;		_therm_delay
  6686 ;; This function is called by:
  6687 ;;		_therm_get_temp
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _therm_read_byte
  6693  1312                     _therm_read_byte:	
  6694                           
  6695                           ;Thermometer.c: 98:  unsigned char i;;Thermometer.c: 99:  unsigned char value=0;
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _therm_read_byte: [wreg+status,2+status,0+pclath+cstack]
  6699  1312  01F5               	clrf	therm_read_byte@value
  6700                           
  6701                           ;Thermometer.c: 100:  static __bit j;;Thermometer.c: 101:  for(i=8;i>0;i--)
  6702  1313  3008               	movlw	8
  6703  1314  00F4               	movwf	??_therm_read_byte
  6704  1315  0874               	movf	??_therm_read_byte,w
  6705  1316  00F6               	movwf	therm_read_byte@i
  6706  1317                     l3489:	
  6707                           
  6708                           ;Thermometer.c: 102:  {;Thermometer.c: 103:    value>>=1;
  6709  1317  1003               	clrc
  6710  1318  0CF5               	rrf	therm_read_byte@value,f
  6711                           
  6712                           ;Thermometer.c: 104:    RA0 = 0; TRISA0 = 0;
  6713  1319  1283               	bcf	3,5	;RP0=0, select bank0
  6714  131A  1303               	bcf	3,6	;RP1=0, select bank0
  6715  131B  1005               	bcf	5,0	;volatile
  6716  131C  1683               	bsf	3,5	;RP0=1, select bank1
  6717  131D  1303               	bcf	3,6	;RP1=0, select bank1
  6718  131E  1005               	bcf	5,0	;volatile
  6719                           
  6720                           ;Thermometer.c: 105:    __nop();
  6721  131F  0000               	nop
  6722                           
  6723                           ;Thermometer.c: 106:    __nop();
  6724  1320  0000               	nop
  6725                           
  6726                           ;Thermometer.c: 107:    __nop();
  6727  1321  0000               	nop
  6728                           
  6729                           ;Thermometer.c: 108:    __nop();
  6730  1322  0000               	nop
  6731                           
  6732                           ;Thermometer.c: 109:    __nop();
  6733  1323  0000               	nop
  6734                           
  6735                           ;Thermometer.c: 110:    __nop();
  6736  1324  0000               	nop
  6737                           
  6738                           ;Thermometer.c: 111:    TRISA0 =1;
  6739  1325  1683               	bsf	3,5	;RP0=1, select bank1
  6740  1326  1303               	bcf	3,6	;RP1=0, select bank1
  6741  1327  1405               	bsf	5,0	;volatile
  6742                           
  6743                           ;Thermometer.c: 112:    __nop();
  6744  1328  0000               	nop
  6745                           
  6746                           ;Thermometer.c: 113:    __nop();
  6747  1329  0000               	nop
  6748                           
  6749                           ;Thermometer.c: 114:    __nop();
  6750  132A  0000               	nop
  6751                           
  6752                           ;Thermometer.c: 115:    __nop();
  6753  132B  0000               	nop
  6754                           
  6755                           ;Thermometer.c: 116:    __nop();
  6756  132C  0000               	nop
  6757                           
  6758                           ;Thermometer.c: 117:    j=RA0;
  6759  132D  1683               	bsf	3,5	;RP0=1, select bank1
  6760  132E  1303               	bcf	3,6	;RP1=0, select bank1
  6761  132F  106E               	bcf	(therm_read_byte@j/(0+8))^(0+128),therm_read_byte@j& (0+7)
  6762  1330  1283               	bcf	3,5	;RP0=0, select bank0
  6763  1331  1303               	bcf	3,6	;RP1=0, select bank0
  6764  1332  1C05               	btfss	5,0	;volatile
  6765  1333  2B37               	goto	l3521
  6766  1334  1683               	bsf	3,5	;RP0=1, select bank1
  6767  1335  1303               	bcf	3,6	;RP1=0, select bank1
  6768  1336  146E               	bsf	(therm_read_byte@j/(0+8))^(0+128),therm_read_byte@j& (0+7)
  6769  1337                     l3521:	
  6770                           
  6771                           ;Thermometer.c: 118:    if(j) value|=0x80;
  6772  1337  1683               	bsf	3,5	;RP0=1, select bank1
  6773  1338  1303               	bcf	3,6	;RP1=0, select bank1
  6774  1339  186E               	btfsc	(therm_read_byte@j/(0+8))^(0+128),therm_read_byte@j& (0+7)
  6775  133A  17F5               	bsf	therm_read_byte@value,7
  6776                           
  6777                           ;Thermometer.c: 119:    therm_delay(2,7);
  6778  133B  3007               	movlw	7
  6779  133C  00F4               	movwf	??_therm_read_byte
  6780  133D  0874               	movf	??_therm_read_byte,w
  6781  133E  00F0               	movwf	therm_delay@y
  6782  133F  3002               	movlw	2
  6783  1340  120A  158A  2000  160A  118A  	fcall	_therm_delay
  6784                           
  6785                           ;Thermometer.c: 120:   }
  6786  1345  3001               	movlw	1
  6787  1346  02F6               	subwf	therm_read_byte@i,f
  6788  1347  0876               	movf	therm_read_byte@i,w
  6789  1348  1D03               	btfss	3,2
  6790  1349  2B17               	goto	l3489
  6791                           
  6792                           ;Thermometer.c: 121:   return(value);
  6793  134A  0875               	movf	therm_read_byte@value,w
  6794  134B  0008               	return
  6795  134C                     __end_of_therm_read_byte:	
  6796                           
  6797                           	psect	text13
  6798  0800                     __ptext13:	
  6799 ;; *************** function _therm_delay *****************
  6800 ;; Defined at:
  6801 ;;		line 30 in file "Thermometer.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  x               1    wreg     unsigned char 
  6804 ;;  y               1    0[COMMON] unsigned char 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  x               1    2[COMMON] unsigned char 
  6807 ;;  z               1    3[COMMON] unsigned char 
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      void 
  6810 ;; Registers used:
  6811 ;;		wreg, status,2, status,0
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6817 ;;      Params:         1       0       0       0       0
  6818 ;;      Locals:         2       0       0       0       0
  6819 ;;      Temps:          1       0       0       0       0
  6820 ;;      Totals:         4       0       0       0       0
  6821 ;;Total ram usage:        4 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; This function calls:
  6824 ;;		Nothing
  6825 ;; This function is called by:
  6826 ;;		_therm_reset
  6827 ;;		_therm_write_byte
  6828 ;;		_therm_read_byte
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           
  6833                           ;psect for function _therm_delay
  6834  0800                     _therm_delay:	
  6835                           
  6836                           ;incstack = 0
  6837                           ; Regs used in _therm_delay: [wreg+status,2+status,0]
  6838                           ;therm_delay@x stored from wreg
  6839  0800  00F2               	movwf	therm_delay@x
  6840  0801                     l31:	
  6841                           ;Thermometer.c: 30: void therm_delay(char x,char y);Thermometer.c: 31: {;Thermometer.c: 
      +                          32:   char z;;Thermometer.c: 33:   do{
  6842                           
  6843                           
  6844                           ;Thermometer.c: 34:       z=y;
  6845  0801  0870               	movf	therm_delay@y,w
  6846  0802  00F1               	movwf	??_therm_delay
  6847  0803  0871               	movf	??_therm_delay,w
  6848  0804  00F3               	movwf	therm_delay@z
  6849  0805                     l3353:	
  6850  0805  3001               	movlw	1
  6851  0806  02F3               	subwf	therm_delay@z,f
  6852  0807  1D03               	btfss	3,2
  6853  0808  2805               	goto	l3353
  6854                           
  6855                           ;Thermometer.c: 36:      }while(--x);
  6856  0809  3001               	movlw	1
  6857  080A  02F2               	subwf	therm_delay@x,f
  6858  080B  1903               	btfsc	3,2
  6859  080C  0008               	return
  6860  080D  2801               	goto	l31
  6861  080E                     __end_of_therm_delay:	
  6862                           
  6863                           	psect	text14
  6864  1388                     __ptext14:	
  6865 ;; *************** function ___lwdiv *****************
  6866 ;; Defined at:
  6867 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  divisor         2    0[COMMON] unsigned int 
  6870 ;;  dividend        2    2[COMMON] unsigned int 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  quotient        2    5[COMMON] unsigned int 
  6873 ;;  counter         1    7[COMMON] unsigned char 
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  2    0[COMMON] unsigned int 
  6876 ;; Registers used:
  6877 ;;		wreg, status,2, status,0
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 0/0
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6883 ;;      Params:         4       0       0       0       0
  6884 ;;      Locals:         3       0       0       0       0
  6885 ;;      Temps:          1       0       0       0       0
  6886 ;;      Totals:         8       0       0       0       0
  6887 ;;Total ram usage:        8 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; This function calls:
  6890 ;;		Nothing
  6891 ;; This function is called by:
  6892 ;;		_therm_get_temp
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function ___lwdiv
  6898  1388                     ___lwdiv:	
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6902  1388  01F5               	clrf	___lwdiv@quotient
  6903  1389  01F6               	clrf	___lwdiv@quotient+1
  6904  138A  0870               	movf	___lwdiv@divisor,w
  6905  138B  0471               	iorwf	___lwdiv@divisor+1,w
  6906  138C  1903               	btfsc	3,2
  6907  138D  2BBF               	goto	l3735
  6908  138E  01F7               	clrf	___lwdiv@counter
  6909  138F  0AF7               	incf	___lwdiv@counter,f
  6910  1390                     l3723:	
  6911  1390  1BF1               	btfsc	___lwdiv@divisor+1,7
  6912  1391  2B9E               	goto	l3725
  6913  1392  3001               	movlw	1
  6914  1393                     u2645:	
  6915  1393  1003               	clrc
  6916  1394  0DF0               	rlf	___lwdiv@divisor,f
  6917  1395  0DF1               	rlf	___lwdiv@divisor+1,f
  6918  1396  3EFF               	addlw	-1
  6919  1397  1D03               	skipz
  6920  1398  2B93               	goto	u2645
  6921  1399  3001               	movlw	1
  6922  139A  00F4               	movwf	??___lwdiv
  6923  139B  0874               	movf	??___lwdiv,w
  6924  139C  07F7               	addwf	___lwdiv@counter,f
  6925  139D  2B90               	goto	l3723
  6926  139E                     l3725:	
  6927  139E  3001               	movlw	1
  6928  139F                     u2665:	
  6929  139F  1003               	clrc
  6930  13A0  0DF5               	rlf	___lwdiv@quotient,f
  6931  13A1  0DF6               	rlf	___lwdiv@quotient+1,f
  6932  13A2  3EFF               	addlw	-1
  6933  13A3  1D03               	skipz
  6934  13A4  2B9F               	goto	u2665
  6935  13A5  0871               	movf	___lwdiv@divisor+1,w
  6936  13A6  0273               	subwf	___lwdiv@dividend+1,w
  6937  13A7  1D03               	skipz
  6938  13A8  2BAB               	goto	u2675
  6939  13A9  0870               	movf	___lwdiv@divisor,w
  6940  13AA  0272               	subwf	___lwdiv@dividend,w
  6941  13AB                     u2675:	
  6942  13AB  1C03               	skipc
  6943  13AC  2BB4               	goto	l3731
  6944  13AD  0870               	movf	___lwdiv@divisor,w
  6945  13AE  02F2               	subwf	___lwdiv@dividend,f
  6946  13AF  0871               	movf	___lwdiv@divisor+1,w
  6947  13B0  1C03               	skipc
  6948  13B1  03F3               	decf	___lwdiv@dividend+1,f
  6949  13B2  02F3               	subwf	___lwdiv@dividend+1,f
  6950  13B3  1475               	bsf	___lwdiv@quotient,0
  6951  13B4                     l3731:	
  6952  13B4  3001               	movlw	1
  6953  13B5                     u2685:	
  6954  13B5  1003               	clrc
  6955  13B6  0CF1               	rrf	___lwdiv@divisor+1,f
  6956  13B7  0CF0               	rrf	___lwdiv@divisor,f
  6957  13B8  3EFF               	addlw	-1
  6958  13B9  1D03               	skipz
  6959  13BA  2BB5               	goto	u2685
  6960  13BB  3001               	movlw	1
  6961  13BC  02F7               	subwf	___lwdiv@counter,f
  6962  13BD  1D03               	btfss	3,2
  6963  13BE  2B9E               	goto	l3725
  6964  13BF                     l3735:	
  6965  13BF  0876               	movf	___lwdiv@quotient+1,w
  6966  13C0  00F1               	movwf	?___lwdiv+1
  6967  13C1  0875               	movf	___lwdiv@quotient,w
  6968  13C2  00F0               	movwf	?___lwdiv
  6969  13C3  0008               	return
  6970  13C4                     __end_of___lwdiv:	
  6971                           
  6972                           	psect	text15
  6973  1488                     __ptext15:	
  6974 ;; *************** function ___awmod *****************
  6975 ;; Defined at:
  6976 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  divisor         2    9[COMMON] int 
  6979 ;;  dividend        2   11[COMMON] int 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  sign            1    1[BANK0 ] unsigned char 
  6982 ;;  counter         1    0[BANK0 ] unsigned char 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  2    9[COMMON] int 
  6985 ;; Registers used:
  6986 ;;		wreg, status,2, status,0
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6992 ;;      Params:         4       0       0       0       0
  6993 ;;      Locals:         0       2       0       0       0
  6994 ;;      Temps:          1       0       0       0       0
  6995 ;;      Totals:         5       2       0       0       0
  6996 ;;Total ram usage:        7 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; This function calls:
  6999 ;;		Nothing
  7000 ;; This function is called by:
  7001 ;;		_therm_get_temp
  7002 ;;		_userInput_getDate
  7003 ;;		_userInput_displayLimits
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           
  7008                           ;psect for function ___awmod
  7009  1488                     ___awmod:	
  7010                           
  7011                           ;incstack = 0
  7012                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7013  1488  1283               	bcf	3,5	;RP0=0, select bank0
  7014  1489  1303               	bcf	3,6	;RP1=0, select bank0
  7015  148A  01A1               	clrf	___awmod@sign
  7016  148B  1FFC               	btfss	___awmod@dividend+1,7
  7017  148C  2C94               	goto	l3683
  7018  148D  09FB               	comf	___awmod@dividend,f
  7019  148E  09FC               	comf	___awmod@dividend+1,f
  7020  148F  0AFB               	incf	___awmod@dividend,f
  7021  1490  1903               	skipnz
  7022  1491  0AFC               	incf	___awmod@dividend+1,f
  7023  1492  01A1               	clrf	___awmod@sign
  7024  1493  0AA1               	incf	___awmod@sign,f
  7025  1494                     l3683:	
  7026  1494  1FFA               	btfss	___awmod@divisor+1,7
  7027  1495  2C9B               	goto	l3687
  7028  1496  09F9               	comf	___awmod@divisor,f
  7029  1497  09FA               	comf	___awmod@divisor+1,f
  7030  1498  0AF9               	incf	___awmod@divisor,f
  7031  1499  1903               	skipnz
  7032  149A  0AFA               	incf	___awmod@divisor+1,f
  7033  149B                     l3687:	
  7034  149B  0879               	movf	___awmod@divisor,w
  7035  149C  047A               	iorwf	___awmod@divisor+1,w
  7036  149D  1903               	btfsc	3,2
  7037  149E  2CC8               	goto	l3705
  7038  149F  01A0               	clrf	___awmod@counter
  7039  14A0  0AA0               	incf	___awmod@counter,f
  7040  14A1                     l3695:	
  7041  14A1  1BFA               	btfsc	___awmod@divisor+1,7
  7042  14A2  2CAF               	goto	l3697
  7043  14A3  3001               	movlw	1
  7044  14A4                     u2575:	
  7045  14A4  1003               	clrc
  7046  14A5  0DF9               	rlf	___awmod@divisor,f
  7047  14A6  0DFA               	rlf	___awmod@divisor+1,f
  7048  14A7  3EFF               	addlw	-1
  7049  14A8  1D03               	skipz
  7050  14A9  2CA4               	goto	u2575
  7051  14AA  3001               	movlw	1
  7052  14AB  00FD               	movwf	??___awmod
  7053  14AC  087D               	movf	??___awmod,w
  7054  14AD  07A0               	addwf	___awmod@counter,f
  7055  14AE  2CA1               	goto	l3695
  7056  14AF                     l3697:	
  7057  14AF  087A               	movf	___awmod@divisor+1,w
  7058  14B0  027C               	subwf	___awmod@dividend+1,w
  7059  14B1  1D03               	skipz
  7060  14B2  2CB5               	goto	u2595
  7061  14B3  0879               	movf	___awmod@divisor,w
  7062  14B4  027B               	subwf	___awmod@dividend,w
  7063  14B5                     u2595:	
  7064  14B5  1C03               	skipc
  7065  14B6  2CBD               	goto	l3701
  7066  14B7  0879               	movf	___awmod@divisor,w
  7067  14B8  02FB               	subwf	___awmod@dividend,f
  7068  14B9  087A               	movf	___awmod@divisor+1,w
  7069  14BA  1C03               	skipc
  7070  14BB  03FC               	decf	___awmod@dividend+1,f
  7071  14BC  02FC               	subwf	___awmod@dividend+1,f
  7072  14BD                     l3701:	
  7073  14BD  3001               	movlw	1
  7074  14BE                     u2605:	
  7075  14BE  1003               	clrc
  7076  14BF  0CFA               	rrf	___awmod@divisor+1,f
  7077  14C0  0CF9               	rrf	___awmod@divisor,f
  7078  14C1  3EFF               	addlw	-1
  7079  14C2  1D03               	skipz
  7080  14C3  2CBE               	goto	u2605
  7081  14C4  3001               	movlw	1
  7082  14C5  02A0               	subwf	___awmod@counter,f
  7083  14C6  1D03               	btfss	3,2
  7084  14C7  2CAF               	goto	l3697
  7085  14C8                     l3705:	
  7086  14C8  0821               	movf	___awmod@sign,w
  7087  14C9  1903               	btfsc	3,2
  7088  14CA  2CD0               	goto	l3709
  7089  14CB  09FB               	comf	___awmod@dividend,f
  7090  14CC  09FC               	comf	___awmod@dividend+1,f
  7091  14CD  0AFB               	incf	___awmod@dividend,f
  7092  14CE  1903               	skipnz
  7093  14CF  0AFC               	incf	___awmod@dividend+1,f
  7094  14D0                     l3709:	
  7095  14D0  087C               	movf	___awmod@dividend+1,w
  7096  14D1  00FA               	movwf	?___awmod+1
  7097  14D2  087B               	movf	___awmod@dividend,w
  7098  14D3  00F9               	movwf	?___awmod
  7099  14D4  0008               	return
  7100  14D5                     __end_of___awmod:	
  7101                           
  7102                           	psect	text16
  7103  157D                     __ptext16:	
  7104 ;; *************** function ___awdiv *****************
  7105 ;; Defined at:
  7106 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;  divisor         2    0[COMMON] int 
  7109 ;;  dividend        2    2[COMMON] int 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;  quotient        2    7[COMMON] int 
  7112 ;;  sign            1    6[COMMON] unsigned char 
  7113 ;;  counter         1    5[COMMON] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  2    0[COMMON] int 
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7123 ;;      Params:         4       0       0       0       0
  7124 ;;      Locals:         4       0       0       0       0
  7125 ;;      Temps:          1       0       0       0       0
  7126 ;;      Totals:         9       0       0       0       0
  7127 ;;Total ram usage:        9 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; This function calls:
  7130 ;;		Nothing
  7131 ;; This function is called by:
  7132 ;;		_therm_get_temp
  7133 ;;		_userInput_getDate
  7134 ;;		_userInput_displayLimits
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function ___awdiv
  7140  157D                     ___awdiv:	
  7141                           
  7142                           ;incstack = 0
  7143                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7144  157D  01F6               	clrf	___awdiv@sign
  7145  157E  1FF1               	btfss	___awdiv@divisor+1,7
  7146  157F  2D87               	goto	l3639
  7147  1580  09F0               	comf	___awdiv@divisor,f
  7148  1581  09F1               	comf	___awdiv@divisor+1,f
  7149  1582  0AF0               	incf	___awdiv@divisor,f
  7150  1583  1903               	skipnz
  7151  1584  0AF1               	incf	___awdiv@divisor+1,f
  7152  1585  01F6               	clrf	___awdiv@sign
  7153  1586  0AF6               	incf	___awdiv@sign,f
  7154  1587                     l3639:	
  7155  1587  1FF3               	btfss	___awdiv@dividend+1,7
  7156  1588  2D92               	goto	l3645
  7157  1589  09F2               	comf	___awdiv@dividend,f
  7158  158A  09F3               	comf	___awdiv@dividend+1,f
  7159  158B  0AF2               	incf	___awdiv@dividend,f
  7160  158C  1903               	skipnz
  7161  158D  0AF3               	incf	___awdiv@dividend+1,f
  7162  158E  3001               	movlw	1
  7163  158F  00F4               	movwf	??___awdiv
  7164  1590  0874               	movf	??___awdiv,w
  7165  1591  06F6               	xorwf	___awdiv@sign,f
  7166  1592                     l3645:	
  7167  1592  01F7               	clrf	___awdiv@quotient
  7168  1593  01F8               	clrf	___awdiv@quotient+1
  7169  1594  0870               	movf	___awdiv@divisor,w
  7170  1595  0471               	iorwf	___awdiv@divisor+1,w
  7171  1596  1903               	btfsc	3,2
  7172  1597  2DC9               	goto	l3667
  7173  1598  01F5               	clrf	___awdiv@counter
  7174  1599  0AF5               	incf	___awdiv@counter,f
  7175  159A                     l3655:	
  7176  159A  1BF1               	btfsc	___awdiv@divisor+1,7
  7177  159B  2DA8               	goto	l3657
  7178  159C  3001               	movlw	1
  7179  159D                     u2475:	
  7180  159D  1003               	clrc
  7181  159E  0DF0               	rlf	___awdiv@divisor,f
  7182  159F  0DF1               	rlf	___awdiv@divisor+1,f
  7183  15A0  3EFF               	addlw	-1
  7184  15A1  1D03               	skipz
  7185  15A2  2D9D               	goto	u2475
  7186  15A3  3001               	movlw	1
  7187  15A4  00F4               	movwf	??___awdiv
  7188  15A5  0874               	movf	??___awdiv,w
  7189  15A6  07F5               	addwf	___awdiv@counter,f
  7190  15A7  2D9A               	goto	l3655
  7191  15A8                     l3657:	
  7192  15A8  3001               	movlw	1
  7193  15A9                     u2495:	
  7194  15A9  1003               	clrc
  7195  15AA  0DF7               	rlf	___awdiv@quotient,f
  7196  15AB  0DF8               	rlf	___awdiv@quotient+1,f
  7197  15AC  3EFF               	addlw	-1
  7198  15AD  1D03               	skipz
  7199  15AE  2DA9               	goto	u2495
  7200  15AF  0871               	movf	___awdiv@divisor+1,w
  7201  15B0  0273               	subwf	___awdiv@dividend+1,w
  7202  15B1  1D03               	skipz
  7203  15B2  2DB5               	goto	u2505
  7204  15B3  0870               	movf	___awdiv@divisor,w
  7205  15B4  0272               	subwf	___awdiv@dividend,w
  7206  15B5                     u2505:	
  7207  15B5  1C03               	skipc
  7208  15B6  2DBE               	goto	l3663
  7209  15B7  0870               	movf	___awdiv@divisor,w
  7210  15B8  02F2               	subwf	___awdiv@dividend,f
  7211  15B9  0871               	movf	___awdiv@divisor+1,w
  7212  15BA  1C03               	skipc
  7213  15BB  03F3               	decf	___awdiv@dividend+1,f
  7214  15BC  02F3               	subwf	___awdiv@dividend+1,f
  7215  15BD  1477               	bsf	___awdiv@quotient,0
  7216  15BE                     l3663:	
  7217  15BE  3001               	movlw	1
  7218  15BF                     u2515:	
  7219  15BF  1003               	clrc
  7220  15C0  0CF1               	rrf	___awdiv@divisor+1,f
  7221  15C1  0CF0               	rrf	___awdiv@divisor,f
  7222  15C2  3EFF               	addlw	-1
  7223  15C3  1D03               	skipz
  7224  15C4  2DBF               	goto	u2515
  7225  15C5  3001               	movlw	1
  7226  15C6  02F5               	subwf	___awdiv@counter,f
  7227  15C7  1D03               	btfss	3,2
  7228  15C8  2DA8               	goto	l3657
  7229  15C9                     l3667:	
  7230  15C9  0876               	movf	___awdiv@sign,w
  7231  15CA  1903               	btfsc	3,2
  7232  15CB  2DD1               	goto	l3671
  7233  15CC  09F7               	comf	___awdiv@quotient,f
  7234  15CD  09F8               	comf	___awdiv@quotient+1,f
  7235  15CE  0AF7               	incf	___awdiv@quotient,f
  7236  15CF  1903               	skipnz
  7237  15D0  0AF8               	incf	___awdiv@quotient+1,f
  7238  15D1                     l3671:	
  7239  15D1  0878               	movf	___awdiv@quotient+1,w
  7240  15D2  00F1               	movwf	?___awdiv+1
  7241  15D3  0877               	movf	___awdiv@quotient,w
  7242  15D4  00F0               	movwf	?___awdiv
  7243  15D5  0008               	return
  7244  15D6                     __end_of___awdiv:	
  7245                           
  7246                           	psect	text17
  7247  1F9A                     __ptext17:	
  7248 ;; *************** function ___wmul *****************
  7249 ;; Defined at:
  7250 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  multiplier      2    0[COMMON] unsigned int 
  7253 ;;  multiplicand    2    2[COMMON] unsigned int 
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;  product         2    4[COMMON] unsigned int 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  2    0[COMMON] unsigned int 
  7258 ;; Registers used:
  7259 ;;		wreg, status,2, status,0
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7265 ;;      Params:         4       0       0       0       0
  7266 ;;      Locals:         2       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0
  7268 ;;      Totals:         6       0       0       0       0
  7269 ;;Total ram usage:        6 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; This function calls:
  7272 ;;		Nothing
  7273 ;; This function is called by:
  7274 ;;		_therm_getTemp
  7275 ;;		_userInput_getDate
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           
  7280                           ;psect for function ___wmul
  7281  1F9A                     ___wmul:	
  7282                           
  7283                           ;incstack = 0
  7284                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7285  1F9A  01F4               	clrf	___wmul@product
  7286  1F9B  01F5               	clrf	___wmul@product+1
  7287  1F9C                     l3979:	
  7288  1F9C  1C70               	btfss	___wmul@multiplier,0
  7289  1F9D  2FA4               	goto	l773
  7290  1F9E  0872               	movf	___wmul@multiplicand,w
  7291  1F9F  07F4               	addwf	___wmul@product,f
  7292  1FA0  1803               	skipnc
  7293  1FA1  0AF5               	incf	___wmul@product+1,f
  7294  1FA2  0873               	movf	___wmul@multiplicand+1,w
  7295  1FA3  07F5               	addwf	___wmul@product+1,f
  7296  1FA4                     l773:	
  7297  1FA4  3001               	movlw	1
  7298  1FA5                     u2995:	
  7299  1FA5  1003               	clrc
  7300  1FA6  0DF2               	rlf	___wmul@multiplicand,f
  7301  1FA7  0DF3               	rlf	___wmul@multiplicand+1,f
  7302  1FA8  3EFF               	addlw	-1
  7303  1FA9  1D03               	skipz
  7304  1FAA  2FA5               	goto	u2995
  7305  1FAB  3001               	movlw	1
  7306  1FAC                     u3005:	
  7307  1FAC  1003               	clrc
  7308  1FAD  0CF1               	rrf	___wmul@multiplier+1,f
  7309  1FAE  0CF0               	rrf	___wmul@multiplier,f
  7310  1FAF  3EFF               	addlw	-1
  7311  1FB0  1D03               	skipz
  7312  1FB1  2FAC               	goto	u3005
  7313  1FB2  0870               	movf	___wmul@multiplier,w
  7314  1FB3  0471               	iorwf	___wmul@multiplier+1,w
  7315  1FB4  1D03               	btfss	3,2
  7316  1FB5  2F9C               	goto	l3979
  7317  1FB6  0875               	movf	___wmul@product+1,w
  7318  1FB7  00F1               	movwf	?___wmul+1
  7319  1FB8  0874               	movf	___wmul@product,w
  7320  1FB9  00F0               	movwf	?___wmul
  7321  1FBA  0008               	return
  7322  1FBB                     __end_of___wmul:	
  7323                           
  7324                           	psect	text18
  7325  10E0                     __ptext18:	
  7326 ;; *************** function _pushButtons_checkButtons *****************
  7327 ;; Defined at:
  7328 ;;		line 6 in file "pushButtons.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;		None
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;		None
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  2    0[COMMON] int 
  7335 ;; Registers used:
  7336 ;;		wreg, status,2
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7342 ;;      Params:         2       0       0       0       0
  7343 ;;      Locals:         0       0       0       0       0
  7344 ;;      Temps:          0       0       0       0       0
  7345 ;;      Totals:         2       0       0       0       0
  7346 ;;Total ram usage:        2 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; This function calls:
  7349 ;;		Nothing
  7350 ;; This function is called by:
  7351 ;;		_main
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           
  7356                           ;psect for function _pushButtons_checkButtons
  7357  10E0                     _pushButtons_checkButtons:	
  7358                           
  7359                           ;pushButtons.c: 8:     TRISB = 0x0F;
  7360                           
  7361                           ;incstack = 0
  7362                           ; Regs used in _pushButtons_checkButtons: [wreg+status,2]
  7363  10E0  300F               	movlw	15
  7364  10E1  1683               	bsf	3,5	;RP0=1, select bank1
  7365  10E2  1303               	bcf	3,6	;RP1=0, select bank1
  7366  10E3  0086               	movwf	6	;volatile
  7367                           
  7368                           ;pushButtons.c: 11:     if (RB0 == 0)
  7369  10E4  1283               	bcf	3,5	;RP0=0, select bank0
  7370  10E5  1303               	bcf	3,6	;RP1=0, select bank0
  7371  10E6  1806               	btfsc	6,0	;volatile
  7372  10E7  28EB               	goto	l195
  7373                           
  7374                           ;pushButtons.c: 12:         return 0;
  7375  10E8  01F0               	clrf	?_pushButtons_checkButtons
  7376  10E9  01F1               	clrf	?_pushButtons_checkButtons+1
  7377  10EA  0008               	return
  7378  10EB                     l195:	
  7379                           ;pushButtons.c: 13:     else if (RB1 == 0)
  7380                           
  7381  10EB  1886               	btfsc	6,1	;volatile
  7382  10EC  28F2               	goto	l198
  7383                           
  7384                           ;pushButtons.c: 14:         return 1;
  7385  10ED  3001               	movlw	1
  7386  10EE  00F0               	movwf	?_pushButtons_checkButtons
  7387  10EF  3000               	movlw	0
  7388  10F0  00F1               	movwf	?_pushButtons_checkButtons+1
  7389  10F1  0008               	return
  7390  10F2                     l198:	
  7391                           ;pushButtons.c: 15:     else if (RB2 == 0)
  7392                           
  7393  10F2  1906               	btfsc	6,2	;volatile
  7394  10F3  28F9               	goto	l200
  7395                           
  7396                           ;pushButtons.c: 16:         return 2;
  7397  10F4  3002               	movlw	2
  7398  10F5  00F0               	movwf	?_pushButtons_checkButtons
  7399  10F6  3000               	movlw	0
  7400  10F7  00F1               	movwf	?_pushButtons_checkButtons+1
  7401  10F8  0008               	return
  7402  10F9                     l200:	
  7403                           ;pushButtons.c: 17:     else if (RB3 == 0)
  7404                           
  7405  10F9  1986               	btfsc	6,3	;volatile
  7406  10FA  2900               	goto	l4033
  7407                           
  7408                           ;pushButtons.c: 18:         return 3;
  7409  10FB  3003               	movlw	3
  7410  10FC  00F0               	movwf	?_pushButtons_checkButtons
  7411  10FD  3000               	movlw	0
  7412  10FE  00F1               	movwf	?_pushButtons_checkButtons+1
  7413  10FF  0008               	return
  7414  1100                     l4033:	
  7415                           
  7416                           ;pushButtons.c: 19:     return 4;
  7417  1100  3004               	movlw	4
  7418  1101  00F0               	movwf	?_pushButtons_checkButtons
  7419  1102  3000               	movlw	0
  7420  1103  00F1               	movwf	?_pushButtons_checkButtons+1
  7421  1104  0008               	return
  7422  1105                     __end_of_pushButtons_checkButtons:	
  7423                           
  7424                           	psect	text19
  7425  0A5B                     __ptext19:	
  7426 ;; *************** function _displayTime *****************
  7427 ;; Defined at:
  7428 ;;		line 130 in file "main.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;		None
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  1    wreg      void 
  7435 ;; Registers used:
  7436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7442 ;;      Params:         0       0       0       0       0
  7443 ;;      Locals:         0       0       0       0       0
  7444 ;;      Temps:          4       0       0       0       0
  7445 ;;      Totals:         4       0       0       0       0
  7446 ;;Total ram usage:        4 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    3
  7449 ;; This function calls:
  7450 ;;		_LCD_firstLine
  7451 ;;		_LCD_init
  7452 ;;		_LCD_secondLine
  7453 ;;		_LCD_write
  7454 ;;		_LCD_writeChar
  7455 ;; This function is called by:
  7456 ;;		_main
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           
  7461                           ;psect for function _displayTime
  7462  0A5B                     _displayTime:	
  7463                           
  7464                           ;main.c: 132:             LCD_writeChar(currentTime.day1 + '0');
  7465                           
  7466                           ;incstack = 0
  7467                           ; Regs used in _displayTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7468  0A5B  160A  158A  2748  120A  158A  	fcall	_LCD_init
  7469                           
  7470                           ;main.c: 134:             LCD_write("/", 1);
  7471  0A60  1683               	bsf	3,5	;RP0=1, select bank3
  7472  0A61  1703               	bsf	3,6	;RP1=1, select bank3
  7473  0A62  0811               	movf	(_currentTime^(0+384)+1),w
  7474  0A63  1283               	bcf	3,5	;RP0=0, select bank2
  7475  0A64  1703               	bsf	3,6	;RP1=1, select bank2
  7476  0A65  0611               	xorwf	(_savedTime^(0+256)+1),w
  7477  0A66  1D03               	skipz
  7478  0A67  2A6D               	goto	l4151
  7479  0A68  1683               	bsf	3,5	;RP0=1, select bank1
  7480  0A69  1303               	bcf	3,6	;RP1=0, select bank1
  7481  0A6A  086D               	movf	_screenCleared^(0+128),w
  7482  0A6B  1903               	btfsc	3,2
  7483  0A6C  0008               	return
  7484  0A6D                     l4151:	
  7485                           
  7486                           ;main.c: 135:             LCD_writeChar(currentTime.month1 + '0');
  7487  0A6D  160A  158A  267A  120A  158A  	fcall	_LCD_firstLine
  7488                           
  7489                           ;main.c: 136:             LCD_writeChar(currentTime.month2 + '0');
  7490  0A72  3003               	movlw	3
  7491  0A73  00F8               	movwf	??_displayTime
  7492  0A74  0878               	movf	??_displayTime,w
  7493  0A75  00F3               	movwf	LCD_write@len
  7494  0A76  1683               	bsf	3,5	;RP0=1, select bank3
  7495  0A77  1703               	bsf	3,6	;RP1=1, select bank3
  7496  0A78  081B               	movf	(_currentTime^(0+384)+11),w
  7497  0A79  3EDA               	addlw	(low ((_weekdays| (0+256)+255)))& (0+255)
  7498  0A7A  0084               	movwf	4
  7499  0A7B  1783               	bsf	3,7	;select IRP bank3
  7500  0A7C  0800               	movf	0,w
  7501  0A7D  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7502                           
  7503                           ;main.c: 138:             LCD_writeChar(currentTime.year1 + '0');
  7504  0A82  3005               	movlw	5
  7505  0A83  00F8               	movwf	??_displayTime
  7506  0A84  0878               	movf	??_displayTime,w
  7507  0A85  00F3               	movwf	LCD_write@len
  7508  0A86  3014               	movlw	(low (((STR_19+11)-__stringbase)| (0+32768)))& (0+255)
  7509  0A87  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7510                           
  7511                           ;main.c: 139:             LCD_writeChar(currentTime.year2 + '0');
  7512  0A8C  1683               	bsf	3,5	;RP0=1, select bank3
  7513  0A8D  1703               	bsf	3,6	;RP1=1, select bank3
  7514  0A8E  0814               	movf	(_currentTime^(0+384)+4),w
  7515  0A8F  3E30               	addlw	48
  7516  0A90  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7517                           
  7518                           ;main.c: 140:         }
  7519  0A95  1683               	bsf	3,5	;RP0=1, select bank3
  7520  0A96  1703               	bsf	3,6	;RP1=1, select bank3
  7521  0A97  0815               	movf	(_currentTime^(0+384)+5),w
  7522  0A98  3E30               	addlw	48
  7523  0A99  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7524                           
  7525                           ;main.c: 141:         savedTime = currentTime;
  7526  0A9E  01F3               	clrf	LCD_write@len
  7527  0A9F  0AF3               	incf	LCD_write@len,f
  7528  0AA0  3088               	movlw	(low (((STR_21+2)-__stringbase)| (0+32768)))& (0+255)
  7529  0AA1  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7530                           
  7531                           ;main.c: 142:     }
  7532  0AA6  1683               	bsf	3,5	;RP0=1, select bank3
  7533  0AA7  1703               	bsf	3,6	;RP1=1, select bank3
  7534  0AA8  0812               	movf	(_currentTime^(0+384)+2),w
  7535  0AA9  3E30               	addlw	48
  7536  0AAA  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7537                           
  7538                           ;main.c: 143: 
  7539  0AAF  1683               	bsf	3,5	;RP0=1, select bank3
  7540  0AB0  1703               	bsf	3,6	;RP1=1, select bank3
  7541  0AB1  0813               	movf	(_currentTime^(0+384)+3),w
  7542  0AB2  3E30               	addlw	48
  7543  0AB3  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7544                           
  7545                           ;main.c: 144: }
  7546  0AB8  01F3               	clrf	LCD_write@len
  7547  0AB9  0AF3               	incf	LCD_write@len,f
  7548  0ABA  3088               	movlw	(low (((STR_21+2)-__stringbase)| (0+32768)))& (0+255)
  7549  0ABB  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7550                           
  7551                           ;main.c: 145: 
  7552  0AC0  1683               	bsf	3,5	;RP0=1, select bank3
  7553  0AC1  1703               	bsf	3,6	;RP1=1, select bank3
  7554  0AC2  0810               	movf	_currentTime^(0+384),w
  7555  0AC3  3E30               	addlw	48
  7556  0AC4  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7557                           
  7558                           ;main.c: 146: 
  7559  0AC9  1683               	bsf	3,5	;RP0=1, select bank3
  7560  0ACA  1703               	bsf	3,6	;RP1=1, select bank3
  7561  0ACB  0811               	movf	(_currentTime^(0+384)+1),w
  7562  0ACC  3E30               	addlw	48
  7563  0ACD  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7564                           
  7565                           ;main.c: 149:     LCD_thirdLine();
  7566  0AD2  1683               	bsf	3,5	;RP0=1, select bank3
  7567  0AD3  1703               	bsf	3,6	;RP1=1, select bank3
  7568  0AD4  0817               	movf	(_currentTime^(0+384)+7),w
  7569  0AD5  1283               	bcf	3,5	;RP0=0, select bank2
  7570  0AD6  1703               	bsf	3,6	;RP1=1, select bank2
  7571  0AD7  0617               	xorwf	(_savedTime^(0+256)+7),w
  7572  0AD8  1D03               	skipz
  7573  0AD9  2ADF               	goto	l4169
  7574  0ADA  1683               	bsf	3,5	;RP0=1, select bank1
  7575  0ADB  1303               	bcf	3,6	;RP1=0, select bank1
  7576  0ADC  036D               	decf	_screenCleared^(0+128),w
  7577  0ADD  1D03               	btfss	3,2
  7578  0ADE  2B34               	goto	l4185
  7579  0ADF                     l4169:	
  7580                           
  7581                           ;main.c: 150:     LCD_writeChar(currentTemp.tenth + 48);;main.c: 151:     LCD_writeChar(
      +                          currentTemp.first + 48);
  7582  0ADF  160A  158A  267F  120A  158A  	fcall	_LCD_secondLine
  7583                           
  7584                           ;main.c: 152:     LCD_writeChar('.');
  7585  0AE4  3008               	movlw	8
  7586  0AE5  00F8               	movwf	??_displayTime
  7587  0AE6  0878               	movf	??_displayTime,w
  7588  0AE7  00F3               	movwf	LCD_write@len
  7589  0AE8  3011               	movlw	(low (((STR_19+8)-__stringbase)| (0+32768)))& (0+255)
  7590  0AE9  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7591                           
  7592                           ;main.c: 153:     LCD_writeChar(currentTemp.dp + 48);
  7593  0AEE  1683               	bsf	3,5	;RP0=1, select bank3
  7594  0AEF  1703               	bsf	3,6	;RP1=1, select bank3
  7595  0AF0  0816               	movf	(_currentTime^(0+384)+6),w
  7596  0AF1  3E30               	addlw	48
  7597  0AF2  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7598                           
  7599                           ;main.c: 154:     LCD_writeChar('C');
  7600  0AF7  1683               	bsf	3,5	;RP0=1, select bank3
  7601  0AF8  1703               	bsf	3,6	;RP1=1, select bank3
  7602  0AF9  0817               	movf	(_currentTime^(0+384)+7),w
  7603  0AFA  3E30               	addlw	48
  7604  0AFB  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7605                           
  7606                           ;main.c: 155:     LCD_write("     ",5);
  7607  0B00  01F3               	clrf	LCD_write@len
  7608  0B01  0AF3               	incf	LCD_write@len,f
  7609  0B02  30A6               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  7610  0B03  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7611                           
  7612                           ;main.c: 156: 
  7613  0B08  1683               	bsf	3,5	;RP0=1, select bank3
  7614  0B09  1703               	bsf	3,6	;RP1=1, select bank3
  7615  0B0A  0818               	movf	(_currentTime^(0+384)+8),w
  7616  0B0B  3E30               	addlw	48
  7617  0B0C  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7618                           
  7619                           ;main.c: 157: }
  7620  0B11  1683               	bsf	3,5	;RP0=1, select bank3
  7621  0B12  1703               	bsf	3,6	;RP1=1, select bank3
  7622  0B13  0819               	movf	(_currentTime^(0+384)+9),w
  7623  0B14  3E30               	addlw	48
  7624  0B15  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7625                           
  7626                           ;main.c: 158: 
  7627  0B1A  01F3               	clrf	LCD_write@len
  7628  0B1B  0AF3               	incf	LCD_write@len,f
  7629  0B1C  30A6               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  7630  0B1D  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7631                           
  7632                           ;main.c: 159: void checkTemp() {
  7633  0B22  1683               	bsf	3,5	;RP0=1, select bank3
  7634  0B23  1703               	bsf	3,6	;RP1=1, select bank3
  7635  0B24  081C               	movf	(_currentTime^(0+384)+12),w
  7636  0B25  3E30               	addlw	48
  7637  0B26  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7638                           
  7639                           ;main.c: 160:     int lowLimit, low, high, highLimit;
  7640  0B2B  1683               	bsf	3,5	;RP0=1, select bank3
  7641  0B2C  1703               	bsf	3,6	;RP1=1, select bank3
  7642  0B2D  081D               	movf	(_currentTime^(0+384)+13),w
  7643  0B2E  3E30               	addlw	48
  7644  0B2F  160A  158A  277C  120A  158A  	fcall	_LCD_writeChar
  7645  0B34                     l4185:	
  7646                           
  7647                           ;main.c: 162: 
  7648  0B34  3010               	movlw	_savedTime& (0+255)
  7649  0B35  0084               	movwf	4
  7650  0B36  3090               	movlw	low _currentTime
  7651  0B37  00F8               	movwf	??_displayTime
  7652  0B38  0804               	movf	4,w
  7653  0B39  00F9               	movwf	??_displayTime+1
  7654  0B3A  3010               	movlw	16
  7655  0B3B  00FA               	movwf	??_displayTime+2
  7656  0B3C                     u3190:	
  7657  0B3C  0878               	movf	??_displayTime,w
  7658  0B3D  0084               	movwf	4
  7659  0B3E  1783               	bsf	3,7	;select IRP bank3
  7660  0B3F  0800               	movf	0,w
  7661  0B40  00FB               	movwf	??_displayTime+3
  7662  0B41  0AF8               	incf	??_displayTime,f
  7663  0B42  0879               	movf	??_displayTime+1,w
  7664  0B43  0084               	movwf	4
  7665  0B44  087B               	movf	??_displayTime+3,w
  7666  0B45  0080               	movwf	0
  7667  0B46  0AF9               	incf	??_displayTime+1,f
  7668  0B47  0BFA               	decfsz	??_displayTime+2,f
  7669  0B48  2B3C               	goto	u3190
  7670  0B49  0008               	return
  7671  0B4A                     __end_of_displayTime:	
  7672                           
  7673                           	psect	text20
  7674  123A                     __ptext20:	
  7675 ;; *************** function _displayTemp *****************
  7676 ;; Defined at:
  7677 ;;		line 169 in file "main.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7691 ;;      Params:         0       0       0       0       0
  7692 ;;      Locals:         0       0       0       0       0
  7693 ;;      Temps:          1       0       0       0       0
  7694 ;;      Totals:         1       0       0       0       0
  7695 ;;Total ram usage:        1 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    3
  7698 ;; This function calls:
  7699 ;;		_LCD_thirdLine
  7700 ;;		_LCD_write
  7701 ;;		_LCD_writeChar
  7702 ;; This function is called by:
  7703 ;;		_main
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           
  7708                           ;psect for function _displayTemp
  7709  123A                     _displayTemp:	
  7710                           
  7711                           ;main.c: 170:         highLimit = dayLimits.highLimit;
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in _displayTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7715  123A  160A  118A  20AD  160A  118A  	fcall	_LCD_thirdLine
  7716                           
  7717                           ;main.c: 171:     }
  7718  123F  1683               	bsf	3,5	;RP0=1, select bank1
  7719  1240  1303               	bcf	3,6	;RP1=0, select bank1
  7720  1241  084E               	movf	_currentTemp^(0+128),w
  7721  1242  3E30               	addlw	48
  7722  1243  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  7723                           
  7724                           ;main.c: 172:     else {
  7725  1248  1683               	bsf	3,5	;RP0=1, select bank1
  7726  1249  1303               	bcf	3,6	;RP1=0, select bank1
  7727  124A  084F               	movf	(_currentTemp^(0+128)+1),w
  7728  124B  3E30               	addlw	48
  7729  124C  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  7730                           
  7731                           ;main.c: 173:         lowLimit = nightLimits.lowLimit;
  7732  1251  302E               	movlw	46
  7733  1252  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  7734                           
  7735                           ;main.c: 174:         low = nightLimits.low;
  7736  1257  1683               	bsf	3,5	;RP0=1, select bank1
  7737  1258  1303               	bcf	3,6	;RP1=0, select bank1
  7738  1259  0850               	movf	(_currentTemp^(0+128)+2),w
  7739  125A  3E30               	addlw	48
  7740  125B  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  7741                           
  7742                           ;main.c: 175:         high = nightLimits.high;
  7743  1260  3043               	movlw	67
  7744  1261  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  7745                           
  7746                           ;main.c: 176:         highLimit = nightLimits.highLimit;
  7747  1266  3005               	movlw	5
  7748  1267  00F8               	movwf	??_displayTemp
  7749  1268  0878               	movf	??_displayTemp,w
  7750  1269  00F3               	movwf	LCD_write@len
  7751  126A  3014               	movlw	(low (((STR_19+11)-__stringbase)| (0+32768)))& (0+255)
  7752  126B  160A  158A  27BB   	fcall	_LCD_write
  7753  126E  0008               	return
  7754  126F                     __end_of_displayTemp:	
  7755                           
  7756                           	psect	text21
  7757  089A                     __ptext21:	
  7758 ;; *************** function _checkTemp *****************
  7759 ;; Defined at:
  7760 ;;		line 180 in file "main.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;  highLimit       2   31[BANK1 ] int 
  7765 ;;  high            2   29[BANK1 ] int 
  7766 ;;  low             2   27[BANK1 ] int 
  7767 ;;  lowLimit        2   25[BANK1 ] int 
  7768 ;;  day             1   33[BANK1 ] _Bool 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7778 ;;      Params:         0       0       0       0       0
  7779 ;;      Locals:         0       0       9       0       0
  7780 ;;      Temps:          0       0       5       0       0
  7781 ;;      Totals:         0       0      14       0       0
  7782 ;;Total ram usage:       14 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    5
  7785 ;; This function calls:
  7786 ;;		_LCD_fourthLine
  7787 ;;		_LCD_write
  7788 ;;		_RTC_isDay
  7789 ;;		_alarmMode
  7790 ;;		_delayLong
  7791 ;; This function is called by:
  7792 ;;		_main
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           
  7797                           ;psect for function _checkTemp
  7798  089A                     _checkTemp:	
  7799                           
  7800                           ;main.c: 181: ;main.c: 185:         delayLong();
  7801                           
  7802                           ;incstack = 0
  7803                           ; Regs used in _checkTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7804  089A  3020               	movlw	RTC_isDay@time& (0+255)
  7805  089B  0084               	movwf	4
  7806  089C  3090               	movlw	low _currentTime
  7807  089D  1683               	bsf	3,5	;RP0=1, select bank1
  7808  089E  1303               	bcf	3,6	;RP1=0, select bank1
  7809  089F  00B4               	movwf	??_checkTemp^(0+128)
  7810  08A0  0804               	movf	4,w
  7811  08A1  00B5               	movwf	(??_checkTemp^(0+128)+1)
  7812  08A2  3010               	movlw	16
  7813  08A3  00B6               	movwf	(??_checkTemp^(0+128)+2)
  7814  08A4                     u3200:	
  7815  08A4  0834               	movf	??_checkTemp^(0+128),w
  7816  08A5  0084               	movwf	4
  7817  08A6  1783               	bsf	3,7	;select IRP bank3
  7818  08A7  0800               	movf	0,w
  7819  08A8  00B7               	movwf	(??_checkTemp^(0+128)+3)
  7820  08A9  0AB4               	incf	??_checkTemp^(0+128),f
  7821  08AA  0835               	movf	(??_checkTemp^(0+128)+1),w
  7822  08AB  0084               	movwf	4
  7823  08AC  1383               	bcf	3,7	;select IRP bank0
  7824  08AD  0837               	movf	(??_checkTemp^(0+128)+3),w
  7825  08AE  0080               	movwf	0
  7826  08AF  0AB5               	incf	(??_checkTemp^(0+128)+1),f
  7827  08B0  0BB6               	decfsz	(??_checkTemp^(0+128)+2),f
  7828  08B1  28A4               	goto	u3200
  7829  08B2  160A  118A  20BB  120A  158A  	fcall	_RTC_isDay
  7830  08B7  1683               	bsf	3,5	;RP0=1, select bank1
  7831  08B8  1303               	bcf	3,6	;RP1=0, select bank1
  7832  08B9  00B8               	movwf	(??_checkTemp+4)^(0+128)
  7833  08BA  0838               	movf	(??_checkTemp+4)^(0+128),w
  7834  08BB  00C1               	movwf	checkTemp@day^(0+128)
  7835                           
  7836                           ;main.c: 187:     }
  7837  08BC  0841               	movf	checkTemp@day^(0+128),w
  7838  08BD  1903               	btfsc	3,2
  7839  08BE  28CF               	goto	l4197
  7840                           
  7841                           ;main.c: 188:     else if (currentTemp.temperature < low) {
  7842  08BF  0866               	movf	(_dayLimits+1)^(0+128),w
  7843  08C0  00BA               	movwf	(checkTemp@lowLimit+1)^(0+128)
  7844  08C1  0865               	movf	_dayLimits^(0+128),w
  7845  08C2  00B9               	movwf	checkTemp@lowLimit^(0+128)
  7846                           
  7847                           ;main.c: 189:         LCD_write("Low - Heating ON", 16);
  7848  08C3  0868               	movf	((_dayLimits+1)^(0+128)+2),w
  7849  08C4  00BC               	movwf	(checkTemp@low+1)^(0+128)
  7850  08C5  0867               	movf	(_dayLimits^(0+128)+2),w
  7851  08C6  00BB               	movwf	checkTemp@low^(0+128)
  7852                           
  7853                           ;main.c: 190:         delayLong();
  7854  08C7  086A               	movf	((_dayLimits+1)^(0+128)+4),w
  7855  08C8  00BE               	movwf	(checkTemp@high+1)^(0+128)
  7856  08C9  0869               	movf	(_dayLimits^(0+128)+4),w
  7857  08CA  00BD               	movwf	checkTemp@high^(0+128)
  7858                           
  7859                           ;main.c: 191:     }
  7860  08CB  086C               	movf	((_dayLimits+1)^(0+128)+6),w
  7861  08CC  00C0               	movwf	(checkTemp@highLimit+1)^(0+128)
  7862  08CD  086B               	movf	(_dayLimits^(0+128)+6),w
  7863  08CE  28FE               	goto	L8
  7864  08CF                     l4197:	
  7865                           ;main.c: 192:     else if (currentTemp.temperature > highLimit) {
  7866                           
  7867                           
  7868                           ;main.c: 194:         LCD_write("TOO HIGH! ALARM!", 16);
  7869  08CF  1683               	bsf	3,5	;RP0=1, select bank3
  7870  08D0  1703               	bsf	3,6	;RP1=1, select bank3
  7871  08D1  0854               	movf	(_nightLimits+1)^(0+384),w
  7872  08D2  1683               	bsf	3,5	;RP0=1, select bank1
  7873  08D3  1303               	bcf	3,6	;RP1=0, select bank1
  7874  08D4  00BA               	movwf	(checkTemp@lowLimit+1)^(0+128)
  7875  08D5  1683               	bsf	3,5	;RP0=1, select bank3
  7876  08D6  1703               	bsf	3,6	;RP1=1, select bank3
  7877  08D7  0853               	movf	_nightLimits^(0+384),w
  7878  08D8  1683               	bsf	3,5	;RP0=1, select bank1
  7879  08D9  1303               	bcf	3,6	;RP1=0, select bank1
  7880  08DA  00B9               	movwf	checkTemp@lowLimit^(0+128)
  7881                           
  7882                           ;main.c: 195:         delayLong();
  7883  08DB  1683               	bsf	3,5	;RP0=1, select bank3
  7884  08DC  1703               	bsf	3,6	;RP1=1, select bank3
  7885  08DD  0856               	movf	((_nightLimits+1)^(0+384)+2),w
  7886  08DE  1683               	bsf	3,5	;RP0=1, select bank1
  7887  08DF  1303               	bcf	3,6	;RP1=0, select bank1
  7888  08E0  00BC               	movwf	(checkTemp@low+1)^(0+128)
  7889  08E1  1683               	bsf	3,5	;RP0=1, select bank3
  7890  08E2  1703               	bsf	3,6	;RP1=1, select bank3
  7891  08E3  0855               	movf	(_nightLimits^(0+384)+2),w
  7892  08E4  1683               	bsf	3,5	;RP0=1, select bank1
  7893  08E5  1303               	bcf	3,6	;RP1=0, select bank1
  7894  08E6  00BB               	movwf	checkTemp@low^(0+128)
  7895                           
  7896                           ;main.c: 196:         alarmMode();
  7897  08E7  1683               	bsf	3,5	;RP0=1, select bank3
  7898  08E8  1703               	bsf	3,6	;RP1=1, select bank3
  7899  08E9  0858               	movf	((_nightLimits+1)^(0+384)+4),w
  7900  08EA  1683               	bsf	3,5	;RP0=1, select bank1
  7901  08EB  1303               	bcf	3,6	;RP1=0, select bank1
  7902  08EC  00BE               	movwf	(checkTemp@high+1)^(0+128)
  7903  08ED  1683               	bsf	3,5	;RP0=1, select bank3
  7904  08EE  1703               	bsf	3,6	;RP1=1, select bank3
  7905  08EF  0857               	movf	(_nightLimits^(0+384)+4),w
  7906  08F0  1683               	bsf	3,5	;RP0=1, select bank1
  7907  08F1  1303               	bcf	3,6	;RP1=0, select bank1
  7908  08F2  00BD               	movwf	checkTemp@high^(0+128)
  7909                           
  7910                           ;main.c: 197:     }
  7911  08F3  1683               	bsf	3,5	;RP0=1, select bank3
  7912  08F4  1703               	bsf	3,6	;RP1=1, select bank3
  7913  08F5  085A               	movf	((_nightLimits+1)^(0+384)+6),w
  7914  08F6  1683               	bsf	3,5	;RP0=1, select bank1
  7915  08F7  1303               	bcf	3,6	;RP1=0, select bank1
  7916  08F8  00C0               	movwf	(checkTemp@highLimit+1)^(0+128)
  7917  08F9  1683               	bsf	3,5	;RP0=1, select bank3
  7918  08FA  1703               	bsf	3,6	;RP1=1, select bank3
  7919  08FB  0859               	movf	(_nightLimits^(0+384)+6),w
  7920  08FC  1683               	bsf	3,5	;RP0=1, select bank1
  7921  08FD  1303               	bcf	3,6	;RP1=0, select bank1
  7922  08FE                     L8:	
  7923  08FE  00BF               	movwf	checkTemp@highLimit^(0+128)
  7924                           
  7925                           ;main.c: 201:     }
  7926  08FF  160A  158A  2670  120A  158A  	fcall	_LCD_fourthLine
  7927                           
  7928                           ;main.c: 203:         LCD_write("Optimal         ", 16);
  7929  0904  1683               	bsf	3,5	;RP0=1, select bank1
  7930  0905  1303               	bcf	3,6	;RP1=0, select bank1
  7931  0906  0852               	movf	((_currentTemp+1)^(0+128)+3),w
  7932  0907  3A80               	xorlw	128
  7933  0908  00B4               	movwf	??_checkTemp^(0+128)
  7934  0909  083A               	movf	(checkTemp@lowLimit+1)^(0+128),w
  7935  090A  3A80               	xorlw	128
  7936  090B  0234               	subwf	??_checkTemp^(0+128),w
  7937  090C  1D03               	skipz
  7938  090D  2910               	goto	u3225
  7939  090E  0839               	movf	checkTemp@lowLimit^(0+128),w
  7940  090F  0251               	subwf	(_currentTemp^(0+128)+3),w
  7941  0910                     u3225:	
  7942  0910  1803               	skipnc
  7943  0911  2927               	goto	l4209
  7944                           
  7945                           ;main.c: 205:     }
  7946  0912  3010               	movlw	16
  7947  0913  1683               	bsf	3,5	;RP0=1, select bank1
  7948  0914  1303               	bcf	3,6	;RP1=0, select bank1
  7949  0915  00B4               	movwf	??_checkTemp^(0+128)
  7950  0916  0834               	movf	??_checkTemp^(0+128),w
  7951  0917  00F3               	movwf	LCD_write@len
  7952  0918  302B               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  7953  0919                     L9:	
  7954  0919  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7955                           
  7956                           ;main.c: 206: 
  7957  091E  160A  158A  270A  120A  158A  	fcall	_delayLong
  7958                           
  7959                           ;main.c: 207: }
  7960  0923  160A  118A  234C   	fcall	_alarmMode
  7961                           
  7962                           ;main.c: 208: 
  7963  0926  0008               	return
  7964  0927                     l4209:	
  7965  0927  1683               	bsf	3,5	;RP0=1, select bank1
  7966  0928  1303               	bcf	3,6	;RP1=0, select bank1
  7967  0929  0852               	movf	((_currentTemp+1)^(0+128)+3),w
  7968  092A  3A80               	xorlw	128
  7969  092B  00B4               	movwf	??_checkTemp^(0+128)
  7970  092C  083C               	movf	(checkTemp@low+1)^(0+128),w
  7971  092D  3A80               	xorlw	128
  7972  092E  0234               	subwf	??_checkTemp^(0+128),w
  7973  092F  1D03               	skipz
  7974  0930  2933               	goto	u3235
  7975  0931  083B               	movf	checkTemp@low^(0+128),w
  7976  0932  0251               	subwf	(_currentTemp^(0+128)+3),w
  7977  0933                     u3235:	
  7978  0933  1803               	skipnc
  7979  0934  2945               	goto	l4215
  7980                           
  7981                           ;main.c: 210: 
  7982  0935  3010               	movlw	16
  7983  0936  1683               	bsf	3,5	;RP0=1, select bank1
  7984  0937  1303               	bcf	3,6	;RP1=0, select bank1
  7985  0938  00B4               	movwf	??_checkTemp^(0+128)
  7986  0939  0834               	movf	??_checkTemp^(0+128),w
  7987  093A  00F3               	movwf	LCD_write@len
  7988  093B  304D               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  7989  093C                     L10:	
  7990  093C  160A  158A  27BB  120A  158A  	fcall	_LCD_write
  7991                           
  7992                           ;main.c: 211:     int alarm = 1;
  7993  0941  160A  158A  270A   	fcall	_delayLong
  7994                           
  7995                           ;main.c: 212:     while (alarm == 1) {
  7996  0944  0008               	return
  7997  0945                     l4215:	
  7998  0945  1683               	bsf	3,5	;RP0=1, select bank1
  7999  0946  1303               	bcf	3,6	;RP1=0, select bank1
  8000  0947  0840               	movf	(checkTemp@highLimit+1)^(0+128),w
  8001  0948  3A80               	xorlw	128
  8002  0949  00B4               	movwf	??_checkTemp^(0+128)
  8003  094A  0852               	movf	((_currentTemp+1)^(0+128)+3),w
  8004  094B  3A80               	xorlw	128
  8005  094C  0234               	subwf	??_checkTemp^(0+128),w
  8006  094D  1D03               	skipz
  8007  094E  2951               	goto	u3245
  8008  094F  0851               	movf	(_currentTemp^(0+128)+3),w
  8009  0950  023F               	subwf	checkTemp@highLimit^(0+128),w
  8010  0951                     u3245:	
  8011  0951  1803               	skipnc
  8012  0952  295B               	goto	l4223
  8013                           
  8014                           ;main.c: 215: 
  8015  0953  3010               	movlw	16
  8016  0954  1683               	bsf	3,5	;RP0=1, select bank1
  8017  0955  1303               	bcf	3,6	;RP1=0, select bank1
  8018  0956  00B4               	movwf	??_checkTemp^(0+128)
  8019  0957  0834               	movf	??_checkTemp^(0+128),w
  8020  0958  00F3               	movwf	LCD_write@len
  8021  0959  303C               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  8022  095A  2919               	goto	L9
  8023  095B                     l4223:	
  8024  095B  1683               	bsf	3,5	;RP0=1, select bank1
  8025  095C  1303               	bcf	3,6	;RP1=0, select bank1
  8026  095D  083E               	movf	(checkTemp@high+1)^(0+128),w
  8027  095E  3A80               	xorlw	128
  8028  095F  00B4               	movwf	??_checkTemp^(0+128)
  8029  0960  0852               	movf	((_currentTemp+1)^(0+128)+3),w
  8030  0961  3A80               	xorlw	128
  8031  0962  0234               	subwf	??_checkTemp^(0+128),w
  8032  0963  1D03               	skipz
  8033  0964  2967               	goto	u3255
  8034  0965  0851               	movf	(_currentTemp^(0+128)+3),w
  8035  0966  023D               	subwf	checkTemp@high^(0+128),w
  8036  0967                     u3255:	
  8037  0967  1803               	skipnc
  8038  0968  2971               	goto	l4229
  8039                           
  8040                           ;main.c: 220:         }
  8041  0969  3010               	movlw	16
  8042  096A  1683               	bsf	3,5	;RP0=1, select bank1
  8043  096B  1303               	bcf	3,6	;RP1=0, select bank1
  8044  096C  00B4               	movwf	??_checkTemp^(0+128)
  8045  096D  0834               	movf	??_checkTemp^(0+128),w
  8046  096E  00F3               	movwf	LCD_write@len
  8047  096F  301A               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  8048  0970  293C               	goto	L10
  8049  0971                     l4229:	
  8050                           
  8051                           ;main.c: 224: void systemReset(void) {
  8052  0971  3010               	movlw	16
  8053  0972  1683               	bsf	3,5	;RP0=1, select bank1
  8054  0973  1303               	bcf	3,6	;RP1=0, select bank1
  8055  0974  00B4               	movwf	??_checkTemp^(0+128)
  8056  0975  0834               	movf	??_checkTemp^(0+128),w
  8057  0976  00F3               	movwf	LCD_write@len
  8058  0977  3009               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  8059  0978  293C               	goto	L10
  8060  0979                     __end_of_checkTemp:	
  8061                           
  8062                           	psect	text22
  8063  1F0A                     __ptext22:	
  8064 ;; *************** function _delayLong *****************
  8065 ;; Defined at:
  8066 ;;		line 272 in file "main.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;		None
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;  i               2    0[COMMON] int 
  8071 ;; Return value:  Size  Location     Type
  8072 ;;                  1    wreg      void 
  8073 ;; Registers used:
  8074 ;;		wreg, status,2, btemp+1
  8075 ;; Tracked objects:
  8076 ;;		On entry : 0/0
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8080 ;;      Params:         0       0       0       0       0
  8081 ;;      Locals:         2       0       0       0       0
  8082 ;;      Temps:          0       0       0       0       0
  8083 ;;      Totals:         2       0       0       0       0
  8084 ;;Total ram usage:        2 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; This function calls:
  8087 ;;		Nothing
  8088 ;; This function is called by:
  8089 ;;		_checkTemp
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           
  8094                           ;psect for function _delayLong
  8095  1F0A                     _delayLong:	
  8096                           
  8097                           ;incstack = 0
  8098                           ; Regs used in _delayLong: [wreg+status,2+btemp+1]
  8099  1F0A  01F0               	clrf	delayLong@i
  8100  1F0B  01F1               	clrf	delayLong@i+1
  8101  1F0C                     l3887:	
  8102  1F0C  3001               	movlw	1
  8103  1F0D  07F0               	addwf	delayLong@i,f
  8104  1F0E  1803               	skipnc
  8105  1F0F  0AF1               	incf	delayLong@i+1,f
  8106  1F10  3000               	movlw	0
  8107  1F11  07F1               	addwf	delayLong@i+1,f
  8108  1F12  0871               	movf	delayLong@i+1,w
  8109  1F13  3A80               	xorlw	128
  8110  1F14  00FF               	movwf	127
  8111  1F15  3093               	movlw	147
  8112  1F16  027F               	subwf	127,w
  8113  1F17  1D03               	skipz
  8114  1F18  2F1B               	goto	u2915
  8115  1F19  3088               	movlw	136
  8116  1F1A  0270               	subwf	delayLong@i,w
  8117  1F1B                     u2915:	
  8118  1F1B  1803               	btfsc	3,0
  8119  1F1C  0008               	return
  8120  1F1D  2F0C               	goto	l3887
  8121  1F1E                     __end_of_delayLong:	
  8122                           
  8123                           	psect	text23
  8124  134C                     __ptext23:	
  8125 ;; *************** function _alarmMode *****************
  8126 ;; Defined at:
  8127 ;;		line 230 in file "main.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  button          2   18[BANK1 ] int 
  8132 ;;  alarm           2   16[BANK1 ] int 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  1    wreg      void 
  8135 ;; Registers used:
  8136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8142 ;;      Params:         0       0       0       0       0
  8143 ;;      Locals:         0       0       4       0       0
  8144 ;;      Temps:          0       0       0       0       0
  8145 ;;      Totals:         0       0       4       0       0
  8146 ;;Total ram usage:        4 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    4
  8149 ;; This function calls:
  8150 ;;		_buzzer_alarmOff
  8151 ;;		_buzzer_alarmOn
  8152 ;;		_matrix_checkButtons
  8153 ;;		_systemReset
  8154 ;; This function is called by:
  8155 ;;		_checkTemp
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           
  8160                           ;psect for function _alarmMode
  8161  134C                     _alarmMode:	
  8162                           
  8163                           ;main.c: 232:     LCD_writeChar('5');
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in _alarmMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8167  134C  3001               	movlw	1
  8168  134D  1683               	bsf	3,5	;RP0=1, select bank1
  8169  134E  1303               	bcf	3,6	;RP1=0, select bank1
  8170  134F  00B0               	movwf	alarmMode@alarm^(0+128)
  8171  1350  3000               	movlw	0
  8172  1351  00B1               	movwf	(alarmMode@alarm^(0+128)+1)
  8173  1352                     l3911:	
  8174                           ;main.c: 233: 
  8175                           
  8176                           
  8177                           ;main.c: 233: 
  8178  1352  0330               	decf	alarmMode@alarm^(0+128),w
  8179  1353  0431               	iorwf	(alarmMode@alarm+1)^(0+128),w
  8180  1354  1D03               	btfss	3,2
  8181  1355  0008               	return
  8182                           
  8183                           ;main.c: 234: 
  8184  1356  160A  158A  26BD  160A  118A  	fcall	_buzzer_alarmOn
  8185                           
  8186                           ;main.c: 235:     currentTime = RTC_getTime();
  8187  135B  160A  118A  25D6  160A  118A  	fcall	_matrix_checkButtons
  8188  1360  0873               	movf	?_matrix_checkButtons+1,w
  8189  1361  1683               	bsf	3,5	;RP0=1, select bank1
  8190  1362  1303               	bcf	3,6	;RP1=0, select bank1
  8191  1363  00B3               	movwf	(alarmMode@button+1)^(0+128)
  8192  1364  0872               	movf	?_matrix_checkButtons,w
  8193  1365  00B2               	movwf	alarmMode@button^(0+128)
  8194                           
  8195                           ;main.c: 237:     char currentSecond = currentTime.sec2;
  8196  1366  3013               	movlw	19
  8197  1367  0632               	xorwf	alarmMode@button^(0+128),w
  8198  1368  0433               	iorwf	(alarmMode@button+1)^(0+128),w
  8199  1369  1903               	btfsc	3,2
  8200  136A  2B79               	goto	l3905
  8201  136B  3010               	movlw	16
  8202  136C  0632               	xorwf	alarmMode@button^(0+128),w
  8203  136D  0433               	iorwf	(alarmMode@button+1)^(0+128),w
  8204  136E  1903               	btfsc	3,2
  8205  136F  2B79               	goto	l3905
  8206  1370  0332               	decf	alarmMode@button^(0+128),w
  8207  1371  0433               	iorwf	(alarmMode@button+1)^(0+128),w
  8208  1372  1903               	btfsc	3,2
  8209  1373  2B79               	goto	l3905
  8210  1374  3004               	movlw	4
  8211  1375  0632               	xorwf	alarmMode@button^(0+128),w
  8212  1376  0433               	iorwf	(alarmMode@button+1)^(0+128),w
  8213  1377  1D03               	btfss	3,2
  8214  1378  2B52               	goto	l3911
  8215  1379                     l3905:	
  8216                           
  8217                           ;main.c: 238:     while (counter != 0)
  8218  1379  160A  158A  266C  160A  118A  	fcall	_buzzer_alarmOff
  8219                           
  8220                           ;main.c: 239:     {
  8221  137E  160A  118A  275A  160A  118A  	fcall	_systemReset
  8222                           
  8223                           ;main.c: 240:         currentTime = RTC_getTime();
  8224  1383  1683               	bsf	3,5	;RP0=1, select bank1
  8225  1384  1303               	bcf	3,6	;RP1=0, select bank1
  8226  1385  01B0               	clrf	alarmMode@alarm^(0+128)
  8227  1386  01B1               	clrf	(alarmMode@alarm+1)^(0+128)
  8228  1387  2B52               	goto	l3911
  8229  1388                     __end_of_alarmMode:	
  8230                           
  8231                           	psect	text24
  8232  175A                     __ptext24:	
  8233 ;; *************** function _systemReset *****************
  8234 ;; Defined at:
  8235 ;;		line 245 in file "main.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;		None
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  counter         2   12[COMMON] int 
  8240 ;;  currentSecon    1   11[COMMON] unsigned char 
  8241 ;; Return value:  Size  Location     Type
  8242 ;;                  1    wreg      void 
  8243 ;; Registers used:
  8244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8245 ;; Tracked objects:
  8246 ;;		On entry : 0/0
  8247 ;;		On exit  : 0/0
  8248 ;;		Unchanged: 0/0
  8249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8250 ;;      Params:         0       0       0       0       0
  8251 ;;      Locals:         3       0       0       0       0
  8252 ;;      Temps:          0       4       0       0       0
  8253 ;;      Totals:         3       4       0       0       0
  8254 ;;Total ram usage:        7 bytes
  8255 ;; Hardware stack levels used:    1
  8256 ;; Hardware stack levels required when called:    3
  8257 ;; This function calls:
  8258 ;;		_LCD_clear
  8259 ;;		_LCD_firstLine
  8260 ;;		_LCD_init
  8261 ;;		_LCD_secondLine
  8262 ;;		_LCD_thirdLine
  8263 ;;		_LCD_write
  8264 ;;		_LCD_writeChar
  8265 ;;		_RTC_getTime
  8266 ;; This function is called by:
  8267 ;;		_alarmMode
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           
  8272                           ;psect for function _systemReset
  8273  175A                     _systemReset:	
  8274                           
  8275                           ;main.c: 246:         }
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in _systemReset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8279  175A  160A  158A  2748  160A  118A  	fcall	_LCD_init
  8280                           
  8281                           ;main.c: 247:     }
  8282  175F  160A  158A  2675  160A  118A  	fcall	_LCD_clear
  8283                           
  8284                           ;main.c: 248:     LCD_clear();
  8285  1764  160A  158A  267A  160A  118A  	fcall	_LCD_firstLine
  8286                           
  8287                           ;main.c: 249: }
  8288  1769  3010               	movlw	16
  8289  176A  1283               	bcf	3,5	;RP0=0, select bank0
  8290  176B  1303               	bcf	3,6	;RP1=0, select bank0
  8291  176C  00E9               	movwf	??_systemReset
  8292  176D  0869               	movf	??_systemReset,w
  8293  176E  00F3               	movwf	LCD_write@len
  8294  176F  305E               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  8295  1770  160A  158A  27BB  160A  118A  	fcall	_LCD_write
  8296                           
  8297                           ;main.c: 250: 
  8298  1775  160A  158A  267F  160A  118A  	fcall	_LCD_secondLine
  8299                           
  8300                           ;main.c: 251: void delayLong() {
  8301  177A  3003               	movlw	3
  8302  177B  1283               	bcf	3,5	;RP0=0, select bank0
  8303  177C  1303               	bcf	3,6	;RP1=0, select bank0
  8304  177D  00E9               	movwf	??_systemReset
  8305  177E  0869               	movf	??_systemReset,w
  8306  177F  00F3               	movwf	LCD_write@len
  8307  1780  3086               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  8308  1781  160A  158A  27BB  160A  118A  	fcall	_LCD_write
  8309                           
  8310                           ;main.c: 252:     int i;
  8311  1786  160A  118A  20AD  160A  118A  	fcall	_LCD_thirdLine
  8312                           
  8313                           ;main.c: 253:     for (i = 0; i < 5000; i++);
  8314  178B  3035               	movlw	53
  8315  178C  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  8316  1791  160A  118A  2402  160A  118A  	fcall	_RTC_getTime
  8317  1796  3090               	movlw	_currentTime& (0+255)
  8318  1797  0084               	movwf	4
  8319  1798  1283               	bcf	3,5	;RP0=0, select bank0
  8320  1799  1303               	bcf	3,6	;RP1=0, select bank0
  8321  179A  3055               	movlw	low ?_RTC_getTime
  8322  179B  00E9               	movwf	??_systemReset
  8323  179C  0804               	movf	4,w
  8324  179D  00EA               	movwf	??_systemReset+1
  8325  179E  3010               	movlw	16
  8326  179F  00EB               	movwf	??_systemReset+2
  8327  17A0                     u2400:	
  8328  17A0  0869               	movf	??_systemReset,w
  8329  17A1  0084               	movwf	4
  8330  17A2  1383               	bcf	3,7	;select IRP bank0
  8331  17A3  0800               	movf	0,w
  8332  17A4  00EC               	movwf	??_systemReset+3
  8333  17A5  0AE9               	incf	??_systemReset,f
  8334  17A6  086A               	movf	??_systemReset+1,w
  8335  17A7  0084               	movwf	4
  8336  17A8  1783               	bsf	3,7	;select IRP bank3
  8337  17A9  086C               	movf	??_systemReset+3,w
  8338  17AA  0080               	movwf	0
  8339  17AB  0AEA               	incf	??_systemReset+1,f
  8340  17AC  0BEB               	decfsz	??_systemReset+2,f
  8341  17AD  2FA0               	goto	u2400
  8342  17AE  3004               	movlw	4
  8343  17AF  00FC               	movwf	systemReset@counter
  8344  17B0  3000               	movlw	0
  8345  17B1  00FD               	movwf	systemReset@counter+1
  8346  17B2  1683               	bsf	3,5	;RP0=1, select bank3
  8347  17B3  1703               	bsf	3,6	;RP1=1, select bank3
  8348  17B4  0811               	movf	(_currentTime^(0+384)+1),w
  8349  17B5  1283               	bcf	3,5	;RP0=0, select bank0
  8350  17B6  1303               	bcf	3,6	;RP1=0, select bank0
  8351  17B7  00E9               	movwf	??_systemReset
  8352  17B8  0869               	movf	??_systemReset,w
  8353  17B9  00FB               	movwf	systemReset@currentSecond
  8354  17BA                     l3627:	
  8355  17BA  087C               	movf	systemReset@counter,w
  8356  17BB  047D               	iorwf	systemReset@counter+1,w
  8357  17BC  1903               	btfsc	3,2
  8358  17BD  2FFC               	goto	l3629
  8359  17BE  160A  118A  2402  160A  118A  	fcall	_RTC_getTime
  8360  17C3  3090               	movlw	_currentTime& (0+255)
  8361  17C4  0084               	movwf	4
  8362  17C5  1283               	bcf	3,5	;RP0=0, select bank0
  8363  17C6  1303               	bcf	3,6	;RP1=0, select bank0
  8364  17C7  3055               	movlw	low ?_RTC_getTime
  8365  17C8  00E9               	movwf	??_systemReset
  8366  17C9  0804               	movf	4,w
  8367  17CA  00EA               	movwf	??_systemReset+1
  8368  17CB  3010               	movlw	16
  8369  17CC  00EB               	movwf	??_systemReset+2
  8370  17CD                     u2410:	
  8371  17CD  0869               	movf	??_systemReset,w
  8372  17CE  0084               	movwf	4
  8373  17CF  1383               	bcf	3,7	;select IRP bank0
  8374  17D0  0800               	movf	0,w
  8375  17D1  00EC               	movwf	??_systemReset+3
  8376  17D2  0AE9               	incf	??_systemReset,f
  8377  17D3  086A               	movf	??_systemReset+1,w
  8378  17D4  0084               	movwf	4
  8379  17D5  1783               	bsf	3,7	;select IRP bank3
  8380  17D6  086C               	movf	??_systemReset+3,w
  8381  17D7  0080               	movwf	0
  8382  17D8  0AEA               	incf	??_systemReset+1,f
  8383  17D9  0BEB               	decfsz	??_systemReset+2,f
  8384  17DA  2FCD               	goto	u2410
  8385  17DB  1683               	bsf	3,5	;RP0=1, select bank3
  8386  17DC  1703               	bsf	3,6	;RP1=1, select bank3
  8387  17DD  0811               	movf	(_currentTime^(0+384)+1),w
  8388  17DE  067B               	xorwf	systemReset@currentSecond,w
  8389  17DF  1903               	skipnz
  8390  17E0  2FBA               	goto	l3627
  8391  17E1  160A  118A  20AD  160A  118A  	fcall	_LCD_thirdLine
  8392  17E6  087C               	movf	systemReset@counter,w
  8393  17E7  3E30               	addlw	48
  8394  17E8  160A  158A  277C  160A  118A  	fcall	_LCD_writeChar
  8395  17ED  1683               	bsf	3,5	;RP0=1, select bank3
  8396  17EE  1703               	bsf	3,6	;RP1=1, select bank3
  8397  17EF  0811               	movf	(_currentTime^(0+384)+1),w
  8398  17F0  1283               	bcf	3,5	;RP0=0, select bank0
  8399  17F1  1303               	bcf	3,6	;RP1=0, select bank0
  8400  17F2  00E9               	movwf	??_systemReset
  8401  17F3  0869               	movf	??_systemReset,w
  8402  17F4  00FB               	movwf	systemReset@currentSecond
  8403  17F5  30FF               	movlw	255
  8404  17F6  07FC               	addwf	systemReset@counter,f
  8405  17F7  1803               	skipnc
  8406  17F8  0AFD               	incf	systemReset@counter+1,f
  8407  17F9  30FF               	movlw	255
  8408  17FA  07FD               	addwf	systemReset@counter+1,f
  8409  17FB  2FBA               	goto	l3627
  8410  17FC                     l3629:	
  8411  17FC  160A  158A  2675   	fcall	_LCD_clear
  8412  17FF  0008               	return
  8413  1800                     __end_of_systemReset:	
  8414                           
  8415                           	psect	text25
  8416  1402                     __ptext25:	
  8417 ;; *************** function _RTC_getTime *****************
  8418 ;; Defined at:
  8419 ;;		line 61 in file "RTC.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;		None
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;  t              16    0[BANK1 ] struct Time
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  16   53[BANK0 ] struct Time
  8426 ;; Registers used:
  8427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8433 ;;      Params:         0      16       0       0       0
  8434 ;;      Locals:         0       0      16       0       0
  8435 ;;      Temps:          0       4       0       0       0
  8436 ;;      Totals:         0      20      16       0       0
  8437 ;;Total ram usage:       36 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    2
  8440 ;; This function calls:
  8441 ;;		_RTC_ds1302_init
  8442 ;;		_RTC_init
  8443 ;;		_RTC_readClock
  8444 ;;		_RTC_splitTime
  8445 ;; This function is called by:
  8446 ;;		_main
  8447 ;;		_systemReset
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _RTC_getTime
  8453  1402                     _RTC_getTime:	
  8454                           
  8455                           ;RTC.c: 62:     RTC_init();
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in _RTC_getTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8459  1402  160A  158A  268B  160A  118A  	fcall	_RTC_init
  8460                           
  8461                           ;RTC.c: 63:     RTC_ds1302_init();
  8462  1407  160A  158A  26CF  160A  118A  	fcall	_RTC_ds1302_init
  8463                           
  8464                           ;RTC.c: 64:     RTC_readClock();
  8465  140C  160A  118A  2178  160A  118A  	fcall	_RTC_readClock
  8466                           
  8467                           ;RTC.c: 65:     struct Time t = RTC_splitTime();
  8468  1411  120A  158A  234A  160A  118A  	fcall	_RTC_splitTime
  8469  1416  30A0               	movlw	RTC_getTime@t& (0+255)
  8470  1417  0084               	movwf	4
  8471  1418  1283               	bcf	3,5	;RP0=0, select bank0
  8472  1419  1303               	bcf	3,6	;RP1=0, select bank0
  8473  141A  3020               	movlw	low ?_RTC_splitTime
  8474  141B  00E5               	movwf	??_RTC_getTime
  8475  141C  0804               	movf	4,w
  8476  141D  00E6               	movwf	??_RTC_getTime+1
  8477  141E  3010               	movlw	16
  8478  141F  00E7               	movwf	??_RTC_getTime+2
  8479  1420                     u2240:	
  8480  1420  0865               	movf	??_RTC_getTime,w
  8481  1421  0084               	movwf	4
  8482  1422  1383               	bcf	3,7	;select IRP bank0
  8483  1423  0800               	movf	0,w
  8484  1424  00E8               	movwf	??_RTC_getTime+3
  8485  1425  0AE5               	incf	??_RTC_getTime,f
  8486  1426  0866               	movf	??_RTC_getTime+1,w
  8487  1427  0084               	movwf	4
  8488  1428  0868               	movf	??_RTC_getTime+3,w
  8489  1429  0080               	movwf	0
  8490  142A  0AE6               	incf	??_RTC_getTime+1,f
  8491  142B  0BE7               	decfsz	??_RTC_getTime+2,f
  8492  142C  2C20               	goto	u2240
  8493                           
  8494                           ;RTC.c: 66:     return t;
  8495  142D  3055               	movlw	?_RTC_getTime& (0+255)
  8496  142E  0084               	movwf	4
  8497  142F  30A0               	movlw	low RTC_getTime@t
  8498  1430  00E5               	movwf	??_RTC_getTime
  8499  1431  0804               	movf	4,w
  8500  1432  00E6               	movwf	??_RTC_getTime+1
  8501  1433  3010               	movlw	16
  8502  1434  00E7               	movwf	??_RTC_getTime+2
  8503  1435                     u2250:	
  8504  1435  0865               	movf	??_RTC_getTime,w
  8505  1436  0084               	movwf	4
  8506  1437  1383               	bcf	3,7	;select IRP bank1
  8507  1438  0800               	movf	0,w
  8508  1439  00E8               	movwf	??_RTC_getTime+3
  8509  143A  0AE5               	incf	??_RTC_getTime,f
  8510  143B  0866               	movf	??_RTC_getTime+1,w
  8511  143C  0084               	movwf	4
  8512  143D  0868               	movf	??_RTC_getTime+3,w
  8513  143E  0080               	movwf	0
  8514  143F  0AE6               	incf	??_RTC_getTime+1,f
  8515  1440  0BE7               	decfsz	??_RTC_getTime+2,f
  8516  1441  2C35               	goto	u2250
  8517  1442  0008               	return
  8518  1443                     __end_of_RTC_getTime:	
  8519                           
  8520                           	psect	text26
  8521  0B4A                     __ptext26:	
  8522 ;; *************** function _RTC_splitTime *****************
  8523 ;; Defined at:
  8524 ;;		line 69 in file "RTC.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  t              16   37[BANK0 ] struct Time
  8529 ;;  year            1   36[BANK0 ] PTR unsigned char 
  8530 ;;		 -> RTC_seperateNibbles@dataSplit(2), 
  8531 ;;  week            1   35[BANK0 ] PTR unsigned char 
  8532 ;;		 -> RTC_seperateNibbles@dataSplit(2), 
  8533 ;;  month           1   34[BANK0 ] PTR unsigned char 
  8534 ;;		 -> RTC_seperateNibbles@dataSplit(2), 
  8535 ;;  day             1   33[BANK0 ] PTR unsigned char 
  8536 ;;		 -> RTC_seperateNibbles@dataSplit(2), 
  8537 ;;  hour            1   32[BANK0 ] PTR unsigned char 
  8538 ;;		 -> RTC_seperateNibbles@dataSplit(2), 
  8539 ;;  min             1   31[BANK0 ] PTR unsigned char 
  8540 ;;		 -> RTC_seperateNibbles@dataSplit(2), 
  8541 ;;  sec             1   30[BANK0 ] PTR unsigned char 
  8542 ;;		 -> RTC_seperateNibbles@dataSplit(2), 
  8543 ;;  year2           1   29[BANK0 ] unsigned char 
  8544 ;;  year1           1   28[BANK0 ] unsigned char 
  8545 ;;  week2           1   27[BANK0 ] unsigned char 
  8546 ;;  week1           1   26[BANK0 ] unsigned char 
  8547 ;;  month2          1   25[BANK0 ] unsigned char 
  8548 ;;  month1          1   24[BANK0 ] unsigned char 
  8549 ;;  day2            1   23[BANK0 ] unsigned char 
  8550 ;;  day1            1   22[BANK0 ] unsigned char 
  8551 ;;  hour2           1   21[BANK0 ] unsigned char 
  8552 ;;  hour1           1   20[BANK0 ] unsigned char 
  8553 ;;  min2            1   19[BANK0 ] unsigned char 
  8554 ;;  min1            1   18[BANK0 ] unsigned char 
  8555 ;;  sec2            1   17[BANK0 ] unsigned char 
  8556 ;;  sec1            1   16[BANK0 ] unsigned char 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  16    0[BANK0 ] struct Time
  8559 ;; Registers used:
  8560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8566 ;;      Params:         0      16       0       0       0
  8567 ;;      Locals:         0      37       0       0       0
  8568 ;;      Temps:          4       0       0       0       0
  8569 ;;      Totals:         4      53       0       0       0
  8570 ;;Total ram usage:       57 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    1
  8573 ;; This function calls:
  8574 ;;		_RTC_seperateNibbles
  8575 ;; This function is called by:
  8576 ;;		_RTC_getTime
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           
  8581                           ;psect for function _RTC_splitTime
  8582  0B4A                     _RTC_splitTime:	
  8583                           
  8584                           ;RTC.c: 70:     char *sec = RTC_seperateNibbles(getTable[0]);
  8585                           
  8586                           ;incstack = 0
  8587                           ; Regs used in _RTC_splitTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8588  0B4A  1683               	bsf	3,5	;RP0=1, select bank3
  8589  0B4B  1703               	bsf	3,6	;RP1=1, select bank3
  8590  0B4C  0828               	movf	_getTable^(0+384),w
  8591  0B4D  160A  158A  27DD  120A  158A  	fcall	_RTC_seperateNibbles
  8592  0B52  00F7               	movwf	??_RTC_splitTime
  8593  0B53  0877               	movf	??_RTC_splitTime,w
  8594  0B54  1283               	bcf	3,5	;RP0=0, select bank0
  8595  0B55  1303               	bcf	3,6	;RP1=0, select bank0
  8596  0B56  00BE               	movwf	RTC_splitTime@sec
  8597                           
  8598                           ;RTC.c: 71:     char sec1 = *sec;
  8599  0B57  083E               	movf	RTC_splitTime@sec,w
  8600  0B58  0084               	movwf	4
  8601  0B59  0800               	movf	0,w
  8602  0B5A  00F7               	movwf	??_RTC_splitTime
  8603  0B5B  0877               	movf	??_RTC_splitTime,w
  8604  0B5C  00B0               	movwf	RTC_splitTime@sec1
  8605                           
  8606                           ;RTC.c: 72:     char sec2 = *(sec + 1);
  8607  0B5D  0A3E               	incf	RTC_splitTime@sec,w
  8608  0B5E  0084               	movwf	4
  8609  0B5F  0800               	movf	0,w
  8610  0B60  00F7               	movwf	??_RTC_splitTime
  8611  0B61  0877               	movf	??_RTC_splitTime,w
  8612  0B62  00B1               	movwf	RTC_splitTime@sec2
  8613                           
  8614                           ;RTC.c: 74:     char *min = RTC_seperateNibbles(getTable[1]);
  8615  0B63  1683               	bsf	3,5	;RP0=1, select bank3
  8616  0B64  1703               	bsf	3,6	;RP1=1, select bank3
  8617  0B65  0829               	movf	(_getTable^(0+384)+1),w
  8618  0B66  160A  158A  27DD  120A  158A  	fcall	_RTC_seperateNibbles
  8619  0B6B  00F7               	movwf	??_RTC_splitTime
  8620  0B6C  0877               	movf	??_RTC_splitTime,w
  8621  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  8622  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  8623  0B6F  00BF               	movwf	RTC_splitTime@min
  8624                           
  8625                           ;RTC.c: 75:     char min1 = *min;
  8626  0B70  083F               	movf	RTC_splitTime@min,w
  8627  0B71  0084               	movwf	4
  8628  0B72  0800               	movf	0,w
  8629  0B73  00F7               	movwf	??_RTC_splitTime
  8630  0B74  0877               	movf	??_RTC_splitTime,w
  8631  0B75  00B2               	movwf	RTC_splitTime@min1
  8632                           
  8633                           ;RTC.c: 76:     char min2 = *(min + 1);
  8634  0B76  0A3F               	incf	RTC_splitTime@min,w
  8635  0B77  0084               	movwf	4
  8636  0B78  0800               	movf	0,w
  8637  0B79  00F7               	movwf	??_RTC_splitTime
  8638  0B7A  0877               	movf	??_RTC_splitTime,w
  8639  0B7B  00B3               	movwf	RTC_splitTime@min2
  8640                           
  8641                           ;RTC.c: 78:     char *hour = RTC_seperateNibbles(getTable[2]);
  8642  0B7C  1683               	bsf	3,5	;RP0=1, select bank3
  8643  0B7D  1703               	bsf	3,6	;RP1=1, select bank3
  8644  0B7E  082A               	movf	(_getTable^(0+384)+2),w
  8645  0B7F  160A  158A  27DD  120A  158A  	fcall	_RTC_seperateNibbles
  8646  0B84  00F7               	movwf	??_RTC_splitTime
  8647  0B85  0877               	movf	??_RTC_splitTime,w
  8648  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  8649  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  8650  0B88  00C0               	movwf	RTC_splitTime@hour
  8651                           
  8652                           ;RTC.c: 79:     char hour1 = *hour;
  8653  0B89  0840               	movf	RTC_splitTime@hour,w
  8654  0B8A  0084               	movwf	4
  8655  0B8B  0800               	movf	0,w
  8656  0B8C  00F7               	movwf	??_RTC_splitTime
  8657  0B8D  0877               	movf	??_RTC_splitTime,w
  8658  0B8E  00B4               	movwf	RTC_splitTime@hour1
  8659                           
  8660                           ;RTC.c: 80:     char hour2 = *(hour + 1);
  8661  0B8F  0A40               	incf	RTC_splitTime@hour,w
  8662  0B90  0084               	movwf	4
  8663  0B91  0800               	movf	0,w
  8664  0B92  00F7               	movwf	??_RTC_splitTime
  8665  0B93  0877               	movf	??_RTC_splitTime,w
  8666  0B94  00B5               	movwf	RTC_splitTime@hour2
  8667                           
  8668                           ;RTC.c: 82:     char *day = RTC_seperateNibbles(getTable[3]);
  8669  0B95  1683               	bsf	3,5	;RP0=1, select bank3
  8670  0B96  1703               	bsf	3,6	;RP1=1, select bank3
  8671  0B97  082B               	movf	(_getTable^(0+384)+3),w
  8672  0B98  160A  158A  27DD  120A  158A  	fcall	_RTC_seperateNibbles
  8673  0B9D  00F7               	movwf	??_RTC_splitTime
  8674  0B9E  0877               	movf	??_RTC_splitTime,w
  8675  0B9F  1283               	bcf	3,5	;RP0=0, select bank0
  8676  0BA0  1303               	bcf	3,6	;RP1=0, select bank0
  8677  0BA1  00C1               	movwf	RTC_splitTime@day
  8678                           
  8679                           ;RTC.c: 83:     char day1 = *day;
  8680  0BA2  0841               	movf	RTC_splitTime@day,w
  8681  0BA3  0084               	movwf	4
  8682  0BA4  0800               	movf	0,w
  8683  0BA5  00F7               	movwf	??_RTC_splitTime
  8684  0BA6  0877               	movf	??_RTC_splitTime,w
  8685  0BA7  00B6               	movwf	RTC_splitTime@day1
  8686                           
  8687                           ;RTC.c: 84:     char day2 = *(day + 1);
  8688  0BA8  0A41               	incf	RTC_splitTime@day,w
  8689  0BA9  0084               	movwf	4
  8690  0BAA  0800               	movf	0,w
  8691  0BAB  00F7               	movwf	??_RTC_splitTime
  8692  0BAC  0877               	movf	??_RTC_splitTime,w
  8693  0BAD  00B7               	movwf	RTC_splitTime@day2
  8694                           
  8695                           ;RTC.c: 86:     char *month = RTC_seperateNibbles(getTable[4]);
  8696  0BAE  1683               	bsf	3,5	;RP0=1, select bank3
  8697  0BAF  1703               	bsf	3,6	;RP1=1, select bank3
  8698  0BB0  082C               	movf	(_getTable^(0+384)+4),w
  8699  0BB1  160A  158A  27DD  120A  158A  	fcall	_RTC_seperateNibbles
  8700  0BB6  00F7               	movwf	??_RTC_splitTime
  8701  0BB7  0877               	movf	??_RTC_splitTime,w
  8702  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  8703  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  8704  0BBA  00C2               	movwf	RTC_splitTime@month
  8705                           
  8706                           ;RTC.c: 87:     char month1 = *month;
  8707  0BBB  0842               	movf	RTC_splitTime@month,w
  8708  0BBC  0084               	movwf	4
  8709  0BBD  0800               	movf	0,w
  8710  0BBE  00F7               	movwf	??_RTC_splitTime
  8711  0BBF  0877               	movf	??_RTC_splitTime,w
  8712  0BC0  00B8               	movwf	RTC_splitTime@month1
  8713                           
  8714                           ;RTC.c: 88:     char month2 = *(month + 1);
  8715  0BC1  0A42               	incf	RTC_splitTime@month,w
  8716  0BC2  0084               	movwf	4
  8717  0BC3  0800               	movf	0,w
  8718  0BC4  00F7               	movwf	??_RTC_splitTime
  8719  0BC5  0877               	movf	??_RTC_splitTime,w
  8720  0BC6  00B9               	movwf	RTC_splitTime@month2
  8721                           
  8722                           ;RTC.c: 90:     char *week = RTC_seperateNibbles(getTable[5]);
  8723  0BC7  1683               	bsf	3,5	;RP0=1, select bank3
  8724  0BC8  1703               	bsf	3,6	;RP1=1, select bank3
  8725  0BC9  082D               	movf	(_getTable^(0+384)+5),w
  8726  0BCA  160A  158A  27DD  120A  158A  	fcall	_RTC_seperateNibbles
  8727  0BCF  00F7               	movwf	??_RTC_splitTime
  8728  0BD0  0877               	movf	??_RTC_splitTime,w
  8729  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  8730  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  8731  0BD3  00C3               	movwf	RTC_splitTime@week
  8732                           
  8733                           ;RTC.c: 91:     char week1 = *week;
  8734  0BD4  0843               	movf	RTC_splitTime@week,w
  8735  0BD5  0084               	movwf	4
  8736  0BD6  0800               	movf	0,w
  8737  0BD7  00F7               	movwf	??_RTC_splitTime
  8738  0BD8  0877               	movf	??_RTC_splitTime,w
  8739  0BD9  00BA               	movwf	RTC_splitTime@week1
  8740                           
  8741                           ;RTC.c: 92:     char week2 = *(week + 1);
  8742  0BDA  0A43               	incf	RTC_splitTime@week,w
  8743  0BDB  0084               	movwf	4
  8744  0BDC  0800               	movf	0,w
  8745  0BDD  00F7               	movwf	??_RTC_splitTime
  8746  0BDE  0877               	movf	??_RTC_splitTime,w
  8747  0BDF  00BB               	movwf	RTC_splitTime@week2
  8748                           
  8749                           ;RTC.c: 94:     char *year = RTC_seperateNibbles(getTable[6]);
  8750  0BE0  1683               	bsf	3,5	;RP0=1, select bank3
  8751  0BE1  1703               	bsf	3,6	;RP1=1, select bank3
  8752  0BE2  082E               	movf	(_getTable^(0+384)+6),w
  8753  0BE3  160A  158A  27DD  120A  158A  	fcall	_RTC_seperateNibbles
  8754  0BE8  00F7               	movwf	??_RTC_splitTime
  8755  0BE9  0877               	movf	??_RTC_splitTime,w
  8756  0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  8757  0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  8758  0BEC  00C4               	movwf	RTC_splitTime@year
  8759                           
  8760                           ;RTC.c: 95:     char year1 = *year;
  8761  0BED  0844               	movf	RTC_splitTime@year,w
  8762  0BEE  0084               	movwf	4
  8763  0BEF  0800               	movf	0,w
  8764  0BF0  00F7               	movwf	??_RTC_splitTime
  8765  0BF1  0877               	movf	??_RTC_splitTime,w
  8766  0BF2  00BC               	movwf	RTC_splitTime@year1
  8767                           
  8768                           ;RTC.c: 96:     char year2 = *(year + 1);
  8769  0BF3  0A44               	incf	RTC_splitTime@year,w
  8770  0BF4  0084               	movwf	4
  8771  0BF5  0800               	movf	0,w
  8772  0BF6  00F7               	movwf	??_RTC_splitTime
  8773  0BF7  0877               	movf	??_RTC_splitTime,w
  8774  0BF8  00BD               	movwf	RTC_splitTime@year2
  8775                           
  8776                           ;RTC.c: 98:     struct Time t = {sec1, sec2, min1, min2, hour1,hour2,day1,day2,month1,mo
      +                          nth2,week1,week2,year1,year2,1};
  8777  0BF9  3045               	movlw	RTC_splitTime@t& (0+255)
  8778  0BFA  0084               	movwf	4
  8779  0BFB  3020               	movlw	low RTC_splitTime@F988
  8780  0BFC  00F7               	movwf	??_RTC_splitTime
  8781  0BFD  0804               	movf	4,w
  8782  0BFE  00F8               	movwf	??_RTC_splitTime+1
  8783  0BFF  3010               	movlw	16
  8784  0C00  00F9               	movwf	??_RTC_splitTime+2
  8785  0C01                     u2180:	
  8786  0C01  0877               	movf	??_RTC_splitTime,w
  8787  0C02  0084               	movwf	4
  8788  0C03  1783               	bsf	3,7	;select IRP bank2
  8789  0C04  0800               	movf	0,w
  8790  0C05  00FA               	movwf	??_RTC_splitTime+3
  8791  0C06  0AF7               	incf	??_RTC_splitTime,f
  8792  0C07  0878               	movf	??_RTC_splitTime+1,w
  8793  0C08  0084               	movwf	4
  8794  0C09  1383               	bcf	3,7	;select IRP bank0
  8795  0C0A  087A               	movf	??_RTC_splitTime+3,w
  8796  0C0B  0080               	movwf	0
  8797  0C0C  0AF8               	incf	??_RTC_splitTime+1,f
  8798  0C0D  0BF9               	decfsz	??_RTC_splitTime+2,f
  8799  0C0E  2C01               	goto	u2180
  8800  0C0F  0830               	movf	RTC_splitTime@sec1,w
  8801  0C10  00F7               	movwf	??_RTC_splitTime
  8802  0C11  0877               	movf	??_RTC_splitTime,w
  8803  0C12  00C5               	movwf	RTC_splitTime@t
  8804  0C13  0831               	movf	RTC_splitTime@sec2,w
  8805  0C14  00F7               	movwf	??_RTC_splitTime
  8806  0C15  0877               	movf	??_RTC_splitTime,w
  8807  0C16  00C6               	movwf	RTC_splitTime@t+1
  8808  0C17  0832               	movf	RTC_splitTime@min1,w
  8809  0C18  00F7               	movwf	??_RTC_splitTime
  8810  0C19  0877               	movf	??_RTC_splitTime,w
  8811  0C1A  00C7               	movwf	RTC_splitTime@t+2
  8812  0C1B  0833               	movf	RTC_splitTime@min2,w
  8813  0C1C  00F7               	movwf	??_RTC_splitTime
  8814  0C1D  0877               	movf	??_RTC_splitTime,w
  8815  0C1E  00C8               	movwf	RTC_splitTime@t+3
  8816  0C1F  0834               	movf	RTC_splitTime@hour1,w
  8817  0C20  00F7               	movwf	??_RTC_splitTime
  8818  0C21  0877               	movf	??_RTC_splitTime,w
  8819  0C22  00C9               	movwf	RTC_splitTime@t+4
  8820  0C23  0835               	movf	RTC_splitTime@hour2,w
  8821  0C24  00F7               	movwf	??_RTC_splitTime
  8822  0C25  0877               	movf	??_RTC_splitTime,w
  8823  0C26  00CA               	movwf	RTC_splitTime@t+5
  8824  0C27  0836               	movf	RTC_splitTime@day1,w
  8825  0C28  00F7               	movwf	??_RTC_splitTime
  8826  0C29  0877               	movf	??_RTC_splitTime,w
  8827  0C2A  00CB               	movwf	RTC_splitTime@t+6
  8828  0C2B  0837               	movf	RTC_splitTime@day2,w
  8829  0C2C  00F7               	movwf	??_RTC_splitTime
  8830  0C2D  0877               	movf	??_RTC_splitTime,w
  8831  0C2E  00CC               	movwf	RTC_splitTime@t+7
  8832  0C2F  0838               	movf	RTC_splitTime@month1,w
  8833  0C30  00F7               	movwf	??_RTC_splitTime
  8834  0C31  0877               	movf	??_RTC_splitTime,w
  8835  0C32  00CD               	movwf	RTC_splitTime@t+8
  8836  0C33  0839               	movf	RTC_splitTime@month2,w
  8837  0C34  00F7               	movwf	??_RTC_splitTime
  8838  0C35  0877               	movf	??_RTC_splitTime,w
  8839  0C36  00CE               	movwf	RTC_splitTime@t+9
  8840  0C37  083A               	movf	RTC_splitTime@week1,w
  8841  0C38  00F7               	movwf	??_RTC_splitTime
  8842  0C39  0877               	movf	??_RTC_splitTime,w
  8843  0C3A  00CF               	movwf	RTC_splitTime@t+10
  8844  0C3B  083B               	movf	RTC_splitTime@week2,w
  8845  0C3C  00F7               	movwf	??_RTC_splitTime
  8846  0C3D  0877               	movf	??_RTC_splitTime,w
  8847  0C3E  00D0               	movwf	RTC_splitTime@t+11
  8848  0C3F  083C               	movf	RTC_splitTime@year1,w
  8849  0C40  00F7               	movwf	??_RTC_splitTime
  8850  0C41  0877               	movf	??_RTC_splitTime,w
  8851  0C42  00D1               	movwf	RTC_splitTime@t+12
  8852  0C43  083D               	movf	RTC_splitTime@year2,w
  8853  0C44  00F7               	movwf	??_RTC_splitTime
  8854  0C45  0877               	movf	??_RTC_splitTime,w
  8855  0C46  00D2               	movwf	RTC_splitTime@t+13
  8856  0C47  3001               	movlw	1
  8857  0C48  00D3               	movwf	RTC_splitTime@t+14
  8858  0C49  3000               	movlw	0
  8859  0C4A  00D4               	movwf	RTC_splitTime@t+15
  8860                           
  8861                           ;RTC.c: 99:     return t;
  8862  0C4B  3020               	movlw	?_RTC_splitTime& (0+255)
  8863  0C4C  0084               	movwf	4
  8864  0C4D  3045               	movlw	low RTC_splitTime@t
  8865  0C4E  00F7               	movwf	??_RTC_splitTime
  8866  0C4F  0804               	movf	4,w
  8867  0C50  00F8               	movwf	??_RTC_splitTime+1
  8868  0C51  3010               	movlw	16
  8869  0C52  00F9               	movwf	??_RTC_splitTime+2
  8870  0C53                     u2190:	
  8871  0C53  0877               	movf	??_RTC_splitTime,w
  8872  0C54  0084               	movwf	4
  8873  0C55  1383               	bcf	3,7	;select IRP bank0
  8874  0C56  0800               	movf	0,w
  8875  0C57  00FA               	movwf	??_RTC_splitTime+3
  8876  0C58  0AF7               	incf	??_RTC_splitTime,f
  8877  0C59  0878               	movf	??_RTC_splitTime+1,w
  8878  0C5A  0084               	movwf	4
  8879  0C5B  087A               	movf	??_RTC_splitTime+3,w
  8880  0C5C  0080               	movwf	0
  8881  0C5D  0AF8               	incf	??_RTC_splitTime+1,f
  8882  0C5E  0BF9               	decfsz	??_RTC_splitTime+2,f
  8883  0C5F  2C53               	goto	u2190
  8884  0C60  0008               	return
  8885  0C61                     __end_of_RTC_splitTime:	
  8886                           
  8887                           	psect	text27
  8888  1FDD                     __ptext27:	
  8889 ;; *************** function _RTC_seperateNibbles *****************
  8890 ;; Defined at:
  8891 ;;		line 103 in file "RTC.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  hex             1    wreg     unsigned char 
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  hex             1    3[COMMON] unsigned char 
  8896 ;;  dataSplit       2    5[COMMON] unsigned char [2]
  8897 ;;  firstByte       1    4[COMMON] unsigned char 
  8898 ;;  secondByte      1    2[COMMON] unsigned char 
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      PTR unsigned char 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2, status,0
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8908 ;;      Params:         0       0       0       0       0
  8909 ;;      Locals:         5       0       0       0       0
  8910 ;;      Temps:          2       0       0       0       0
  8911 ;;      Totals:         7       0       0       0       0
  8912 ;;Total ram usage:        7 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; This function calls:
  8915 ;;		Nothing
  8916 ;; This function is called by:
  8917 ;;		_RTC_splitTime
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           
  8922                           ;psect for function _RTC_seperateNibbles
  8923  1FDD                     _RTC_seperateNibbles:	
  8924                           
  8925                           ;incstack = 0
  8926                           ; Regs used in _RTC_seperateNibbles: [wreg+status,2+status,0]
  8927                           ;RTC_seperateNibbles@hex stored from wreg
  8928  1FDD  00F3               	movwf	RTC_seperateNibbles@hex
  8929                           
  8930                           ;RTC.c: 104:     char firstByte, secondByte;;RTC.c: 106:     secondByte = hex & 0x0F;
  8931  1FDE  0873               	movf	RTC_seperateNibbles@hex,w
  8932  1FDF  390F               	andlw	15
  8933  1FE0  00F0               	movwf	??_RTC_seperateNibbles
  8934  1FE1  0870               	movf	??_RTC_seperateNibbles,w
  8935  1FE2  00F2               	movwf	RTC_seperateNibbles@secondByte
  8936                           
  8937                           ;RTC.c: 107:     firstByte = hex & 0xF0;
  8938  1FE3  0873               	movf	RTC_seperateNibbles@hex,w
  8939  1FE4  39F0               	andlw	240
  8940  1FE5  00F0               	movwf	??_RTC_seperateNibbles
  8941  1FE6  0870               	movf	??_RTC_seperateNibbles,w
  8942  1FE7  00F4               	movwf	RTC_seperateNibbles@firstByte
  8943                           
  8944                           ;RTC.c: 108:     firstByte = firstByte >>4;
  8945  1FE8  0874               	movf	RTC_seperateNibbles@firstByte,w
  8946  1FE9  00F0               	movwf	??_RTC_seperateNibbles
  8947  1FEA  3004               	movlw	4
  8948  1FEB                     u2125:	
  8949  1FEB  1003               	clrc
  8950  1FEC  0CF0               	rrf	??_RTC_seperateNibbles,f
  8951  1FED  3EFF               	addlw	-1
  8952  1FEE  1D03               	skipz
  8953  1FEF  2FEB               	goto	u2125
  8954  1FF0  0870               	movf	??_RTC_seperateNibbles,w
  8955  1FF1  00F1               	movwf	??_RTC_seperateNibbles+1
  8956  1FF2  0871               	movf	??_RTC_seperateNibbles+1,w
  8957  1FF3  00F4               	movwf	RTC_seperateNibbles@firstByte
  8958                           
  8959                           ;RTC.c: 109:     char dataSplit[] = {firstByte, secondByte};
  8960  1FF4  01F5               	clrf	RTC_seperateNibbles@dataSplit
  8961  1FF5  01F6               	clrf	RTC_seperateNibbles@dataSplit+1
  8962  1FF6  0874               	movf	RTC_seperateNibbles@firstByte,w
  8963  1FF7  00F0               	movwf	??_RTC_seperateNibbles
  8964  1FF8  0870               	movf	??_RTC_seperateNibbles,w
  8965  1FF9  00F5               	movwf	RTC_seperateNibbles@dataSplit
  8966  1FFA  0872               	movf	RTC_seperateNibbles@secondByte,w
  8967  1FFB  00F0               	movwf	??_RTC_seperateNibbles
  8968  1FFC  0870               	movf	??_RTC_seperateNibbles,w
  8969  1FFD  00F6               	movwf	RTC_seperateNibbles@dataSplit+1
  8970                           
  8971                           ;RTC.c: 110:     return dataSplit;
  8972  1FFE  3075               	movlw	(low (RTC_seperateNibbles@dataSplit| 0))& (0+255)
  8973  1FFF  0008               	return
  8974  2000                     __end_of_RTC_seperateNibbles:	
  8975                           
  8976                           	psect	text28
  8977  1178                     __ptext28:	
  8978 ;; *************** function _RTC_readClock *****************
  8979 ;; Defined at:
  8980 ;;		line 204 in file "RTC.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;		None
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;  i               2    6[COMMON] int 
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  1    wreg      void 
  8987 ;; Registers used:
  8988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8994 ;;      Params:         0       0       0       0       0
  8995 ;;      Locals:         2       0       0       0       0
  8996 ;;      Temps:          1       0       0       0       0
  8997 ;;      Totals:         3       0       0       0       0
  8998 ;;Total ram usage:        3 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    1
  9001 ;; This function calls:
  9002 ;;		_RTC_time_read_1
  9003 ;;		_RTC_time_write_1
  9004 ;; This function is called by:
  9005 ;;		_RTC_getTime
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           
  9010                           ;psect for function _RTC_readClock
  9011  1178                     _RTC_readClock:	
  9012                           
  9013                           ;RTC.c: 206:    int i;;RTC.c: 207:    RB5=1;
  9014                           
  9015                           ;incstack = 0
  9016                           ; Regs used in _RTC_readClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9017  1178  1283               	bcf	3,5	;RP0=0, select bank0
  9018  1179  1303               	bcf	3,6	;RP1=0, select bank0
  9019  117A  1686               	bsf	6,5	;volatile
  9020                           
  9021                           ;RTC.c: 208:    RTC_time_write_1(0xbf);
  9022  117B  30BF               	movlw	191
  9023  117C  160A  118A  212B  160A  118A  	fcall	_RTC_time_write_1
  9024                           
  9025                           ;RTC.c: 209:    for(i=0;i<7;i++)
  9026  1181  01F6               	clrf	RTC_readClock@i
  9027  1182  01F7               	clrf	RTC_readClock@i+1
  9028  1183                     l3279:	
  9029                           
  9030                           ;RTC.c: 210:      {;RTC.c: 211:         getTable[i]=RTC_time_read_1();
  9031  1183  160A  118A  21D5  160A  118A  	fcall	_RTC_time_read_1
  9032  1188  00F5               	movwf	??_RTC_readClock
  9033  1189  0876               	movf	RTC_readClock@i,w
  9034  118A  3EA8               	addlw	(low (_getTable| (0+256)))& (0+255)
  9035  118B  0084               	movwf	4
  9036  118C  0875               	movf	??_RTC_readClock,w
  9037  118D  1783               	bsf	3,7	;select IRP bank3
  9038  118E  0080               	movwf	0
  9039                           
  9040                           ;RTC.c: 212:      }
  9041  118F  3001               	movlw	1
  9042  1190  07F6               	addwf	RTC_readClock@i,f
  9043  1191  1803               	skipnc
  9044  1192  0AF7               	incf	RTC_readClock@i+1,f
  9045  1193  3000               	movlw	0
  9046  1194  07F7               	addwf	RTC_readClock@i+1,f
  9047  1195  0877               	movf	RTC_readClock@i+1,w
  9048  1196  3A80               	xorlw	128
  9049  1197  00FF               	movwf	127
  9050  1198  3080               	movlw	128
  9051  1199  027F               	subwf	127,w
  9052  119A  1D03               	skipz
  9053  119B  299E               	goto	u2175
  9054  119C  3007               	movlw	7
  9055  119D  0276               	subwf	RTC_readClock@i,w
  9056  119E                     u2175:	
  9057  119E  1C03               	skipc
  9058  119F  2983               	goto	l3279
  9059                           
  9060                           ;RTC.c: 213:     RB5=0;
  9061  11A0  1283               	bcf	3,5	;RP0=0, select bank0
  9062  11A1  1303               	bcf	3,6	;RP1=0, select bank0
  9063  11A2  1286               	bcf	6,5	;volatile
  9064  11A3  0008               	return
  9065  11A4                     __end_of_RTC_readClock:	
  9066                           
  9067                           	psect	text29
  9068  11D5                     __ptext29:	
  9069 ;; *************** function _RTC_time_read_1 *****************
  9070 ;; Defined at:
  9071 ;;		line 237 in file "RTC.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  j               2    2[COMMON] int 
  9076 ;;  time_rx         1    4[COMMON] unsigned char 
  9077 ;; Return value:  Size  Location     Type
  9078 ;;                  1    wreg      unsigned char 
  9079 ;; Registers used:
  9080 ;;		wreg, status,2, status,0, btemp+1
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9086 ;;      Params:         0       0       0       0       0
  9087 ;;      Locals:         3       0       0       0       0
  9088 ;;      Temps:          2       0       0       0       0
  9089 ;;      Totals:         5       0       0       0       0
  9090 ;;Total ram usage:        5 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; This function calls:
  9093 ;;		Nothing
  9094 ;; This function is called by:
  9095 ;;		_RTC_readClock
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           
  9100                           ;psect for function _RTC_time_read_1
  9101  11D5                     _RTC_time_read_1:	
  9102                           
  9103                           ;RTC.c: 239:     unsigned char time_rx=0;
  9104                           
  9105                           ;incstack = 0
  9106                           ; Regs used in _RTC_time_read_1: [wreg+status,2+status,0+btemp+1]
  9107  11D5  01F4               	clrf	RTC_time_read_1@time_rx
  9108                           
  9109                           ;RTC.c: 240:    int j;;RTC.c: 241:    TRISB4=1;
  9110  11D6  1683               	bsf	3,5	;RP0=1, select bank1
  9111  11D7  1303               	bcf	3,6	;RP1=0, select bank1
  9112  11D8  1606               	bsf	6,4	;volatile
  9113                           
  9114                           ;RTC.c: 242:    for(j=0;j<8;j++)
  9115  11D9  01F2               	clrf	RTC_time_read_1@j
  9116  11DA  01F3               	clrf	RTC_time_read_1@j+1
  9117  11DB                     l298:	
  9118                           
  9119                           ;RTC.c: 243:       {;RTC.c: 244:         RB0=0;
  9120  11DB  1283               	bcf	3,5	;RP0=0, select bank0
  9121  11DC  1303               	bcf	3,6	;RP1=0, select bank0
  9122  11DD  1006               	bcf	6,0	;volatile
  9123                           
  9124                           ;RTC.c: 245:         time_rx=time_rx>>1;
  9125  11DE  0874               	movf	RTC_time_read_1@time_rx,w
  9126  11DF  00F0               	movwf	??_RTC_time_read_1
  9127  11E0  1003               	clrc
  9128  11E1  0C70               	rrf	??_RTC_time_read_1,w
  9129  11E2  00F1               	movwf	??_RTC_time_read_1+1
  9130  11E3  0871               	movf	??_RTC_time_read_1+1,w
  9131  11E4  00F4               	movwf	RTC_time_read_1@time_rx
  9132                           
  9133                           ;RTC.c: 246:         if(RB4)time_rx=time_rx|0x80;
  9134  11E5  1E06               	btfss	6,4	;volatile
  9135  11E6  29EC               	goto	l3225
  9136  11E7  0874               	movf	RTC_time_read_1@time_rx,w
  9137  11E8  3880               	iorlw	128
  9138  11E9  00F0               	movwf	??_RTC_time_read_1
  9139  11EA  0870               	movf	??_RTC_time_read_1,w
  9140  11EB  00F4               	movwf	RTC_time_read_1@time_rx
  9141  11EC                     l3225:	
  9142                           
  9143                           ;RTC.c: 247:         RB0=1;
  9144  11EC  1406               	bsf	6,0	;volatile
  9145                           
  9146                           ;RTC.c: 248:       }
  9147  11ED  3001               	movlw	1
  9148  11EE  07F2               	addwf	RTC_time_read_1@j,f
  9149  11EF  1803               	skipnc
  9150  11F0  0AF3               	incf	RTC_time_read_1@j+1,f
  9151  11F1  3000               	movlw	0
  9152  11F2  07F3               	addwf	RTC_time_read_1@j+1,f
  9153  11F3  0873               	movf	RTC_time_read_1@j+1,w
  9154  11F4  3A80               	xorlw	128
  9155  11F5  00FF               	movwf	127
  9156  11F6  3080               	movlw	128
  9157  11F7  027F               	subwf	127,w
  9158  11F8  1D03               	skipz
  9159  11F9  29FC               	goto	u2165
  9160  11FA  3008               	movlw	8
  9161  11FB  0272               	subwf	RTC_time_read_1@j,w
  9162  11FC                     u2165:	
  9163  11FC  1C03               	skipc
  9164  11FD  29DB               	goto	l298
  9165                           
  9166                           ;RTC.c: 249:     TRISB4=0;
  9167  11FE  1683               	bsf	3,5	;RP0=1, select bank1
  9168  11FF  1303               	bcf	3,6	;RP1=0, select bank1
  9169  1200  1206               	bcf	6,4	;volatile
  9170                           
  9171                           ;RTC.c: 250:     RB0=0;
  9172  1201  1283               	bcf	3,5	;RP0=0, select bank0
  9173  1202  1303               	bcf	3,6	;RP1=0, select bank0
  9174  1203  1006               	bcf	6,0	;volatile
  9175                           
  9176                           ;RTC.c: 251:     return(time_rx);
  9177  1204  0874               	movf	RTC_time_read_1@time_rx,w
  9178  1205  0008               	return
  9179  1206                     __end_of_RTC_time_read_1:	
  9180                           
  9181                           	psect	text30
  9182  1FBB                     __ptext30:	
  9183 ;; *************** function _LCD_write *****************
  9184 ;; Defined at:
  9185 ;;		line 52 in file "LCD.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;  string          1    wreg     PTR unsigned char 
  9188 ;;		 -> STR_25(7), STR_24(7), STR_23(13), STR_22(11), 
  9189 ;;		 -> STR_21(4), STR_20(16), STR_19(17), STR_18(17), 
  9190 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(6), 
  9191 ;;		 -> STR_13(2), STR_12(2), STR_11(9), STR_10(2), 
  9192 ;;		 -> STR_9(2), STR_8(6), STR_7(4), STR_6(4), 
  9193 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(4), 
  9194 ;;		 -> STR_1(4), 
  9195 ;;  len             1    3[COMMON] unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  string          1    7[COMMON] PTR unsigned char 
  9198 ;;		 -> STR_25(7), STR_24(7), STR_23(13), STR_22(11), 
  9199 ;;		 -> STR_21(4), STR_20(16), STR_19(17), STR_18(17), 
  9200 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(6), 
  9201 ;;		 -> STR_13(2), STR_12(2), STR_11(9), STR_10(2), 
  9202 ;;		 -> STR_9(2), STR_8(6), STR_7(4), STR_6(4), 
  9203 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(4), 
  9204 ;;		 -> STR_1(4), 
  9205 ;;  i               2    5[COMMON] int 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;                  1    wreg      void 
  9208 ;; Registers used:
  9209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9215 ;;      Params:         1       0       0       0       0
  9216 ;;      Locals:         3       0       0       0       0
  9217 ;;      Temps:          1       0       0       0       0
  9218 ;;      Totals:         5       0       0       0       0
  9219 ;;Total ram usage:        5 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    2
  9222 ;; This function calls:
  9223 ;;		_LCD_writeChar
  9224 ;; This function is called by:
  9225 ;;		_displayTime
  9226 ;;		_displayTemp
  9227 ;;		_checkTemp
  9228 ;;		_systemReset
  9229 ;;		_userInput_displayLimits
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           
  9234                           ;psect for function _LCD_write
  9235  1FBB                     _LCD_write:	
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in _LCD_write: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9239                           ;LCD_write@string stored from wreg
  9240  1FBB  00F7               	movwf	LCD_write@string
  9241                           
  9242                           ;LCD.c: 54:     for(int i=0;i<len;i++)
  9243  1FBC  01F5               	clrf	LCD_write@i
  9244  1FBD  01F6               	clrf	LCD_write@i+1
  9245  1FBE                     l3379:	
  9246  1FBE  0876               	movf	LCD_write@i+1,w
  9247  1FBF  3A80               	xorlw	128
  9248  1FC0  00F4               	movwf	??_LCD_write
  9249  1FC1  3080               	movlw	128
  9250  1FC2  0274               	subwf	??_LCD_write,w
  9251  1FC3  1D03               	skipz
  9252  1FC4  2FC7               	goto	u2225
  9253  1FC5  0873               	movf	LCD_write@len,w
  9254  1FC6  0275               	subwf	LCD_write@i,w
  9255  1FC7                     u2225:	
  9256  1FC7  1803               	btfsc	3,0
  9257  1FC8  0008               	return
  9258                           
  9259                           ;LCD.c: 55:     {;LCD.c: 56:       LCD_writeChar(string[i]);
  9260  1FC9  0875               	movf	LCD_write@i,w
  9261  1FCA  0777               	addwf	LCD_write@string,w
  9262  1FCB  0084               	movwf	4
  9263  1FCC  160A  118A  2000  160A  158A  	fcall	stringdir
  9264  1FD1  160A  158A  277C  160A  158A  	fcall	_LCD_writeChar
  9265                           
  9266                           ;LCD.c: 57:     }
  9267  1FD6  3001               	movlw	1
  9268  1FD7  07F5               	addwf	LCD_write@i,f
  9269  1FD8  1803               	skipnc
  9270  1FD9  0AF6               	incf	LCD_write@i+1,f
  9271  1FDA  3000               	movlw	0
  9272  1FDB  07F6               	addwf	LCD_write@i+1,f
  9273  1FDC  2FBE               	goto	l3379
  9274  1FDD                     __end_of_LCD_write:	
  9275                           
  9276                           	psect	text31
  9277  1F7C                     __ptext31:	
  9278 ;; *************** function _LCD_writeChar *****************
  9279 ;; Defined at:
  9280 ;;		line 40 in file "LCD.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  x               1    wreg     unsigned char 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  x               1    2[COMMON] unsigned char 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9294 ;;      Params:         0       0       0       0       0
  9295 ;;      Locals:         1       0       0       0       0
  9296 ;;      Temps:          0       0       0       0       0
  9297 ;;      Totals:         1       0       0       0       0
  9298 ;;Total ram usage:        1 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    1
  9301 ;; This function calls:
  9302 ;;		_LCD_delay
  9303 ;; This function is called by:
  9304 ;;		_LCD_write
  9305 ;;		_displayTime
  9306 ;;		_displayTemp
  9307 ;;		_systemReset
  9308 ;;		_userInput_displayLimits
  9309 ;;		_userInput_displayTime
  9310 ;;		_userInput_displayDate
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           
  9315                           ;psect for function _LCD_writeChar
  9316  1F7C                     _LCD_writeChar:	
  9317                           
  9318                           ;incstack = 0
  9319                           ; Regs used in _LCD_writeChar: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9320                           ;LCD_writeChar@x stored from wreg
  9321  1F7C  00F2               	movwf	LCD_writeChar@x
  9322                           
  9323                           ;LCD.c: 41:     RA5 = 1;
  9324  1F7D  1283               	bcf	3,5	;RP0=0, select bank0
  9325  1F7E  1303               	bcf	3,6	;RP1=0, select bank0
  9326  1F7F  1685               	bsf	5,5	;volatile
  9327                           
  9328                           ;LCD.c: 42:     RA4 = 0;
  9329  1F80  1205               	bcf	5,4	;volatile
  9330                           
  9331                           ;LCD.c: 43:     RA3 = 0;
  9332  1F81  1185               	bcf	5,3	;volatile
  9333                           
  9334                           ;LCD.c: 44:     LCD_delay();
  9335  1F82  160A  158A  26E2  160A  158A  	fcall	_LCD_delay
  9336                           
  9337                           ;LCD.c: 45:     RA3 = 1;
  9338  1F87  1283               	bcf	3,5	;RP0=0, select bank0
  9339  1F88  1303               	bcf	3,6	;RP1=0, select bank0
  9340  1F89  1585               	bsf	5,3	;volatile
  9341                           
  9342                           ;LCD.c: 46:     LCD_delay();
  9343  1F8A  160A  158A  26E2  160A  158A  	fcall	_LCD_delay
  9344                           
  9345                           ;LCD.c: 47:     PORTD = x;
  9346  1F8F  0872               	movf	LCD_writeChar@x,w
  9347  1F90  1283               	bcf	3,5	;RP0=0, select bank0
  9348  1F91  1303               	bcf	3,6	;RP1=0, select bank0
  9349  1F92  0088               	movwf	8	;volatile
  9350                           
  9351                           ;LCD.c: 48:     LCD_delay();
  9352  1F93  160A  158A  26E2   	fcall	_LCD_delay
  9353                           
  9354                           ;LCD.c: 49:     RA3 = 0;
  9355  1F96  1283               	bcf	3,5	;RP0=0, select bank0
  9356  1F97  1303               	bcf	3,6	;RP1=0, select bank0
  9357  1F98  1185               	bcf	5,3	;volatile
  9358  1F99  0008               	return
  9359  1F9A                     __end_of_LCD_writeChar:	
  9360                           
  9361                           	psect	text32
  9362  10AD                     __ptext32:	
  9363 ;; *************** function _LCD_thirdLine *****************
  9364 ;; Defined at:
  9365 ;;		line 69 in file "LCD.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;		None
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      void 
  9372 ;; Registers used:
  9373 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9379 ;;      Params:         0       0       0       0       0
  9380 ;;      Locals:         0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0
  9382 ;;      Totals:         0       0       0       0       0
  9383 ;;Total ram usage:        0 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    2
  9386 ;; This function calls:
  9387 ;;		_LCD_writeCmd
  9388 ;; This function is called by:
  9389 ;;		_displayTemp
  9390 ;;		_systemReset
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           
  9395                           ;psect for function _LCD_thirdLine
  9396  10AD                     _LCD_thirdLine:	
  9397                           
  9398                           ;incstack = 0
  9399                           ; Regs used in _LCD_thirdLine: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9400  10AD  30C8               	movlw	200
  9401  10AE  160A  158A  275E   	fcall	_LCD_writeCmd
  9402  10B1  0008               	return
  9403  10B2                     __end_of_LCD_thirdLine:	
  9404                           
  9405                           	psect	text33
  9406  1E7F                     __ptext33:	
  9407 ;; *************** function _LCD_secondLine *****************
  9408 ;; Defined at:
  9409 ;;		line 67 in file "LCD.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;		None
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;		None
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9423 ;;      Params:         0       0       0       0       0
  9424 ;;      Locals:         0       0       0       0       0
  9425 ;;      Temps:          0       0       0       0       0
  9426 ;;      Totals:         0       0       0       0       0
  9427 ;;Total ram usage:        0 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    2
  9430 ;; This function calls:
  9431 ;;		_LCD_writeCmd
  9432 ;; This function is called by:
  9433 ;;		_displayTime
  9434 ;;		_systemReset
  9435 ;;		_userInput_displayLimits
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           
  9440                           ;psect for function _LCD_secondLine
  9441  1E7F                     _LCD_secondLine:	
  9442                           
  9443                           ;incstack = 0
  9444                           ; Regs used in _LCD_secondLine: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9445  1E7F  3090               	movlw	144
  9446  1E80  160A  158A  275E   	fcall	_LCD_writeCmd
  9447  1E83  0008               	return
  9448  1E84                     __end_of_LCD_secondLine:	
  9449                           
  9450                           	psect	text34
  9451  1F48                     __ptext34:	
  9452 ;; *************** function _LCD_init *****************
  9453 ;; Defined at:
  9454 ;;		line 14 in file "LCD.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;		None
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;		None
  9459 ;; Return value:  Size  Location     Type
  9460 ;;                  1    wreg      void 
  9461 ;; Registers used:
  9462 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9468 ;;      Params:         0       0       0       0       0
  9469 ;;      Locals:         0       0       0       0       0
  9470 ;;      Temps:          0       0       0       0       0
  9471 ;;      Totals:         0       0       0       0       0
  9472 ;;Total ram usage:        0 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    2
  9475 ;; This function calls:
  9476 ;;		_LCD_writeCmd
  9477 ;; This function is called by:
  9478 ;;		_main
  9479 ;;		_displayTime
  9480 ;;		_systemReset
  9481 ;;		_userInput_displayLimits
  9482 ;;		_userInput_displayTime
  9483 ;;		_userInput_displayDate
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _LCD_init
  9489  1F48                     _LCD_init:	
  9490                           
  9491                           ;LCD.c: 15:    ADCON1=0X07;
  9492                           
  9493                           ;incstack = 0
  9494                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9495  1F48  3007               	movlw	7
  9496  1F49  1683               	bsf	3,5	;RP0=1, select bank1
  9497  1F4A  1303               	bcf	3,6	;RP1=0, select bank1
  9498  1F4B  009F               	movwf	31	;volatile
  9499                           
  9500                           ;LCD.c: 16:    TRISA=0X00;
  9501  1F4C  0185               	clrf	5	;volatile
  9502                           
  9503                           ;LCD.c: 17:    TRISD=0X00;
  9504  1F4D  0188               	clrf	8	;volatile
  9505                           
  9506                           ;LCD.c: 18:    PORTD=0x00;
  9507  1F4E  1283               	bcf	3,5	;RP0=0, select bank0
  9508  1F4F  1303               	bcf	3,6	;RP1=0, select bank0
  9509  1F50  0188               	clrf	8	;volatile
  9510                           
  9511                           ;LCD.c: 19:    PORTA=0x00;
  9512  1F51  0185               	clrf	5	;volatile
  9513                           
  9514                           ;LCD.c: 20:    RA2 = 1;
  9515  1F52  1505               	bsf	5,2	;volatile
  9516                           
  9517                           ;LCD.c: 21:    LCD_writeCmd(0x0e);
  9518  1F53  300E               	movlw	14
  9519  1F54  160A  158A  275E  160A  158A  	fcall	_LCD_writeCmd
  9520                           
  9521                           ;LCD.c: 22:    LCD_writeCmd(0x38);
  9522  1F59  3038               	movlw	56
  9523  1F5A  160A  158A  275E   	fcall	_LCD_writeCmd
  9524  1F5D  0008               	return
  9525  1F5E                     __end_of_LCD_init:	
  9526                           
  9527                           	psect	text35
  9528  1E7A                     __ptext35:	
  9529 ;; *************** function _LCD_firstLine *****************
  9530 ;; Defined at:
  9531 ;;		line 65 in file "LCD.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;		None
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;		None
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  1    wreg      void 
  9538 ;; Registers used:
  9539 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9545 ;;      Params:         0       0       0       0       0
  9546 ;;      Locals:         0       0       0       0       0
  9547 ;;      Temps:          0       0       0       0       0
  9548 ;;      Totals:         0       0       0       0       0
  9549 ;;Total ram usage:        0 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    2
  9552 ;; This function calls:
  9553 ;;		_LCD_writeCmd
  9554 ;; This function is called by:
  9555 ;;		_displayTime
  9556 ;;		_systemReset
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           
  9561                           ;psect for function _LCD_firstLine
  9562  1E7A                     _LCD_firstLine:	
  9563                           
  9564                           ;incstack = 0
  9565                           ; Regs used in _LCD_firstLine: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9566  1E7A  3080               	movlw	128
  9567  1E7B  160A  158A  275E   	fcall	_LCD_writeCmd
  9568  1E7E  0008               	return
  9569  1E7F                     __end_of_LCD_firstLine:	
  9570                           
  9571                           	psect	text36
  9572  1E75                     __ptext36:	
  9573 ;; *************** function _LCD_clear *****************
  9574 ;; Defined at:
  9575 ;;		line 60 in file "LCD.c"
  9576 ;; Parameters:    Size  Location     Type
  9577 ;;		None
  9578 ;; Auto vars:     Size  Location     Type
  9579 ;;		None
  9580 ;; Return value:  Size  Location     Type
  9581 ;;                  1    wreg      void 
  9582 ;; Registers used:
  9583 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9584 ;; Tracked objects:
  9585 ;;		On entry : 0/0
  9586 ;;		On exit  : 0/0
  9587 ;;		Unchanged: 0/0
  9588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9589 ;;      Params:         0       0       0       0       0
  9590 ;;      Locals:         0       0       0       0       0
  9591 ;;      Temps:          0       0       0       0       0
  9592 ;;      Totals:         0       0       0       0       0
  9593 ;;Total ram usage:        0 bytes
  9594 ;; Hardware stack levels used:    1
  9595 ;; Hardware stack levels required when called:    2
  9596 ;; This function calls:
  9597 ;;		_LCD_writeCmd
  9598 ;; This function is called by:
  9599 ;;		_main
  9600 ;;		_systemReset
  9601 ;;		_userInput_displayLimits
  9602 ;;		_userInput_displayTime
  9603 ;;		_userInput_displayDate
  9604 ;; This function uses a non-reentrant model
  9605 ;;
  9606                           
  9607                           
  9608                           ;psect for function _LCD_clear
  9609  1E75                     _LCD_clear:	
  9610                           
  9611                           ;LCD.c: 61:     LCD_writeCmd(0x1);
  9612                           
  9613                           ;incstack = 0
  9614                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9615  1E75  3001               	movlw	1
  9616  1E76  160A  158A  275E   	fcall	_LCD_writeCmd
  9617  1E79  0008               	return
  9618  1E7A                     __end_of_LCD_clear:	
  9619                           
  9620                           	psect	text37
  9621  15D6                     __ptext37:	
  9622 ;; *************** function _matrix_checkButtons *****************
  9623 ;; Defined at:
  9624 ;;		line 50 in file "buttonMatrix.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;  j               2    4[COMMON] int 
  9629 ;;  i               2    6[COMMON] int 
  9630 ;;  counter         2    8[COMMON] int 
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  2    2[COMMON] int 
  9633 ;; Registers used:
  9634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9640 ;;      Params:         2       0       0       0       0
  9641 ;;      Locals:         6       0       0       0       0
  9642 ;;      Temps:          0       0       0       0       0
  9643 ;;      Totals:         8       0       0       0       0
  9644 ;;Total ram usage:        8 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    1
  9647 ;; This function calls:
  9648 ;;		_matrix_buttonDelay
  9649 ;;		_matrix_init
  9650 ;;		_matrix_setInputs
  9651 ;; This function is called by:
  9652 ;;		_alarmMode
  9653 ;;		_userInput_getDate
  9654 ;;		_userInput_getTime
  9655 ;;		_userInput_getTempLimits
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           
  9660                           ;psect for function _matrix_checkButtons
  9661  15D6                     _matrix_checkButtons:	
  9662                           
  9663                           ;buttonMatrix.c: 52:     matrix_init();
  9664                           
  9665                           ;incstack = 0
  9666                           ; Regs used in _matrix_checkButtons: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  9667  15D6  160A  118A  20B2  160A  118A  	fcall	_matrix_init
  9668                           
  9669                           ;buttonMatrix.c: 54:     int counter = 0;
  9670  15DB  01F8               	clrf	matrix_checkButtons@counter
  9671  15DC  01F9               	clrf	matrix_checkButtons@counter+1
  9672                           
  9673                           ;buttonMatrix.c: 57:     for (int i = 0; i < 4; i++)
  9674  15DD  01F6               	clrf	matrix_checkButtons@i
  9675  15DE  01F7               	clrf	matrix_checkButtons@i+1
  9676  15DF                     l3547:	
  9677                           
  9678                           ;buttonMatrix.c: 58:     {;buttonMatrix.c: 59:         matrix_setInputs(i);
  9679  15DF  0877               	movf	matrix_checkButtons@i+1,w
  9680  15E0  00F1               	movwf	matrix_setInputs@counter+1
  9681  15E1  0876               	movf	matrix_checkButtons@i,w
  9682  15E2  00F0               	movwf	matrix_setInputs@counter
  9683  15E3  160A  118A  21A4  160A  118A  	fcall	_matrix_setInputs
  9684                           
  9685                           ;buttonMatrix.c: 60:         matrix_buttonDelay();
  9686  15E8  160A  158A  269B  160A  118A  	fcall	_matrix_buttonDelay
  9687                           
  9688                           ;buttonMatrix.c: 61:         for (int j = 0; j < 4; j++) {
  9689  15ED  01F4               	clrf	matrix_checkButtons@j
  9690  15EE  01F5               	clrf	matrix_checkButtons@j+1
  9691  15EF                     l173:	
  9692                           
  9693                           ;buttonMatrix.c: 65:             if (RC4 == 0) {
  9694  15EF  1283               	bcf	3,5	;RP0=0, select bank0
  9695  15F0  1303               	bcf	3,6	;RP1=0, select bank0
  9696  15F1  1A07               	btfsc	7,4	;volatile
  9697  15F2  2DFE               	goto	l175
  9698                           
  9699                           ;buttonMatrix.c: 66:                 return counter += 1;
  9700  15F3  3001               	movlw	1
  9701  15F4  07F8               	addwf	matrix_checkButtons@counter,f
  9702  15F5  1803               	skipnc
  9703  15F6  0AF9               	incf	matrix_checkButtons@counter+1,f
  9704  15F7  3000               	movlw	0
  9705  15F8  07F9               	addwf	matrix_checkButtons@counter+1,f
  9706  15F9  0879               	movf	matrix_checkButtons@counter+1,w
  9707  15FA  00F3               	movwf	?_matrix_checkButtons+1
  9708  15FB  0878               	movf	matrix_checkButtons@counter,w
  9709  15FC  00F2               	movwf	?_matrix_checkButtons
  9710  15FD  0008               	return
  9711  15FE                     l175:	
  9712                           ;buttonMatrix.c: 68:             else if (RC5 == 0) {
  9713                           
  9714  15FE  1A87               	btfsc	7,5	;volatile
  9715  15FF  2E0B               	goto	l178
  9716                           
  9717                           ;buttonMatrix.c: 69:                 return counter += 2;
  9718  1600  3002               	movlw	2
  9719  1601  07F8               	addwf	matrix_checkButtons@counter,f
  9720  1602  1803               	skipnc
  9721  1603  0AF9               	incf	matrix_checkButtons@counter+1,f
  9722  1604  3000               	movlw	0
  9723  1605  07F9               	addwf	matrix_checkButtons@counter+1,f
  9724  1606  0879               	movf	matrix_checkButtons@counter+1,w
  9725  1607  00F3               	movwf	?_matrix_checkButtons+1
  9726  1608  0878               	movf	matrix_checkButtons@counter,w
  9727  1609  00F2               	movwf	?_matrix_checkButtons
  9728  160A  0008               	return
  9729  160B                     l178:	
  9730                           ;buttonMatrix.c: 71:             else if (RC6 == 0) {
  9731                           
  9732  160B  1B07               	btfsc	7,6	;volatile
  9733  160C  2E18               	goto	l180
  9734                           
  9735                           ;buttonMatrix.c: 72:                 return counter += 3;
  9736  160D  3003               	movlw	3
  9737  160E  07F8               	addwf	matrix_checkButtons@counter,f
  9738  160F  1803               	skipnc
  9739  1610  0AF9               	incf	matrix_checkButtons@counter+1,f
  9740  1611  3000               	movlw	0
  9741  1612  07F9               	addwf	matrix_checkButtons@counter+1,f
  9742  1613  0879               	movf	matrix_checkButtons@counter+1,w
  9743  1614  00F3               	movwf	?_matrix_checkButtons+1
  9744  1615  0878               	movf	matrix_checkButtons@counter,w
  9745  1616  00F2               	movwf	?_matrix_checkButtons
  9746  1617  0008               	return
  9747  1618                     l180:	
  9748                           ;buttonMatrix.c: 75:             else if (RC7 == 0) {
  9749                           
  9750  1618  1B87               	btfsc	7,7	;volatile
  9751  1619  2E25               	goto	l3579
  9752                           
  9753                           ;buttonMatrix.c: 76:                 return counter += 4;
  9754  161A  3004               	movlw	4
  9755  161B  07F8               	addwf	matrix_checkButtons@counter,f
  9756  161C  1803               	skipnc
  9757  161D  0AF9               	incf	matrix_checkButtons@counter+1,f
  9758  161E  3000               	movlw	0
  9759  161F  07F9               	addwf	matrix_checkButtons@counter+1,f
  9760  1620  0879               	movf	matrix_checkButtons@counter+1,w
  9761  1621  00F3               	movwf	?_matrix_checkButtons+1
  9762  1622  0878               	movf	matrix_checkButtons@counter,w
  9763  1623  00F2               	movwf	?_matrix_checkButtons
  9764  1624  0008               	return
  9765  1625                     l3579:	
  9766                           
  9767                           ;buttonMatrix.c: 78:         }
  9768  1625  3001               	movlw	1
  9769  1626  07F4               	addwf	matrix_checkButtons@j,f
  9770  1627  1803               	skipnc
  9771  1628  0AF5               	incf	matrix_checkButtons@j+1,f
  9772  1629  3000               	movlw	0
  9773  162A  07F5               	addwf	matrix_checkButtons@j+1,f
  9774  162B  0875               	movf	matrix_checkButtons@j+1,w
  9775  162C  3A80               	xorlw	128
  9776  162D  00FF               	movwf	127
  9777  162E  3080               	movlw	128
  9778  162F  027F               	subwf	127,w
  9779  1630  1D03               	skipz
  9780  1631  2E34               	goto	u2385
  9781  1632  3004               	movlw	4
  9782  1633  0274               	subwf	matrix_checkButtons@j,w
  9783  1634                     u2385:	
  9784  1634  1C03               	skipc
  9785  1635  2DEF               	goto	l173
  9786                           
  9787                           ;buttonMatrix.c: 79:         counter += 4;
  9788  1636  3004               	movlw	4
  9789  1637  07F8               	addwf	matrix_checkButtons@counter,f
  9790  1638  1803               	skipnc
  9791  1639  0AF9               	incf	matrix_checkButtons@counter+1,f
  9792  163A  3000               	movlw	0
  9793  163B  07F9               	addwf	matrix_checkButtons@counter+1,f
  9794                           
  9795                           ;buttonMatrix.c: 80:     }
  9796  163C  3001               	movlw	1
  9797  163D  07F6               	addwf	matrix_checkButtons@i,f
  9798  163E  1803               	skipnc
  9799  163F  0AF7               	incf	matrix_checkButtons@i+1,f
  9800  1640  3000               	movlw	0
  9801  1641  07F7               	addwf	matrix_checkButtons@i+1,f
  9802  1642  0877               	movf	matrix_checkButtons@i+1,w
  9803  1643  3A80               	xorlw	128
  9804  1644  00FF               	movwf	127
  9805  1645  3080               	movlw	128
  9806  1646  027F               	subwf	127,w
  9807  1647  1D03               	skipz
  9808  1648  2E4B               	goto	u2395
  9809  1649  3004               	movlw	4
  9810  164A  0276               	subwf	matrix_checkButtons@i,w
  9811  164B                     u2395:	
  9812  164B  1C03               	skipc
  9813  164C  2DDF               	goto	l3547
  9814                           
  9815                           ;buttonMatrix.c: 81:     return 0;
  9816  164D  01F2               	clrf	?_matrix_checkButtons
  9817  164E  01F3               	clrf	?_matrix_checkButtons+1
  9818  164F  0008               	return
  9819  1650                     __end_of_matrix_checkButtons:	
  9820                           
  9821                           	psect	text38
  9822  11A4                     __ptext38:	
  9823 ;; *************** function _matrix_setInputs *****************
  9824 ;; Defined at:
  9825 ;;		line 34 in file "buttonMatrix.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;  counter         2    0[COMMON] int 
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;		None
  9830 ;; Return value:  Size  Location     Type
  9831 ;;                  1    wreg      void 
  9832 ;; Registers used:
  9833 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9834 ;; Tracked objects:
  9835 ;;		On entry : 0/0
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9839 ;;      Params:         2       0       0       0       0
  9840 ;;      Locals:         0       0       0       0       0
  9841 ;;      Temps:          0       0       0       0       0
  9842 ;;      Totals:         2       0       0       0       0
  9843 ;;Total ram usage:        2 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; This function calls:
  9846 ;;		Nothing
  9847 ;; This function is called by:
  9848 ;;		_matrix_checkButtons
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           
  9853                           ;psect for function _matrix_setInputs
  9854  11A4                     _matrix_setInputs:	
  9855                           
  9856                           ;buttonMatrix.c: 35:     switch (counter) {
  9857                           
  9858                           ;incstack = 0
  9859                           ; Regs used in _matrix_setInputs: [wreg-fsr0h+status,2+status,0]
  9860  11A4  29C1               	goto	l3399
  9861  11A5                     l163:	
  9862                           ;buttonMatrix.c: 36:         case 0: RC0 = 0;
  9863                           
  9864  11A5  1283               	bcf	3,5	;RP0=0, select bank0
  9865  11A6  1303               	bcf	3,6	;RP1=0, select bank0
  9866  11A7  1007               	bcf	7,0	;volatile
  9867                           
  9868                           ;buttonMatrix.c: 37:         RC1 = 1;
  9869  11A8  1487               	bsf	7,1	;volatile
  9870                           
  9871                           ;buttonMatrix.c: 38:         RC2 = 1;
  9872  11A9  1507               	bsf	7,2	;volatile
  9873                           
  9874                           ;buttonMatrix.c: 39:         RC3 = 1;
  9875  11AA  1587               	bsf	7,3	;volatile
  9876                           
  9877                           ;buttonMatrix.c: 40:             break;
  9878  11AB  0008               	return
  9879  11AC                     l165:	
  9880                           ;buttonMatrix.c: 41:         case 1: RC0 = 1; RC1 = 0; RC2 = 1; RC3 = 1;
  9881                           
  9882  11AC  1283               	bcf	3,5	;RP0=0, select bank0
  9883  11AD  1303               	bcf	3,6	;RP1=0, select bank0
  9884  11AE  1407               	bsf	7,0	;volatile
  9885  11AF  1087               	bcf	7,1	;volatile
  9886  11B0  1507               	bsf	7,2	;volatile
  9887  11B1  1587               	bsf	7,3	;volatile
  9888                           
  9889                           ;buttonMatrix.c: 42:             break;
  9890  11B2  0008               	return
  9891  11B3                     l166:	
  9892                           ;buttonMatrix.c: 43:         case 2: RC0 = 1; RC1 = 1; RC2 = 0; RC3 = 1;
  9893                           
  9894  11B3  1283               	bcf	3,5	;RP0=0, select bank0
  9895  11B4  1303               	bcf	3,6	;RP1=0, select bank0
  9896  11B5  1407               	bsf	7,0	;volatile
  9897  11B6  1487               	bsf	7,1	;volatile
  9898  11B7  1107               	bcf	7,2	;volatile
  9899  11B8  1587               	bsf	7,3	;volatile
  9900                           
  9901                           ;buttonMatrix.c: 44:             break;
  9902  11B9  0008               	return
  9903  11BA                     l167:	
  9904                           ;buttonMatrix.c: 45:         case 3: RC0 = 1; RC1 = 1; RC2 = 1; RC3 = 0;
  9905                           
  9906  11BA  1283               	bcf	3,5	;RP0=0, select bank0
  9907  11BB  1303               	bcf	3,6	;RP1=0, select bank0
  9908  11BC  1407               	bsf	7,0	;volatile
  9909  11BD  1487               	bsf	7,1	;volatile
  9910  11BE  1507               	bsf	7,2	;volatile
  9911  11BF  1187               	bcf	7,3	;volatile
  9912                           
  9913                           ;buttonMatrix.c: 46:             break;
  9914  11C0  0008               	return
  9915  11C1                     l3399:	
  9916                           
  9917                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9918                           ; Switch size 1, requested type "simple"
  9919                           ; Number of cases is 1, Range of values is 0 to 0
  9920                           ; switch strategies available:
  9921                           ; Name         Instructions Cycles
  9922                           ; simple_byte            4     3 (average)
  9923                           ; direct_byte           11     8 (fixed)
  9924                           ; jumptable            260     6 (fixed)
  9925                           ;	Chosen strategy is simple_byte
  9926  11C1  0871               	movf	matrix_setInputs@counter+1,w
  9927  11C2  3A00               	xorlw	0	; case 0
  9928  11C3  1903               	skipnz
  9929  11C4  29C6               	goto	l5077
  9930  11C5  29D4               	goto	l168
  9931  11C6                     l5077:	
  9932                           
  9933                           ; Switch size 1, requested type "simple"
  9934                           ; Number of cases is 4, Range of values is 0 to 3
  9935                           ; switch strategies available:
  9936                           ; Name         Instructions Cycles
  9937                           ; simple_byte           13     7 (average)
  9938                           ; direct_byte           20     8 (fixed)
  9939                           ; jumptable            260     6 (fixed)
  9940                           ;	Chosen strategy is simple_byte
  9941  11C6  0870               	movf	matrix_setInputs@counter,w
  9942  11C7  3A00               	xorlw	0	; case 0
  9943  11C8  1903               	skipnz
  9944  11C9  29A5               	goto	l163
  9945  11CA  3A01               	xorlw	1	; case 1
  9946  11CB  1903               	skipnz
  9947  11CC  29AC               	goto	l165
  9948  11CD  3A03               	xorlw	3	; case 2
  9949  11CE  1903               	skipnz
  9950  11CF  29B3               	goto	l166
  9951  11D0  3A01               	xorlw	1	; case 3
  9952  11D1  1903               	skipnz
  9953  11D2  29BA               	goto	l167
  9954  11D3  29D4               	goto	l168
  9955  11D4                     l168:	
  9956  11D4  0008               	return
  9957  11D5                     __end_of_matrix_setInputs:	
  9958                           
  9959                           	psect	text39
  9960  10B2                     __ptext39:	
  9961 ;; *************** function _matrix_init *****************
  9962 ;; Defined at:
  9963 ;;		line 21 in file "buttonMatrix.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;		None
  9968 ;; Return value:  Size  Location     Type
  9969 ;;                  1    wreg      void 
  9970 ;; Registers used:
  9971 ;;		wreg
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9977 ;;      Params:         0       0       0       0       0
  9978 ;;      Locals:         0       0       0       0       0
  9979 ;;      Temps:          0       0       0       0       0
  9980 ;;      Totals:         0       0       0       0       0
  9981 ;;Total ram usage:        0 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; This function calls:
  9984 ;;		Nothing
  9985 ;; This function is called by:
  9986 ;;		_matrix_checkButtons
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           
  9991                           ;psect for function _matrix_init
  9992  10B2                     _matrix_init:	
  9993                           
  9994                           ;buttonMatrix.c: 22:     TRISC = 0XF0;
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _matrix_init: [wreg]
  9998  10B2  30F0               	movlw	240
  9999  10B3  1683               	bsf	3,5	;RP0=1, select bank1
 10000  10B4  1303               	bcf	3,6	;RP1=0, select bank1
 10001  10B5  0087               	movwf	7	;volatile
 10002                           
 10003                           ;buttonMatrix.c: 23:     PORTC = 0XFF;
 10004  10B6  30FF               	movlw	255
 10005  10B7  1283               	bcf	3,5	;RP0=0, select bank0
 10006  10B8  1303               	bcf	3,6	;RP1=0, select bank0
 10007  10B9  0087               	movwf	7	;volatile
 10008  10BA  0008               	return
 10009  10BB                     __end_of_matrix_init:	
 10010                           
 10011                           	psect	text40
 10012  1E9B                     __ptext40:	
 10013 ;; *************** function _matrix_buttonDelay *****************
 10014 ;; Defined at:
 10015 ;;		line 28 in file "buttonMatrix.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;		None
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  i               2    0[COMMON] int 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  1    wreg      void 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10029 ;;      Params:         0       0       0       0       0
 10030 ;;      Locals:         2       0       0       0       0
 10031 ;;      Temps:          0       0       0       0       0
 10032 ;;      Totals:         2       0       0       0       0
 10033 ;;Total ram usage:        2 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; This function calls:
 10036 ;;		Nothing
 10037 ;; This function is called by:
 10038 ;;		_matrix_checkButtons
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           
 10043                           ;psect for function _matrix_buttonDelay
 10044  1E9B                     _matrix_buttonDelay:	
 10045                           
 10046                           ;buttonMatrix.c: 30:     int i;;buttonMatrix.c: 31:     for (i = 0x1000; i--;);
 10047                           
 10048                           ;incstack = 0
 10049                           ; Regs used in _matrix_buttonDelay: [wreg+status,2+status,0]
 10050  1E9B  3000               	movlw	0
 10051  1E9C  00F0               	movwf	matrix_buttonDelay@i
 10052  1E9D  3010               	movlw	16
 10053  1E9E  00F1               	movwf	matrix_buttonDelay@i+1
 10054  1E9F                     l3393:	
 10055  1E9F  30FF               	movlw	255
 10056  1EA0  07F0               	addwf	matrix_buttonDelay@i,f
 10057  1EA1  1803               	skipnc
 10058  1EA2  0AF1               	incf	matrix_buttonDelay@i+1,f
 10059  1EA3  30FF               	movlw	255
 10060  1EA4  07F1               	addwf	matrix_buttonDelay@i+1,f
 10061  1EA5  0A70               	incf	matrix_buttonDelay@i,w
 10062  1EA6  1D03               	skipz
 10063  1EA7  2E9F               	goto	l3393
 10064  1EA8  0A71               	incf	matrix_buttonDelay@i+1,w
 10065  1EA9  1903               	btfsc	3,2
 10066  1EAA  0008               	return
 10067  1EAB  2E9F               	goto	l3393
 10068  1EAC                     __end_of_matrix_buttonDelay:	
 10069                           
 10070                           	psect	text41
 10071  1EBD                     __ptext41:	
 10072 ;; *************** function _buzzer_alarmOn *****************
 10073 ;; Defined at:
 10074 ;;		line 16 in file "buzzer.c"
 10075 ;; Parameters:    Size  Location     Type
 10076 ;;		None
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;		None
 10079 ;; Return value:  Size  Location     Type
 10080 ;;                  1    wreg      void 
 10081 ;; Registers used:
 10082 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/0
 10085 ;;		On exit  : 0/0
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10088 ;;      Params:         0       0       0       0       0
 10089 ;;      Locals:         0       0       0       0       0
 10090 ;;      Temps:          0       0       0       0       0
 10091 ;;      Totals:         0       0       0       0       0
 10092 ;;Total ram usage:        0 bytes
 10093 ;; Hardware stack levels used:    1
 10094 ;; Hardware stack levels required when called:    1
 10095 ;; This function calls:
 10096 ;;		_buzzer_delay
 10097 ;; This function is called by:
 10098 ;;		_alarmMode
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function _buzzer_alarmOn
 10104  1EBD                     _buzzer_alarmOn:	
 10105                           
 10106                           ;buzzer.c: 18:   TRISE=0;
 10107                           
 10108                           ;incstack = 0
 10109                           ; Regs used in _buzzer_alarmOn: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10110  1EBD  1683               	bsf	3,5	;RP0=1, select bank1
 10111  1EBE  1303               	bcf	3,6	;RP1=0, select bank1
 10112  1EBF  0189               	clrf	9	;volatile
 10113                           
 10114                           ;buzzer.c: 19:   RE0 = 1;
 10115  1EC0  1283               	bcf	3,5	;RP0=0, select bank0
 10116  1EC1  1303               	bcf	3,6	;RP1=0, select bank0
 10117  1EC2  1409               	bsf	9,0	;volatile
 10118                           
 10119                           ;buzzer.c: 20:   buzzer_delay();
 10120  1EC3  160A  158A  26F6  160A  158A  	fcall	_buzzer_delay
 10121                           
 10122                           ;buzzer.c: 21:   RE0 = 0;
 10123  1EC8  1283               	bcf	3,5	;RP0=0, select bank0
 10124  1EC9  1303               	bcf	3,6	;RP1=0, select bank0
 10125  1ECA  1009               	bcf	9,0	;volatile
 10126                           
 10127                           ;buzzer.c: 22:   buzzer_delay();
 10128  1ECB  160A  158A  26F6   	fcall	_buzzer_delay
 10129  1ECE  0008               	return
 10130  1ECF                     __end_of_buzzer_alarmOn:	
 10131                           
 10132                           	psect	text42
 10133  1EF6                     __ptext42:	
 10134 ;; *************** function _buzzer_delay *****************
 10135 ;; Defined at:
 10136 ;;		line 9 in file "buzzer.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;		None
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  i               2    0[COMMON] int 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  1    wreg      void 
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, btemp+1
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10150 ;;      Params:         0       0       0       0       0
 10151 ;;      Locals:         2       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0
 10153 ;;      Totals:         2       0       0       0       0
 10154 ;;Total ram usage:        2 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; This function calls:
 10157 ;;		Nothing
 10158 ;; This function is called by:
 10159 ;;		_buzzer_alarmOn
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           
 10164                           ;psect for function _buzzer_delay
 10165  1EF6                     _buzzer_delay:	
 10166                           
 10167                           ;buzzer.c: 10:     int i;;buzzer.c: 11:     for(i=0;i<5000;i++);
 10168                           
 10169                           ;incstack = 0
 10170                           ; Regs used in _buzzer_delay: [wreg+status,2+btemp+1]
 10171  1EF6  01F0               	clrf	buzzer_delay@i
 10172  1EF7  01F1               	clrf	buzzer_delay@i+1
 10173  1EF8                     l3421:	
 10174  1EF8  3001               	movlw	1
 10175  1EF9  07F0               	addwf	buzzer_delay@i,f
 10176  1EFA  1803               	skipnc
 10177  1EFB  0AF1               	incf	buzzer_delay@i+1,f
 10178  1EFC  3000               	movlw	0
 10179  1EFD  07F1               	addwf	buzzer_delay@i+1,f
 10180  1EFE  0871               	movf	buzzer_delay@i+1,w
 10181  1EFF  3A80               	xorlw	128
 10182  1F00  00FF               	movwf	127
 10183  1F01  3093               	movlw	147
 10184  1F02  027F               	subwf	127,w
 10185  1F03  1D03               	skipz
 10186  1F04  2F07               	goto	u2265
 10187  1F05  3088               	movlw	136
 10188  1F06  0270               	subwf	buzzer_delay@i,w
 10189  1F07                     u2265:	
 10190  1F07  1803               	btfsc	3,0
 10191  1F08  0008               	return
 10192  1F09  2EF8               	goto	l3421
 10193  1F0A                     __end_of_buzzer_delay:	
 10194                           
 10195                           	psect	text43
 10196  1E6C                     __ptext43:	
 10197 ;; *************** function _buzzer_alarmOff *****************
 10198 ;; Defined at:
 10199 ;;		line 25 in file "buzzer.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;		None
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;		None
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  1    wreg      void 
 10206 ;; Registers used:
 10207 ;;		None
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10213 ;;      Params:         0       0       0       0       0
 10214 ;;      Locals:         0       0       0       0       0
 10215 ;;      Temps:          0       0       0       0       0
 10216 ;;      Totals:         0       0       0       0       0
 10217 ;;Total ram usage:        0 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; This function calls:
 10220 ;;		Nothing
 10221 ;; This function is called by:
 10222 ;;		_alarmMode
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           
 10227                           ;psect for function _buzzer_alarmOff
 10228  1E6C                     _buzzer_alarmOff:	
 10229                           
 10230                           ;buzzer.c: 27:     RE0 = 0;
 10231                           
 10232                           ;incstack = 0
 10233                           ; Regs used in _buzzer_alarmOff: []
 10234  1E6C  1283               	bcf	3,5	;RP0=0, select bank0
 10235  1E6D  1303               	bcf	3,6	;RP1=0, select bank0
 10236  1E6E  1009               	bcf	9,0	;volatile
 10237  1E6F  0008               	return
 10238  1E70                     __end_of_buzzer_alarmOff:	
 10239                           
 10240                           	psect	text44
 10241  10BB                     __ptext44:	
 10242 ;; *************** function _RTC_isDay *****************
 10243 ;; Defined at:
 10244 ;;		line 121 in file "RTC.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;  time           16    0[BANK0 ] struct Time
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      _Bool 
 10251 ;; Registers used:
 10252 ;;		wreg, status,2, status,0
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10258 ;;      Params:         0      16       0       0       0
 10259 ;;      Locals:         0       0       0       0       0
 10260 ;;      Temps:          0       0       0       0       0
 10261 ;;      Totals:         0      16       0       0       0
 10262 ;;Total ram usage:       16 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; This function calls:
 10265 ;;		Nothing
 10266 ;; This function is called by:
 10267 ;;		_checkTemp
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           
 10272                           ;psect for function _RTC_isDay
 10273  10BB                     _RTC_isDay:	
 10274                           
 10275                           ;RTC.c: 123:     if (time.hour1 == 0x00)
 10276                           
 10277                           ;incstack = 0
 10278                           ; Regs used in _RTC_isDay: [wreg+status,2+status,0]
 10279  10BB  1283               	bcf	3,5	;RP0=0, select bank0
 10280  10BC  1303               	bcf	3,6	;RP1=0, select bank0
 10281  10BD  0824               	movf	RTC_isDay@time+4,w
 10282  10BE  1D03               	btfss	3,2
 10283  10BF  28D0               	goto	l3831
 10284                           
 10285                           ;RTC.c: 124:     {;RTC.c: 126:         if(time.hour2 == 0x06 && time.min1 >= 0x03)
 10286  10C0  3006               	movlw	6
 10287  10C1  0625               	xorwf	RTC_isDay@time+5,w
 10288  10C2  1D03               	btfss	3,2
 10289  10C3  28CA               	goto	l3819
 10290  10C4  3003               	movlw	3
 10291  10C5  0222               	subwf	RTC_isDay@time+2,w
 10292  10C6  1C03               	skipc
 10293  10C7  28CA               	goto	l3819
 10294  10C8                     l3813:	
 10295                           
 10296                           ;RTC.c: 127:         {;RTC.c: 128:             return 1;
 10297  10C8  3001               	movlw	1
 10298  10C9  0008               	return
 10299  10CA                     l3819:	
 10300  10CA  3007               	movlw	7
 10301  10CB  0225               	subwf	RTC_isDay@time+5,w
 10302  10CC  1803               	btfsc	3,0
 10303  10CD  28C8               	goto	l3813
 10304  10CE                     l3825:	
 10305                           
 10306                           ;RTC.c: 136:         return 0;
 10307  10CE  3000               	movlw	0
 10308  10CF  0008               	return
 10309  10D0                     l3831:	
 10310  10D0  0324               	decf	RTC_isDay@time+4,w
 10311  10D1  1D03               	btfss	3,2
 10312  10D2  28CE               	goto	l3825
 10313                           
 10314                           ;RTC.c: 140:     {;RTC.c: 142:         if(time.hour2 == 0x09 && time.min1 <= 0x03)
 10315  10D3  3009               	movlw	9
 10316  10D4  0625               	xorwf	RTC_isDay@time+5,w
 10317  10D5  1D03               	btfss	3,2
 10318  10D6  28DB               	goto	l3841
 10319  10D7  3004               	movlw	4
 10320  10D8  0222               	subwf	RTC_isDay@time+2,w
 10321  10D9  1C03               	btfss	3,0
 10322  10DA  28C8               	goto	l3813
 10323  10DB                     l3841:	
 10324                           
 10325                           ;RTC.c: 147:         if(time.hour2 < 0x09)
 10326  10DB  3009               	movlw	9
 10327  10DC  0225               	subwf	RTC_isDay@time+5,w
 10328  10DD  1C03               	btfss	3,0
 10329  10DE  28C8               	goto	l3813
 10330  10DF  28CE               	goto	l3825
 10331  10E0                     __end_of_RTC_isDay:	
 10332                           
 10333                           	psect	text45
 10334  1E70                     __ptext45:	
 10335 ;; *************** function _LCD_fourthLine *****************
 10336 ;; Defined at:
 10337 ;;		line 71 in file "LCD.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;		None
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;		None
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  1    wreg      void 
 10344 ;; Registers used:
 10345 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10351 ;;      Params:         0       0       0       0       0
 10352 ;;      Locals:         0       0       0       0       0
 10353 ;;      Temps:          0       0       0       0       0
 10354 ;;      Totals:         0       0       0       0       0
 10355 ;;Total ram usage:        0 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    2
 10358 ;; This function calls:
 10359 ;;		_LCD_writeCmd
 10360 ;; This function is called by:
 10361 ;;		_checkTemp
 10362 ;;		_userInput_displayLimits
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           
 10367                           ;psect for function _LCD_fourthLine
 10368  1E70                     _LCD_fourthLine:	
 10369                           
 10370                           ;incstack = 0
 10371                           ; Regs used in _LCD_fourthLine: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10372  1E70  30D8               	movlw	216
 10373  1E71  160A  158A  275E   	fcall	_LCD_writeCmd
 10374  1E74  0008               	return
 10375  1E75                     __end_of_LCD_fourthLine:	
 10376                           
 10377                           	psect	text46
 10378  1F5E                     __ptext46:	
 10379 ;; *************** function _LCD_writeCmd *****************
 10380 ;; Defined at:
 10381 ;;		line 27 in file "LCD.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;  x               1    wreg     unsigned char 
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;  x               1    2[COMMON] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10395 ;;      Params:         0       0       0       0       0
 10396 ;;      Locals:         1       0       0       0       0
 10397 ;;      Temps:          0       0       0       0       0
 10398 ;;      Totals:         1       0       0       0       0
 10399 ;;Total ram usage:        1 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    1
 10402 ;; This function calls:
 10403 ;;		_LCD_delay
 10404 ;; This function is called by:
 10405 ;;		_LCD_init
 10406 ;;		_LCD_clear
 10407 ;;		_LCD_firstLine
 10408 ;;		_LCD_secondLine
 10409 ;;		_LCD_thirdLine
 10410 ;;		_LCD_fourthLine
 10411 ;;		_userInput_getDate
 10412 ;;		_userInput_getTime
 10413 ;;		_userInput_getTempLimits
 10414 ;;		_userInput_displayLimits
 10415 ;;		_userInput_displayTime
 10416 ;;		_userInput_displayDate
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           
 10421                           ;psect for function _LCD_writeCmd
 10422  1F5E                     _LCD_writeCmd:	
 10423                           
 10424                           ;incstack = 0
 10425                           ; Regs used in _LCD_writeCmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10426                           ;LCD_writeCmd@x stored from wreg
 10427  1F5E  00F2               	movwf	LCD_writeCmd@x
 10428                           
 10429                           ;LCD.c: 28:     RA5 = 0;
 10430  1F5F  1283               	bcf	3,5	;RP0=0, select bank0
 10431  1F60  1303               	bcf	3,6	;RP1=0, select bank0
 10432  1F61  1285               	bcf	5,5	;volatile
 10433                           
 10434                           ;LCD.c: 29:     RA4 = 0;
 10435  1F62  1205               	bcf	5,4	;volatile
 10436                           
 10437                           ;LCD.c: 30:     RA3 = 0;
 10438  1F63  1185               	bcf	5,3	;volatile
 10439                           
 10440                           ;LCD.c: 31:     LCD_delay();
 10441  1F64  160A  158A  26E2  160A  158A  	fcall	_LCD_delay
 10442                           
 10443                           ;LCD.c: 32:     RA3 = 1;
 10444  1F69  1283               	bcf	3,5	;RP0=0, select bank0
 10445  1F6A  1303               	bcf	3,6	;RP1=0, select bank0
 10446  1F6B  1585               	bsf	5,3	;volatile
 10447                           
 10448                           ;LCD.c: 33:     LCD_delay();
 10449  1F6C  160A  158A  26E2  160A  158A  	fcall	_LCD_delay
 10450                           
 10451                           ;LCD.c: 34:     PORTD = x;
 10452  1F71  0872               	movf	LCD_writeCmd@x,w
 10453  1F72  1283               	bcf	3,5	;RP0=0, select bank0
 10454  1F73  1303               	bcf	3,6	;RP1=0, select bank0
 10455  1F74  0088               	movwf	8	;volatile
 10456                           
 10457                           ;LCD.c: 35:     LCD_delay();
 10458  1F75  160A  158A  26E2   	fcall	_LCD_delay
 10459                           
 10460                           ;LCD.c: 36:     RA3 = 0;
 10461  1F78  1283               	bcf	3,5	;RP0=0, select bank0
 10462  1F79  1303               	bcf	3,6	;RP1=0, select bank0
 10463  1F7A  1185               	bcf	5,3	;volatile
 10464  1F7B  0008               	return
 10465  1F7C                     __end_of_LCD_writeCmd:	
 10466                           
 10467                           	psect	text47
 10468  1EE2                     __ptext47:	
 10469 ;; *************** function _LCD_delay *****************
 10470 ;; Defined at:
 10471 ;;		line 11 in file "LCD.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;		None
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  i               2    0[COMMON] int 
 10476 ;; Return value:  Size  Location     Type
 10477 ;;                  1    wreg      void 
 10478 ;; Registers used:
 10479 ;;		wreg, status,2, btemp+1
 10480 ;; Tracked objects:
 10481 ;;		On entry : 0/0
 10482 ;;		On exit  : 0/0
 10483 ;;		Unchanged: 0/0
 10484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10485 ;;      Params:         0       0       0       0       0
 10486 ;;      Locals:         2       0       0       0       0
 10487 ;;      Temps:          0       0       0       0       0
 10488 ;;      Totals:         2       0       0       0       0
 10489 ;;Total ram usage:        2 bytes
 10490 ;; Hardware stack levels used:    1
 10491 ;; This function calls:
 10492 ;;		Nothing
 10493 ;; This function is called by:
 10494 ;;		_LCD_writeCmd
 10495 ;;		_LCD_writeChar
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           
 10500                           ;psect for function _LCD_delay
 10501  1EE2                     _LCD_delay:	
 10502                           
 10503                           ;incstack = 0
 10504                           ; Regs used in _LCD_delay: [wreg+status,2+btemp+1]
 10505  1EE2  01F0               	clrf	LCD_delay@i
 10506  1EE3  01F1               	clrf	LCD_delay@i+1
 10507  1EE4                     l3177:	
 10508  1EE4  3001               	movlw	1
 10509  1EE5  07F0               	addwf	LCD_delay@i,f
 10510  1EE6  1803               	skipnc
 10511  1EE7  0AF1               	incf	LCD_delay@i+1,f
 10512  1EE8  3000               	movlw	0
 10513  1EE9  07F1               	addwf	LCD_delay@i+1,f
 10514  1EEA  0871               	movf	LCD_delay@i+1,w
 10515  1EEB  3A80               	xorlw	128
 10516  1EEC  00FF               	movwf	127
 10517  1EED  3080               	movlw	128
 10518  1EEE  027F               	subwf	127,w
 10519  1EEF  1D03               	skipz
 10520  1EF0  2EF3               	goto	u2115
 10521  1EF1  3032               	movlw	50
 10522  1EF2  0270               	subwf	LCD_delay@i,w
 10523  1EF3                     u2115:	
 10524  1EF3  1803               	btfsc	3,0
 10525  1EF4  0008               	return
 10526  1EF5  2EE4               	goto	l3177
 10527  1EF6                     __end_of_LCD_delay:	
 10528                           
 10529                           	psect	text48
 10530  12A4                     __ptext48:	
 10531 ;; *************** function _RTC_setTimeBackup *****************
 10532 ;; Defined at:
 10533 ;;		line 188 in file "RTC.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;  i               2    5[COMMON] int 
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  1    wreg      void 
 10540 ;; Registers used:
 10541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10547 ;;      Params:         0       0       0       0       0
 10548 ;;      Locals:         2       0       0       0       0
 10549 ;;      Temps:          0       0       0       0       0
 10550 ;;      Totals:         2       0       0       0       0
 10551 ;;Total ram usage:        2 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    2
 10554 ;; This function calls:
 10555 ;;		_RTC_ds1302_init
 10556 ;;		_RTC_init
 10557 ;;		_RTC_time_write_1
 10558 ;; This function is called by:
 10559 ;;		_main
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           
 10564                           ;psect for function _RTC_setTimeBackup
 10565  12A4                     _RTC_setTimeBackup:	
 10566                           
 10567                           ;RTC.c: 190:     RTC_init();
 10568                           
 10569                           ;incstack = 0
 10570                           ; Regs used in _RTC_setTimeBackup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10571  12A4  160A  158A  268B  160A  118A  	fcall	_RTC_init
 10572                           
 10573                           ;RTC.c: 191:     RTC_ds1302_init();
 10574  12A9  160A  158A  26CF  160A  118A  	fcall	_RTC_ds1302_init
 10575                           
 10576                           ;RTC.c: 193:    int i;;RTC.c: 194:    RB5=1;
 10577  12AE  1283               	bcf	3,5	;RP0=0, select bank0
 10578  12AF  1303               	bcf	3,6	;RP1=0, select bank0
 10579  12B0  1686               	bsf	6,5	;volatile
 10580                           
 10581                           ;RTC.c: 195:    RTC_time_write_1(0xbe);
 10582  12B1  30BE               	movlw	190
 10583  12B2  160A  118A  212B  160A  118A  	fcall	_RTC_time_write_1
 10584                           
 10585                           ;RTC.c: 196:    for(i=0;i<8;i++)
 10586  12B7  01F5               	clrf	RTC_setTimeBackup@i
 10587  12B8  01F6               	clrf	RTC_setTimeBackup@i+1
 10588  12B9                     l4073:	
 10589                           
 10590                           ;RTC.c: 197:      {;RTC.c: 198:        RTC_time_write_1(RTCtable[i]);
 10591  12B9  0875               	movf	RTC_setTimeBackup@i,w
 10592  12BA  3E01               	addlw	low ((_RTCtable-__stringbase)| (0+32768))
 10593  12BB  0084               	movwf	4
 10594  12BC  160A  118A  2000  160A  118A  	fcall	stringdir
 10595  12C1  160A  118A  212B  160A  118A  	fcall	_RTC_time_write_1
 10596                           
 10597                           ;RTC.c: 199:      }
 10598  12C6  3001               	movlw	1
 10599  12C7  07F5               	addwf	RTC_setTimeBackup@i,f
 10600  12C8  1803               	skipnc
 10601  12C9  0AF6               	incf	RTC_setTimeBackup@i+1,f
 10602  12CA  3000               	movlw	0
 10603  12CB  07F6               	addwf	RTC_setTimeBackup@i+1,f
 10604  12CC  0876               	movf	RTC_setTimeBackup@i+1,w
 10605  12CD  3A80               	xorlw	128
 10606  12CE  00FF               	movwf	127
 10607  12CF  3080               	movlw	128
 10608  12D0  027F               	subwf	127,w
 10609  12D1  1D03               	skipz
 10610  12D2  2AD5               	goto	u3065
 10611  12D3  3008               	movlw	8
 10612  12D4  0275               	subwf	RTC_setTimeBackup@i,w
 10613  12D5                     u3065:	
 10614  12D5  1C03               	skipc
 10615  12D6  2AB9               	goto	l4073
 10616                           
 10617                           ;RTC.c: 200:    RB5=0;
 10618  12D7  1283               	bcf	3,5	;RP0=0, select bank0
 10619  12D8  1303               	bcf	3,6	;RP1=0, select bank0
 10620  12D9  1286               	bcf	6,5	;volatile
 10621  12DA  0008               	return
 10622  12DB                     __end_of_RTC_setTimeBackup:	
 10623                           
 10624                           	psect	text49
 10625  16D4                     __ptext49:	
 10626 ;; *************** function _RTC_setTime *****************
 10627 ;; Defined at:
 10628 ;;		line 44 in file "RTC.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;  time           16    0[BANK0 ] struct Time
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;		None
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      void 
 10635 ;; Registers used:
 10636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10637 ;; Tracked objects:
 10638 ;;		On entry : 0/0
 10639 ;;		On exit  : 0/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10642 ;;      Params:         0      16       0       0       0
 10643 ;;      Locals:         0       0       0       0       0
 10644 ;;      Temps:          2       0       0       0       0
 10645 ;;      Totals:         2      16       0       0       0
 10646 ;;Total ram usage:       18 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; Hardware stack levels required when called:    3
 10649 ;; This function calls:
 10650 ;;		_RTC_combineNibbles
 10651 ;;		_RTC_ds1302_init
 10652 ;;		_RTC_init
 10653 ;;		_RTC_writeClock
 10654 ;; This function is called by:
 10655 ;;		_main
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           
 10660                           ;psect for function _RTC_setTime
 10661  16D4                     _RTC_setTime:	
 10662                           
 10663                           ;RTC.c: 45:     RTC_init();
 10664                           
 10665                           ;incstack = 0
 10666                           ; Regs used in _RTC_setTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10667  16D4  160A  158A  268B  160A  118A  	fcall	_RTC_init
 10668                           
 10669                           ;RTC.c: 46:     RTC_ds1302_init();
 10670  16D9  160A  158A  26CF  160A  118A  	fcall	_RTC_ds1302_init
 10671                           
 10672                           ;RTC.c: 49:     setTable[0] = RTC_combineNibbles(time.sec1,time.sec2);
 10673  16DE  1283               	bcf	3,5	;RP0=0, select bank0
 10674  16DF  1303               	bcf	3,6	;RP1=0, select bank0
 10675  16E0  0821               	movf	RTC_setTime@time+1,w
 10676  16E1  00F7               	movwf	??_RTC_setTime
 10677  16E2  0877               	movf	??_RTC_setTime,w
 10678  16E3  00F0               	movwf	RTC_combineNibbles@second
 10679  16E4  0820               	movf	RTC_setTime@time,w
 10680  16E5  160A  158A  2733  160A  118A  	fcall	_RTC_combineNibbles
 10681  16EA  00F8               	movwf	??_RTC_setTime+1
 10682  16EB  0878               	movf	??_RTC_setTime+1,w
 10683  16EC  1683               	bsf	3,5	;RP0=1, select bank3
 10684  16ED  1703               	bsf	3,6	;RP1=1, select bank3
 10685  16EE  00AF               	movwf	_setTable^(0+384)
 10686                           
 10687                           ;RTC.c: 50:     setTable[1] = RTC_combineNibbles(time.min1,time.min2);
 10688  16EF  1283               	bcf	3,5	;RP0=0, select bank0
 10689  16F0  1303               	bcf	3,6	;RP1=0, select bank0
 10690  16F1  0823               	movf	RTC_setTime@time+3,w
 10691  16F2  00F7               	movwf	??_RTC_setTime
 10692  16F3  0877               	movf	??_RTC_setTime,w
 10693  16F4  00F0               	movwf	RTC_combineNibbles@second
 10694  16F5  0822               	movf	RTC_setTime@time+2,w
 10695  16F6  160A  158A  2733  160A  118A  	fcall	_RTC_combineNibbles
 10696  16FB  00F8               	movwf	??_RTC_setTime+1
 10697  16FC  0878               	movf	??_RTC_setTime+1,w
 10698  16FD  1683               	bsf	3,5	;RP0=1, select bank3
 10699  16FE  1703               	bsf	3,6	;RP1=1, select bank3
 10700  16FF  00B0               	movwf	(_setTable^(0+384)+1)
 10701                           
 10702                           ;RTC.c: 51:     setTable[2] = RTC_combineNibbles(time.hour1,time.hour2);
 10703  1700  1283               	bcf	3,5	;RP0=0, select bank0
 10704  1701  1303               	bcf	3,6	;RP1=0, select bank0
 10705  1702  0825               	movf	RTC_setTime@time+5,w
 10706  1703  00F7               	movwf	??_RTC_setTime
 10707  1704  0877               	movf	??_RTC_setTime,w
 10708  1705  00F0               	movwf	RTC_combineNibbles@second
 10709  1706  0824               	movf	RTC_setTime@time+4,w
 10710  1707  160A  158A  2733  160A  118A  	fcall	_RTC_combineNibbles
 10711  170C  00F8               	movwf	??_RTC_setTime+1
 10712  170D  0878               	movf	??_RTC_setTime+1,w
 10713  170E  1683               	bsf	3,5	;RP0=1, select bank3
 10714  170F  1703               	bsf	3,6	;RP1=1, select bank3
 10715  1710  00B1               	movwf	(_setTable^(0+384)+2)
 10716                           
 10717                           ;RTC.c: 52:     setTable[3] = RTC_combineNibbles(time.day1,time.day2);
 10718  1711  1283               	bcf	3,5	;RP0=0, select bank0
 10719  1712  1303               	bcf	3,6	;RP1=0, select bank0
 10720  1713  0827               	movf	RTC_setTime@time+7,w
 10721  1714  00F7               	movwf	??_RTC_setTime
 10722  1715  0877               	movf	??_RTC_setTime,w
 10723  1716  00F0               	movwf	RTC_combineNibbles@second
 10724  1717  0826               	movf	RTC_setTime@time+6,w
 10725  1718  160A  158A  2733  160A  118A  	fcall	_RTC_combineNibbles
 10726  171D  00F8               	movwf	??_RTC_setTime+1
 10727  171E  0878               	movf	??_RTC_setTime+1,w
 10728  171F  1683               	bsf	3,5	;RP0=1, select bank3
 10729  1720  1703               	bsf	3,6	;RP1=1, select bank3
 10730  1721  00B2               	movwf	(_setTable^(0+384)+3)
 10731                           
 10732                           ;RTC.c: 53:     setTable[4] = RTC_combineNibbles(time.month1,time.month2);
 10733  1722  1283               	bcf	3,5	;RP0=0, select bank0
 10734  1723  1303               	bcf	3,6	;RP1=0, select bank0
 10735  1724  0829               	movf	RTC_setTime@time+9,w
 10736  1725  00F7               	movwf	??_RTC_setTime
 10737  1726  0877               	movf	??_RTC_setTime,w
 10738  1727  00F0               	movwf	RTC_combineNibbles@second
 10739  1728  0828               	movf	RTC_setTime@time+8,w
 10740  1729  160A  158A  2733  160A  118A  	fcall	_RTC_combineNibbles
 10741  172E  00F8               	movwf	??_RTC_setTime+1
 10742  172F  0878               	movf	??_RTC_setTime+1,w
 10743  1730  1683               	bsf	3,5	;RP0=1, select bank3
 10744  1731  1703               	bsf	3,6	;RP1=1, select bank3
 10745  1732  00B3               	movwf	(_setTable^(0+384)+4)
 10746                           
 10747                           ;RTC.c: 54:     setTable[5] = RTC_combineNibbles(time.week1,time.week2);
 10748  1733  1283               	bcf	3,5	;RP0=0, select bank0
 10749  1734  1303               	bcf	3,6	;RP1=0, select bank0
 10750  1735  082B               	movf	RTC_setTime@time+11,w
 10751  1736  00F7               	movwf	??_RTC_setTime
 10752  1737  0877               	movf	??_RTC_setTime,w
 10753  1738  00F0               	movwf	RTC_combineNibbles@second
 10754  1739  082A               	movf	RTC_setTime@time+10,w
 10755  173A  160A  158A  2733  160A  118A  	fcall	_RTC_combineNibbles
 10756  173F  00F8               	movwf	??_RTC_setTime+1
 10757  1740  0878               	movf	??_RTC_setTime+1,w
 10758  1741  1683               	bsf	3,5	;RP0=1, select bank3
 10759  1742  1703               	bsf	3,6	;RP1=1, select bank3
 10760  1743  00B4               	movwf	(_setTable^(0+384)+5)
 10761                           
 10762                           ;RTC.c: 55:     setTable[6] = RTC_combineNibbles(time.year1,time.year2);
 10763  1744  1283               	bcf	3,5	;RP0=0, select bank0
 10764  1745  1303               	bcf	3,6	;RP1=0, select bank0
 10765  1746  082D               	movf	RTC_setTime@time+13,w
 10766  1747  00F7               	movwf	??_RTC_setTime
 10767  1748  0877               	movf	??_RTC_setTime,w
 10768  1749  00F0               	movwf	RTC_combineNibbles@second
 10769  174A  082C               	movf	RTC_setTime@time+12,w
 10770  174B  160A  158A  2733  160A  118A  	fcall	_RTC_combineNibbles
 10771  1750  00F8               	movwf	??_RTC_setTime+1
 10772  1751  0878               	movf	??_RTC_setTime+1,w
 10773  1752  1683               	bsf	3,5	;RP0=1, select bank3
 10774  1753  1703               	bsf	3,6	;RP1=1, select bank3
 10775  1754  00B5               	movwf	(_setTable^(0+384)+6)
 10776                           
 10777                           ;RTC.c: 56:     setTable[7] = 0x00;
 10778  1755  01B6               	clrf	(_setTable^(0+384)+7)
 10779                           
 10780                           ;RTC.c: 58:     RTC_writeClock();
 10781  1756  160A  118A  2206   	fcall	_RTC_writeClock
 10782  1759  0008               	return
 10783  175A                     __end_of_RTC_setTime:	
 10784                           
 10785                           	psect	text50
 10786  1206                     __ptext50:	
 10787 ;; *************** function _RTC_writeClock *****************
 10788 ;; Defined at:
 10789 ;;		line 172 in file "RTC.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;		None
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  i               2    5[COMMON] int 
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10803 ;;      Params:         0       0       0       0       0
 10804 ;;      Locals:         2       0       0       0       0
 10805 ;;      Temps:          0       0       0       0       0
 10806 ;;      Totals:         2       0       0       0       0
 10807 ;;Total ram usage:        2 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    2
 10810 ;; This function calls:
 10811 ;;		_RTC_ds1302_init
 10812 ;;		_RTC_init
 10813 ;;		_RTC_time_write_1
 10814 ;; This function is called by:
 10815 ;;		_RTC_setTime
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           
 10820                           ;psect for function _RTC_writeClock
 10821  1206                     _RTC_writeClock:	
 10822                           
 10823                           ;RTC.c: 174:     RTC_init();
 10824                           
 10825                           ;incstack = 0
 10826                           ; Regs used in _RTC_writeClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10827  1206  160A  158A  268B  160A  118A  	fcall	_RTC_init
 10828                           
 10829                           ;RTC.c: 175:     RTC_ds1302_init();
 10830  120B  160A  158A  26CF  160A  118A  	fcall	_RTC_ds1302_init
 10831                           
 10832                           ;RTC.c: 177:    int i;;RTC.c: 178:    RB5=1;
 10833  1210  1283               	bcf	3,5	;RP0=0, select bank0
 10834  1211  1303               	bcf	3,6	;RP1=0, select bank0
 10835  1212  1686               	bsf	6,5	;volatile
 10836                           
 10837                           ;RTC.c: 179:    RTC_time_write_1(0xbe);
 10838  1213  30BE               	movlw	190
 10839  1214  160A  118A  212B  160A  118A  	fcall	_RTC_time_write_1
 10840                           
 10841                           ;RTC.c: 180:    for(i=0;i<8;i++)
 10842  1219  01F5               	clrf	RTC_writeClock@i
 10843  121A  01F6               	clrf	RTC_writeClock@i+1
 10844  121B                     l3801:	
 10845                           
 10846                           ;RTC.c: 181:      {;RTC.c: 183:        RTC_time_write_1(setTable[i]);
 10847  121B  0875               	movf	RTC_writeClock@i,w
 10848  121C  3EAF               	addlw	(low (_setTable| (0+256)))& (0+255)
 10849  121D  0084               	movwf	4
 10850  121E  1783               	bsf	3,7	;select IRP bank3
 10851  121F  0800               	movf	0,w
 10852  1220  160A  118A  212B  160A  118A  	fcall	_RTC_time_write_1
 10853                           
 10854                           ;RTC.c: 184:      }
 10855  1225  3001               	movlw	1
 10856  1226  07F5               	addwf	RTC_writeClock@i,f
 10857  1227  1803               	skipnc
 10858  1228  0AF6               	incf	RTC_writeClock@i+1,f
 10859  1229  3000               	movlw	0
 10860  122A  07F6               	addwf	RTC_writeClock@i+1,f
 10861  122B  0876               	movf	RTC_writeClock@i+1,w
 10862  122C  3A80               	xorlw	128
 10863  122D  00FF               	movwf	127
 10864  122E  3080               	movlw	128
 10865  122F  027F               	subwf	127,w
 10866  1230  1D03               	skipz
 10867  1231  2A34               	goto	u2785
 10868  1232  3008               	movlw	8
 10869  1233  0275               	subwf	RTC_writeClock@i,w
 10870  1234                     u2785:	
 10871  1234  1C03               	skipc
 10872  1235  2A1B               	goto	l3801
 10873                           
 10874                           ;RTC.c: 185:    RB5=0;
 10875  1236  1283               	bcf	3,5	;RP0=0, select bank0
 10876  1237  1303               	bcf	3,6	;RP1=0, select bank0
 10877  1238  1286               	bcf	6,5	;volatile
 10878  1239  0008               	return
 10879  123A                     __end_of_RTC_writeClock:	
 10880                           
 10881                           	psect	text51
 10882  1E8B                     __ptext51:	
 10883 ;; *************** function _RTC_init *****************
 10884 ;; Defined at:
 10885 ;;		line 256 in file "RTC.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;		None
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      void 
 10892 ;; Registers used:
 10893 ;;		wreg, status,2
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10899 ;;      Params:         0       0       0       0       0
 10900 ;;      Locals:         0       0       0       0       0
 10901 ;;      Temps:          0       0       0       0       0
 10902 ;;      Totals:         0       0       0       0       0
 10903 ;;Total ram usage:        0 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; This function calls:
 10906 ;;		Nothing
 10907 ;; This function is called by:
 10908 ;;		_RTC_setTime
 10909 ;;		_RTC_getTime
 10910 ;;		_RTC_writeClock
 10911 ;;		_RTC_setTimeBackup
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function _RTC_init
 10917  1E8B                     _RTC_init:	
 10918                           
 10919                           ;RTC.c: 258:     ADCON1=0X06;
 10920                           
 10921                           ;incstack = 0
 10922                           ; Regs used in _RTC_init: [wreg+status,2]
 10923  1E8B  3006               	movlw	6
 10924  1E8C  1683               	bsf	3,5	;RP0=1, select bank1
 10925  1E8D  1303               	bcf	3,6	;RP1=0, select bank1
 10926  1E8E  009F               	movwf	31	;volatile
 10927                           
 10928                           ;RTC.c: 259:     TRISB=0X02;
 10929  1E8F  3002               	movlw	2
 10930  1E90  0086               	movwf	6	;volatile
 10931                           
 10932                           ;RTC.c: 260:     OPTION_REG=0X00;
 10933  1E91  0181               	clrf	1	;volatile
 10934  1E92  0008               	return
 10935  1E93                     __end_of_RTC_init:	
 10936                           
 10937                           	psect	text52
 10938  1ECF                     __ptext52:	
 10939 ;; *************** function _RTC_ds1302_init *****************
 10940 ;; Defined at:
 10941 ;;		line 160 in file "RTC.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;		None
 10944 ;; Auto vars:     Size  Location     Type
 10945 ;;		None
 10946 ;; Return value:  Size  Location     Type
 10947 ;;                  1    wreg      void 
 10948 ;; Registers used:
 10949 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10950 ;; Tracked objects:
 10951 ;;		On entry : 0/0
 10952 ;;		On exit  : 0/0
 10953 ;;		Unchanged: 0/0
 10954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10955 ;;      Params:         0       0       0       0       0
 10956 ;;      Locals:         0       0       0       0       0
 10957 ;;      Temps:          0       0       0       0       0
 10958 ;;      Totals:         0       0       0       0       0
 10959 ;;Total ram usage:        0 bytes
 10960 ;; Hardware stack levels used:    1
 10961 ;; Hardware stack levels required when called:    1
 10962 ;; This function calls:
 10963 ;;		_RTC_time_write_1
 10964 ;; This function is called by:
 10965 ;;		_RTC_setTime
 10966 ;;		_RTC_getTime
 10967 ;;		_RTC_writeClock
 10968 ;;		_RTC_setTimeBackup
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           
 10973                           ;psect for function _RTC_ds1302_init
 10974  1ECF                     _RTC_ds1302_init:	
 10975                           
 10976                           ;RTC.c: 162:    RB0=0;
 10977                           
 10978                           ;incstack = 0
 10979                           ; Regs used in _RTC_ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10980  1ECF  1283               	bcf	3,5	;RP0=0, select bank0
 10981  1ED0  1303               	bcf	3,6	;RP1=0, select bank0
 10982  1ED1  1006               	bcf	6,0	;volatile
 10983                           
 10984                           ;RTC.c: 163:    RB5 =0;
 10985  1ED2  1286               	bcf	6,5	;volatile
 10986                           
 10987                           ;RTC.c: 164:    RB5=1;
 10988  1ED3  1686               	bsf	6,5	;volatile
 10989                           
 10990                           ;RTC.c: 165:    RTC_time_write_1(0x8e);
 10991  1ED4  308E               	movlw	142
 10992  1ED5  160A  118A  212B  160A  158A  	fcall	_RTC_time_write_1
 10993                           
 10994                           ;RTC.c: 166:    RTC_time_write_1(0);
 10995  1EDA  3000               	movlw	0
 10996  1EDB  160A  118A  212B   	fcall	_RTC_time_write_1
 10997                           
 10998                           ;RTC.c: 167:    RB5=0;
 10999  1EDE  1283               	bcf	3,5	;RP0=0, select bank0
 11000  1EDF  1303               	bcf	3,6	;RP1=0, select bank0
 11001  1EE0  1286               	bcf	6,5	;volatile
 11002  1EE1  0008               	return
 11003  1EE2                     __end_of_RTC_ds1302_init:	
 11004                           
 11005                           	psect	text53
 11006  112B                     __ptext53:	
 11007 ;; *************** function _RTC_time_write_1 *****************
 11008 ;; Defined at:
 11009 ;;		line 218 in file "RTC.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;  time_tx         1    wreg     unsigned char 
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  time_tx         1    4[COMMON] unsigned char 
 11014 ;;  j               2    2[COMMON] int 
 11015 ;; Return value:  Size  Location     Type
 11016 ;;                  1    wreg      void 
 11017 ;; Registers used:
 11018 ;;		wreg, status,2, status,0, btemp+1
 11019 ;; Tracked objects:
 11020 ;;		On entry : 0/0
 11021 ;;		On exit  : 0/0
 11022 ;;		Unchanged: 0/0
 11023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11024 ;;      Params:         0       0       0       0       0
 11025 ;;      Locals:         3       0       0       0       0
 11026 ;;      Temps:          2       0       0       0       0
 11027 ;;      Totals:         5       0       0       0       0
 11028 ;;Total ram usage:        5 bytes
 11029 ;; Hardware stack levels used:    1
 11030 ;; This function calls:
 11031 ;;		Nothing
 11032 ;; This function is called by:
 11033 ;;		_RTC_ds1302_init
 11034 ;;		_RTC_writeClock
 11035 ;;		_RTC_setTimeBackup
 11036 ;;		_RTC_readClock
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           
 11041                           ;psect for function _RTC_time_write_1
 11042  112B                     _RTC_time_write_1:	
 11043                           
 11044                           ;incstack = 0
 11045                           ; Regs used in _RTC_time_write_1: [wreg+status,2+status,0+btemp+1]
 11046                           ;RTC_time_write_1@time_tx stored from wreg
 11047  112B  00F4               	movwf	RTC_time_write_1@time_tx
 11048                           
 11049                           ;RTC.c: 218: void RTC_time_write_1(unsigned char time_tx);RTC.c: 219:  {;RTC.c: 220:    
      +                           int j;;RTC.c: 221:     for(j=0;j<8;j++)
 11050  112C  01F2               	clrf	RTC_time_write_1@j
 11051  112D  01F3               	clrf	RTC_time_write_1@j+1
 11052  112E                     l292:	
 11053                           
 11054                           ;RTC.c: 222:       {;RTC.c: 223:         RB4=0;
 11055  112E  1283               	bcf	3,5	;RP0=0, select bank0
 11056  112F  1303               	bcf	3,6	;RP1=0, select bank0
 11057  1130  1206               	bcf	6,4	;volatile
 11058                           
 11059                           ;RTC.c: 224:         RB0=0;
 11060  1131  1006               	bcf	6,0	;volatile
 11061                           
 11062                           ;RTC.c: 225:         if(time_tx&0x01)
 11063  1132  1874               	btfsc	RTC_time_write_1@time_tx,0
 11064                           
 11065                           ;RTC.c: 226:           {;RTC.c: 227:             RB4=1;
 11066  1133  1606               	bsf	6,4	;volatile
 11067                           
 11068                           ;RTC.c: 229:         time_tx=time_tx>>1;
 11069  1134  0874               	movf	RTC_time_write_1@time_tx,w
 11070  1135  00F0               	movwf	??_RTC_time_write_1
 11071  1136  1003               	clrc
 11072  1137  0C70               	rrf	??_RTC_time_write_1,w
 11073  1138  00F1               	movwf	??_RTC_time_write_1+1
 11074  1139  0871               	movf	??_RTC_time_write_1+1,w
 11075  113A  00F4               	movwf	RTC_time_write_1@time_tx
 11076                           
 11077                           ;RTC.c: 230:         RB0=1;
 11078  113B  1406               	bsf	6,0	;volatile
 11079                           
 11080                           ;RTC.c: 231:        }
 11081  113C  3001               	movlw	1
 11082  113D  07F2               	addwf	RTC_time_write_1@j,f
 11083  113E  1803               	skipnc
 11084  113F  0AF3               	incf	RTC_time_write_1@j+1,f
 11085  1140  3000               	movlw	0
 11086  1141  07F3               	addwf	RTC_time_write_1@j+1,f
 11087  1142  0873               	movf	RTC_time_write_1@j+1,w
 11088  1143  3A80               	xorlw	128
 11089  1144  00FF               	movwf	127
 11090  1145  3080               	movlw	128
 11091  1146  027F               	subwf	127,w
 11092  1147  1D03               	skipz
 11093  1148  294B               	goto	u2145
 11094  1149  3008               	movlw	8
 11095  114A  0272               	subwf	RTC_time_write_1@j,w
 11096  114B                     u2145:	
 11097  114B  1C03               	skipc
 11098  114C  292E               	goto	l292
 11099                           
 11100                           ;RTC.c: 232:       RB0=0;
 11101  114D  1283               	bcf	3,5	;RP0=0, select bank0
 11102  114E  1303               	bcf	3,6	;RP1=0, select bank0
 11103  114F  1006               	bcf	6,0	;volatile
 11104  1150  0008               	return
 11105  1151                     __end_of_RTC_time_write_1:	
 11106                           
 11107                           	psect	text54
 11108  1F33                     __ptext54:	
 11109 ;; *************** function _RTC_combineNibbles *****************
 11110 ;; Defined at:
 11111 ;;		line 114 in file "RTC.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;  first           1    wreg     unsigned char 
 11114 ;;  second          1    0[COMMON] unsigned char 
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;  first           1    3[COMMON] unsigned char 
 11117 ;;  returnChar      1    4[COMMON] unsigned char 
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  1    wreg      unsigned char 
 11120 ;; Registers used:
 11121 ;;		wreg, status,2, status,0
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11127 ;;      Params:         1       0       0       0       0
 11128 ;;      Locals:         2       0       0       0       0
 11129 ;;      Temps:          2       0       0       0       0
 11130 ;;      Totals:         5       0       0       0       0
 11131 ;;Total ram usage:        5 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; This function calls:
 11134 ;;		Nothing
 11135 ;; This function is called by:
 11136 ;;		_RTC_setTime
 11137 ;; This function uses a non-reentrant model
 11138 ;;
 11139                           
 11140                           
 11141                           ;psect for function _RTC_combineNibbles
 11142  1F33                     _RTC_combineNibbles:	
 11143                           
 11144                           ;incstack = 0
 11145                           ; Regs used in _RTC_combineNibbles: [wreg+status,2+status,0]
 11146                           ;RTC_combineNibbles@first stored from wreg
 11147  1F33  00F3               	movwf	RTC_combineNibbles@first
 11148                           
 11149                           ;RTC.c: 114: char RTC_combineNibbles(char first, char second);RTC.c: 115: {;RTC.c: 116: 
      +                              char returnChar= first << 4;
 11150  1F34  0873               	movf	RTC_combineNibbles@first,w
 11151  1F35  00F1               	movwf	??_RTC_combineNibbles
 11152  1F36  3003               	movlw	3
 11153  1F37                     u2775:	
 11154  1F37  1003               	clrc
 11155  1F38  0DF1               	rlf	??_RTC_combineNibbles,f
 11156  1F39  3EFF               	addlw	-1
 11157  1F3A  1D03               	skipz
 11158  1F3B  2F37               	goto	u2775
 11159  1F3C  1003               	clrc
 11160  1F3D  0D71               	rlf	??_RTC_combineNibbles,w
 11161  1F3E  00F2               	movwf	??_RTC_combineNibbles+1
 11162  1F3F  0872               	movf	??_RTC_combineNibbles+1,w
 11163  1F40  00F4               	movwf	RTC_combineNibbles@returnChar
 11164                           
 11165                           ;RTC.c: 117:     returnChar = returnChar | second;
 11166  1F41  0874               	movf	RTC_combineNibbles@returnChar,w
 11167  1F42  0470               	iorwf	RTC_combineNibbles@second,w
 11168  1F43  00F1               	movwf	??_RTC_combineNibbles
 11169  1F44  0871               	movf	??_RTC_combineNibbles,w
 11170  1F45  00F4               	movwf	RTC_combineNibbles@returnChar
 11171                           
 11172                           ;RTC.c: 118:     return returnChar;
 11173  1F46  0874               	movf	RTC_combineNibbles@returnChar,w
 11174  1F47  0008               	return
 11175  1F48                     __end_of_RTC_combineNibbles:	
 11176                           
 11177                           	psect	text55
 11178  13C4                     __ptext55:	
 11179 ;; *************** function _EEPROM_limitsWrite *****************
 11180 ;; Defined at:
 11181 ;;		line 36 in file "EEPROM.c"
 11182 ;; Parameters:    Size  Location     Type
 11183 ;;  limits          8    3[COMMON] struct Limits
 11184 ;;  day             1   11[COMMON] _Bool 
 11185 ;; Auto vars:     Size  Location     Type
 11186 ;;  addressStart    2    0[BANK0 ] int 
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  1    wreg      void 
 11189 ;; Registers used:
 11190 ;;		wreg, status,2, status,0, pclath, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11196 ;;      Params:         9       0       0       0       0
 11197 ;;      Locals:         0       2       0       0       0
 11198 ;;      Temps:          1       0       0       0       0
 11199 ;;      Totals:        10       2       0       0       0
 11200 ;;Total ram usage:       12 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:    1
 11203 ;; This function calls:
 11204 ;;		_eeprom_write
 11205 ;; This function is called by:
 11206 ;;		_main
 11207 ;; This function uses a non-reentrant model
 11208 ;;
 11209                           
 11210                           
 11211                           ;psect for function _EEPROM_limitsWrite
 11212  13C4                     _EEPROM_limitsWrite:	
 11213                           
 11214                           ;EEPROM.c: 37:     int addressStart;;EEPROM.c: 40:     if (day) addressStart = 0;
 11215                           
 11216                           ;incstack = 0
 11217                           ; Regs used in _EEPROM_limitsWrite: [wreg+status,2+status,0+pclath+cstack]
 11218  13C4  087B               	movf	EEPROM_limitsWrite@day,w
 11219  13C5  1903               	btfsc	3,2
 11220  13C6  2BCC               	goto	l4111
 11221  13C7  1283               	bcf	3,5	;RP0=0, select bank0
 11222  13C8  1303               	bcf	3,6	;RP1=0, select bank0
 11223  13C9  01A0               	clrf	EEPROM_limitsWrite@addressStart
 11224  13CA  01A1               	clrf	EEPROM_limitsWrite@addressStart+1
 11225  13CB  2BD2               	goto	l4113
 11226  13CC                     l4111:	
 11227  13CC  3004               	movlw	4
 11228  13CD  1283               	bcf	3,5	;RP0=0, select bank0
 11229  13CE  1303               	bcf	3,6	;RP1=0, select bank0
 11230  13CF  00A0               	movwf	EEPROM_limitsWrite@addressStart
 11231  13D0  3000               	movlw	0
 11232  13D1  00A1               	movwf	EEPROM_limitsWrite@addressStart+1
 11233  13D2                     l4113:	
 11234                           
 11235                           ;EEPROM.c: 44:     eeprom_write(addressStart,limits.lowLimit);
 11236  13D2  0873               	movf	EEPROM_limitsWrite@limits,w
 11237  13D3  00FC               	movwf	??_EEPROM_limitsWrite
 11238  13D4  087C               	movf	??_EEPROM_limitsWrite,w
 11239  13D5  00F0               	movwf	eeprom_write@value
 11240  13D6  0820               	movf	EEPROM_limitsWrite@addressStart,w
 11241  13D7  160A  118A  2105  160A  118A  	fcall	_eeprom_write
 11242                           
 11243                           ;EEPROM.c: 45:     eeprom_write(addressStart + 1,limits.low);
 11244  13DC  0875               	movf	EEPROM_limitsWrite@limits+2,w
 11245  13DD  00FC               	movwf	??_EEPROM_limitsWrite
 11246  13DE  087C               	movf	??_EEPROM_limitsWrite,w
 11247  13DF  00F0               	movwf	eeprom_write@value
 11248  13E0  1283               	bcf	3,5	;RP0=0, select bank0
 11249  13E1  1303               	bcf	3,6	;RP1=0, select bank0
 11250  13E2  0820               	movf	EEPROM_limitsWrite@addressStart,w
 11251  13E3  3E01               	addlw	1
 11252  13E4  160A  118A  2105  160A  118A  	fcall	_eeprom_write
 11253                           
 11254                           ;EEPROM.c: 46:     eeprom_write(addressStart + 2,limits.high);
 11255  13E9  0877               	movf	EEPROM_limitsWrite@limits+4,w
 11256  13EA  00FC               	movwf	??_EEPROM_limitsWrite
 11257  13EB  087C               	movf	??_EEPROM_limitsWrite,w
 11258  13EC  00F0               	movwf	eeprom_write@value
 11259  13ED  1283               	bcf	3,5	;RP0=0, select bank0
 11260  13EE  1303               	bcf	3,6	;RP1=0, select bank0
 11261  13EF  0820               	movf	EEPROM_limitsWrite@addressStart,w
 11262  13F0  3E02               	addlw	2
 11263  13F1  160A  118A  2105  160A  118A  	fcall	_eeprom_write
 11264                           
 11265                           ;EEPROM.c: 47:     eeprom_write(addressStart + 3,limits.highLimit);
 11266  13F6  0879               	movf	EEPROM_limitsWrite@limits+6,w
 11267  13F7  00FC               	movwf	??_EEPROM_limitsWrite
 11268  13F8  087C               	movf	??_EEPROM_limitsWrite,w
 11269  13F9  00F0               	movwf	eeprom_write@value
 11270  13FA  1283               	bcf	3,5	;RP0=0, select bank0
 11271  13FB  1303               	bcf	3,6	;RP1=0, select bank0
 11272  13FC  0820               	movf	EEPROM_limitsWrite@addressStart,w
 11273  13FD  3E03               	addlw	3
 11274  13FE  160A  118A  2105   	fcall	_eeprom_write
 11275  1401  0008               	return
 11276  1402                     __end_of_EEPROM_limitsWrite:	
 11277                           
 11278                           	psect	text56
 11279  1105                     __ptext56:	
 11280 ;; *************** function _eeprom_write *****************
 11281 ;; Defined at:
 11282 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eewrite.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  addr            1    wreg     unsigned char 
 11285 ;;  value           1    0[COMMON] unsigned char 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  addr            1    2[COMMON] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  1    wreg      void 
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11297 ;;      Params:         1       0       0       0       0
 11298 ;;      Locals:         1       0       0       0       0
 11299 ;;      Temps:          1       0       0       0       0
 11300 ;;      Totals:         3       0       0       0       0
 11301 ;;Total ram usage:        3 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; This function calls:
 11304 ;;		Nothing
 11305 ;; This function is called by:
 11306 ;;		_EEPROM_limitsWrite
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           
 11311                           ;psect for function _eeprom_write
 11312  1105                     _eeprom_write:	
 11313                           
 11314                           ;incstack = 0
 11315                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
 11316                           ;eeprom_write@addr stored from wreg
 11317  1105  00F2               	movwf	eeprom_write@addr
 11318  1106                     l763:	
 11319                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eewrite.c: 6: eeprom_w
      +                          rite(unsigned char addr, unsigned char value);C:\Program Files (x86)\Microchip\xc8\v2.05
      +                          \pic\sources\c90\pic\__eewrite.c: 7: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\so
      +                          urces\c90\pic\__eewrite.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); E
      +                          EDATA = (value); EECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.
      +                          CARRY = 1; } INTCONbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECO
      +                          N1bits.WR = 1; EECON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } whil
      +                          e (0);
 11320                           
 11321  1106  1683               	bsf	3,5	;RP0=1, select bank3
 11322  1107  1703               	bsf	3,6	;RP1=1, select bank3
 11323  1108  188C               	btfsc	12,1	;volsfr
 11324  1109  2906               	goto	l763
 11325  110A  0872               	movf	eeprom_write@addr,w
 11326  110B  1283               	bcf	3,5	;RP0=0, select bank2
 11327  110C  1703               	bsf	3,6	;RP1=1, select bank2
 11328  110D  008D               	movwf	13	;volatile
 11329  110E  0870               	movf	eeprom_write@value,w
 11330  110F  008C               	movwf	12	;volatile
 11331  1110  303F               	movlw	63
 11332  1111  00F1               	movwf	??_eeprom_write
 11333  1112  0871               	movf	??_eeprom_write,w
 11334  1113  1683               	bsf	3,5	;RP0=1, select bank3
 11335  1114  1703               	bsf	3,6	;RP1=1, select bank3
 11336  1115  058C               	andwf	12,f	;volsfr
 11337  1116  1283               	bcf	3,5	;RP0=0, select bank0
 11338  1117  1303               	bcf	3,6	;RP1=0, select bank0
 11339  1118  1003               	bcf	3,0	;volatile
 11340  1119  1B8B               	btfsc	11,7	;volatile
 11341  111A  1403               	bsf	3,0	;volatile
 11342  111B  138B               	bcf	11,7	;volatile
 11343  111C  1683               	bsf	3,5	;RP0=1, select bank3
 11344  111D  1703               	bsf	3,6	;RP1=1, select bank3
 11345  111E  150C               	bsf	12,2	;volsfr
 11346  111F  3055               	movlw	85
 11347  1120  008D               	movwf	13	;volsfr
 11348  1121  30AA               	movlw	170
 11349  1122  008D               	movwf	13	;volsfr
 11350  1123  148C               	bsf	12,1	;volsfr
 11351  1124  110C               	bcf	12,2	;volsfr
 11352  1125  1283               	bcf	3,5	;RP0=0, select bank0
 11353  1126  1303               	bcf	3,6	;RP1=0, select bank0
 11354  1127  1C03               	btfss	3,0	;volatile
 11355  1128  0008               	return
 11356  1129  178B               	bsf	11,7	;volatile
 11357  112A  0008               	return
 11358  112B                     __end_of_eeprom_write:	
 11359                           
 11360                           	psect	text57
 11361  1650                     __ptext57:	
 11362 ;; *************** function _EEPROM_limitsRead *****************
 11363 ;; Defined at:
 11364 ;;		line 17 in file "EEPROM.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  day             1    wreg     _Bool 
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;  day             1    8[BANK0 ] _Bool 
 11369 ;;  dayLimit        8   11[BANK0 ] struct Limits
 11370 ;;  addressStart    2    9[BANK0 ] int 
 11371 ;;  highLimit       2    6[BANK0 ] int 
 11372 ;;  high            2    4[BANK0 ] int 
 11373 ;;  low             2    2[BANK0 ] int 
 11374 ;;  lowLimit        2    0[BANK0 ] int 
 11375 ;; Return value:  Size  Location     Type
 11376 ;;                  8    2[COMMON] struct Limits
 11377 ;; Registers used:
 11378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11384 ;;      Params:         8       0       0       0       0
 11385 ;;      Locals:         0      19       0       0       0
 11386 ;;      Temps:          4       0       0       0       0
 11387 ;;      Totals:        12      19       0       0       0
 11388 ;;Total ram usage:       31 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    1
 11391 ;; This function calls:
 11392 ;;		_eeprom_read
 11393 ;; This function is called by:
 11394 ;;		_main
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           
 11399                           ;psect for function _EEPROM_limitsRead
 11400  1650                     _EEPROM_limitsRead:	
 11401                           
 11402                           ;incstack = 0
 11403                           ; Regs used in _EEPROM_limitsRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11404                           ;EEPROM_limitsRead@day stored from wreg
 11405  1650  1283               	bcf	3,5	;RP0=0, select bank0
 11406  1651  1303               	bcf	3,6	;RP1=0, select bank0
 11407  1652  00A8               	movwf	EEPROM_limitsRead@day
 11408                           
 11409                           ;EEPROM.c: 18:     int addressStart;;EEPROM.c: 21:     if (day) addressStart = 0;
 11410  1653  0828               	movf	EEPROM_limitsRead@day,w
 11411  1654  1903               	btfsc	3,2
 11412  1655  2E59               	goto	l4083
 11413  1656  01A9               	clrf	EEPROM_limitsRead@addressStart
 11414  1657  01AA               	clrf	EEPROM_limitsRead@addressStart+1
 11415  1658  2E5D               	goto	l4085
 11416  1659                     l4083:	
 11417  1659  3004               	movlw	4
 11418  165A  00A9               	movwf	EEPROM_limitsRead@addressStart
 11419  165B  3000               	movlw	0
 11420  165C  00AA               	movwf	EEPROM_limitsRead@addressStart+1
 11421  165D                     l4085:	
 11422                           
 11423                           ;EEPROM.c: 25:     int lowLimit, low, high, highLimit;;EEPROM.c: 26:     lowLimit = (int
      +                          )eeprom_read(addressStart);
 11424  165D  0829               	movf	EEPROM_limitsRead@addressStart,w
 11425  165E  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11426  1663  00FA               	movwf	??_EEPROM_limitsRead
 11427  1664  01FB               	clrf	??_EEPROM_limitsRead+1
 11428  1665  087A               	movf	??_EEPROM_limitsRead,w
 11429  1666  1283               	bcf	3,5	;RP0=0, select bank0
 11430  1667  1303               	bcf	3,6	;RP1=0, select bank0
 11431  1668  00A0               	movwf	EEPROM_limitsRead@lowLimit
 11432  1669  087B               	movf	??_EEPROM_limitsRead+1,w
 11433  166A  00A1               	movwf	EEPROM_limitsRead@lowLimit+1
 11434                           
 11435                           ;EEPROM.c: 27:     low = (int)eeprom_read(addressStart+1);
 11436  166B  0829               	movf	EEPROM_limitsRead@addressStart,w
 11437  166C  3E01               	addlw	1
 11438  166D  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11439  1672  00FA               	movwf	??_EEPROM_limitsRead
 11440  1673  01FB               	clrf	??_EEPROM_limitsRead+1
 11441  1674  087A               	movf	??_EEPROM_limitsRead,w
 11442  1675  1283               	bcf	3,5	;RP0=0, select bank0
 11443  1676  1303               	bcf	3,6	;RP1=0, select bank0
 11444  1677  00A2               	movwf	EEPROM_limitsRead@low
 11445  1678  087B               	movf	??_EEPROM_limitsRead+1,w
 11446  1679  00A3               	movwf	EEPROM_limitsRead@low+1
 11447                           
 11448                           ;EEPROM.c: 28:     high = (int)eeprom_read(addressStart+2);
 11449  167A  0829               	movf	EEPROM_limitsRead@addressStart,w
 11450  167B  3E02               	addlw	2
 11451  167C  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11452  1681  00FA               	movwf	??_EEPROM_limitsRead
 11453  1682  01FB               	clrf	??_EEPROM_limitsRead+1
 11454  1683  087A               	movf	??_EEPROM_limitsRead,w
 11455  1684  1283               	bcf	3,5	;RP0=0, select bank0
 11456  1685  1303               	bcf	3,6	;RP1=0, select bank0
 11457  1686  00A4               	movwf	EEPROM_limitsRead@high
 11458  1687  087B               	movf	??_EEPROM_limitsRead+1,w
 11459  1688  00A5               	movwf	EEPROM_limitsRead@high+1
 11460                           
 11461                           ;EEPROM.c: 29:     highLimit = (int)eeprom_read(addressStart+3);
 11462  1689  0829               	movf	EEPROM_limitsRead@addressStart,w
 11463  168A  3E03               	addlw	3
 11464  168B  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11465  1690  00FA               	movwf	??_EEPROM_limitsRead
 11466  1691  01FB               	clrf	??_EEPROM_limitsRead+1
 11467  1692  087A               	movf	??_EEPROM_limitsRead,w
 11468  1693  1283               	bcf	3,5	;RP0=0, select bank0
 11469  1694  1303               	bcf	3,6	;RP1=0, select bank0
 11470  1695  00A6               	movwf	EEPROM_limitsRead@highLimit
 11471  1696  087B               	movf	??_EEPROM_limitsRead+1,w
 11472  1697  00A7               	movwf	EEPROM_limitsRead@highLimit+1
 11473                           
 11474                           ;EEPROM.c: 32:     struct Limits dayLimit = {lowLimit, low, high, highLimit};
 11475  1698  302B               	movlw	EEPROM_limitsRead@dayLimit& (0+255)
 11476  1699  0084               	movwf	4
 11477  169A  30A0               	movlw	low EEPROM_limitsRead@F940
 11478  169B  00FA               	movwf	??_EEPROM_limitsRead
 11479  169C  0804               	movf	4,w
 11480  169D  00FB               	movwf	??_EEPROM_limitsRead+1
 11481  169E  3008               	movlw	8
 11482  169F  00FC               	movwf	??_EEPROM_limitsRead+2
 11483  16A0                     u3080:	
 11484  16A0  087A               	movf	??_EEPROM_limitsRead,w
 11485  16A1  0084               	movwf	4
 11486  16A2  1783               	bsf	3,7	;select IRP bank3
 11487  16A3  0800               	movf	0,w
 11488  16A4  00FD               	movwf	??_EEPROM_limitsRead+3
 11489  16A5  0AFA               	incf	??_EEPROM_limitsRead,f
 11490  16A6  087B               	movf	??_EEPROM_limitsRead+1,w
 11491  16A7  0084               	movwf	4
 11492  16A8  1383               	bcf	3,7	;select IRP bank0
 11493  16A9  087D               	movf	??_EEPROM_limitsRead+3,w
 11494  16AA  0080               	movwf	0
 11495  16AB  0AFB               	incf	??_EEPROM_limitsRead+1,f
 11496  16AC  0BFC               	decfsz	??_EEPROM_limitsRead+2,f
 11497  16AD  2EA0               	goto	u3080
 11498  16AE  0821               	movf	EEPROM_limitsRead@lowLimit+1,w
 11499  16AF  00AC               	movwf	EEPROM_limitsRead@dayLimit+1
 11500  16B0  0820               	movf	EEPROM_limitsRead@lowLimit,w
 11501  16B1  00AB               	movwf	EEPROM_limitsRead@dayLimit
 11502  16B2  0823               	movf	EEPROM_limitsRead@low+1,w
 11503  16B3  00AE               	movwf	EEPROM_limitsRead@dayLimit+3
 11504  16B4  0822               	movf	EEPROM_limitsRead@low,w
 11505  16B5  00AD               	movwf	EEPROM_limitsRead@dayLimit+2
 11506  16B6  0825               	movf	EEPROM_limitsRead@high+1,w
 11507  16B7  00B0               	movwf	EEPROM_limitsRead@dayLimit+5
 11508  16B8  0824               	movf	EEPROM_limitsRead@high,w
 11509  16B9  00AF               	movwf	EEPROM_limitsRead@dayLimit+4
 11510  16BA  0827               	movf	EEPROM_limitsRead@highLimit+1,w
 11511  16BB  00B2               	movwf	EEPROM_limitsRead@dayLimit+7
 11512  16BC  0826               	movf	EEPROM_limitsRead@highLimit,w
 11513  16BD  00B1               	movwf	EEPROM_limitsRead@dayLimit+6
 11514                           
 11515                           ;EEPROM.c: 33:     return dayLimit;
 11516  16BE  3072               	movlw	?_EEPROM_limitsRead& (0+255)
 11517  16BF  0084               	movwf	4
 11518  16C0  302B               	movlw	low EEPROM_limitsRead@dayLimit
 11519  16C1  00FA               	movwf	??_EEPROM_limitsRead
 11520  16C2  0804               	movf	4,w
 11521  16C3  00FB               	movwf	??_EEPROM_limitsRead+1
 11522  16C4  3008               	movlw	8
 11523  16C5  00FC               	movwf	??_EEPROM_limitsRead+2
 11524  16C6                     u3090:	
 11525  16C6  087A               	movf	??_EEPROM_limitsRead,w
 11526  16C7  0084               	movwf	4
 11527  16C8  1383               	bcf	3,7	;select IRP bank0
 11528  16C9  0800               	movf	0,w
 11529  16CA  00FD               	movwf	??_EEPROM_limitsRead+3
 11530  16CB  0AFA               	incf	??_EEPROM_limitsRead,f
 11531  16CC  087B               	movf	??_EEPROM_limitsRead+1,w
 11532  16CD  0084               	movwf	4
 11533  16CE  087D               	movf	??_EEPROM_limitsRead+3,w
 11534  16CF  0080               	movwf	0
 11535  16D0  0AFB               	incf	??_EEPROM_limitsRead+1,f
 11536  16D1  0BFC               	decfsz	??_EEPROM_limitsRead+2,f
 11537  16D2  2EC6               	goto	u3090
 11538  16D3  0008               	return
 11539  16D4                     __end_of_EEPROM_limitsRead:	
 11540                           
 11541                           	psect	text58
 11542  1443                     __ptext58:	
 11543 ;; *************** function _EEPROM_isEmpty *****************
 11544 ;; Defined at:
 11545 ;;		line 50 in file "EEPROM.c"
 11546 ;; Parameters:    Size  Location     Type
 11547 ;;		None
 11548 ;; Auto vars:     Size  Location     Type
 11549 ;;  test4           2   10[COMMON] int 
 11550 ;;  test3           2    8[COMMON] int 
 11551 ;;  test2           2    6[COMMON] int 
 11552 ;;  test1           2    4[COMMON] int 
 11553 ;;  empty           1   12[COMMON] _Bool 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  1    wreg      _Bool 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0, pclath, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11563 ;;      Params:         0       0       0       0       0
 11564 ;;      Locals:         9       0       0       0       0
 11565 ;;      Temps:          2       0       0       0       0
 11566 ;;      Totals:        11       0       0       0       0
 11567 ;;Total ram usage:       11 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    1
 11570 ;; This function calls:
 11571 ;;		_eeprom_read
 11572 ;; This function is called by:
 11573 ;;		_main
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           
 11578                           ;psect for function _EEPROM_isEmpty
 11579  1443                     _EEPROM_isEmpty:	
 11580                           
 11581                           ;EEPROM.c: 51:     _Bool empty = 0;
 11582                           
 11583                           ;incstack = 0
 11584                           ; Regs used in _EEPROM_isEmpty: [wreg+status,2+status,0+pclath+cstack]
 11585  1443  01FC               	clrf	EEPROM_isEmpty@empty
 11586                           
 11587                           ;EEPROM.c: 54:     int test1 = (int)eeprom_read(0);
 11588  1444  3000               	movlw	0
 11589  1445  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11590  144A  00F2               	movwf	??_EEPROM_isEmpty
 11591  144B  01F3               	clrf	??_EEPROM_isEmpty+1
 11592  144C  0872               	movf	??_EEPROM_isEmpty,w
 11593  144D  00F4               	movwf	EEPROM_isEmpty@test1
 11594  144E  0873               	movf	??_EEPROM_isEmpty+1,w
 11595  144F  00F5               	movwf	EEPROM_isEmpty@test1+1
 11596                           
 11597                           ;EEPROM.c: 55:     int test2 = (int)eeprom_read(1);
 11598  1450  3001               	movlw	1
 11599  1451  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11600  1456  00F2               	movwf	??_EEPROM_isEmpty
 11601  1457  01F3               	clrf	??_EEPROM_isEmpty+1
 11602  1458  0872               	movf	??_EEPROM_isEmpty,w
 11603  1459  00F6               	movwf	EEPROM_isEmpty@test2
 11604  145A  0873               	movf	??_EEPROM_isEmpty+1,w
 11605  145B  00F7               	movwf	EEPROM_isEmpty@test2+1
 11606                           
 11607                           ;EEPROM.c: 56:     int test3 = (int)eeprom_read(2);
 11608  145C  3002               	movlw	2
 11609  145D  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11610  1462  00F2               	movwf	??_EEPROM_isEmpty
 11611  1463  01F3               	clrf	??_EEPROM_isEmpty+1
 11612  1464  0872               	movf	??_EEPROM_isEmpty,w
 11613  1465  00F8               	movwf	EEPROM_isEmpty@test3
 11614  1466  0873               	movf	??_EEPROM_isEmpty+1,w
 11615  1467  00F9               	movwf	EEPROM_isEmpty@test3+1
 11616                           
 11617                           ;EEPROM.c: 57:     int test4 = (int)eeprom_read(3);
 11618  1468  3003               	movlw	3
 11619  1469  160A  158A  271E  160A  118A  	fcall	_eeprom_read
 11620  146E  00F2               	movwf	??_EEPROM_isEmpty
 11621  146F  01F3               	clrf	??_EEPROM_isEmpty+1
 11622  1470  0872               	movf	??_EEPROM_isEmpty,w
 11623  1471  00FA               	movwf	EEPROM_isEmpty@test4
 11624  1472  0873               	movf	??_EEPROM_isEmpty+1,w
 11625  1473  00FB               	movwf	EEPROM_isEmpty@test4+1
 11626                           
 11627                           ;EEPROM.c: 60:     if (test1 == 255 && test2 == 255 && test3 == 255 && test4 == 255 ) em
      +                          pty = 1;
 11628  1474  0A74               	incf	EEPROM_isEmpty@test1,w
 11629  1475  0475               	iorwf	EEPROM_isEmpty@test1+1,w
 11630  1476  1D03               	btfss	3,2
 11631  1477  2C86               	goto	l4141
 11632  1478  0A76               	incf	EEPROM_isEmpty@test2,w
 11633  1479  0477               	iorwf	EEPROM_isEmpty@test2+1,w
 11634  147A  1D03               	btfss	3,2
 11635  147B  2C86               	goto	l4141
 11636  147C  0A78               	incf	EEPROM_isEmpty@test3,w
 11637  147D  0479               	iorwf	EEPROM_isEmpty@test3+1,w
 11638  147E  1D03               	btfss	3,2
 11639  147F  2C86               	goto	l4141
 11640  1480  0A7A               	incf	EEPROM_isEmpty@test4,w
 11641  1481  047B               	iorwf	EEPROM_isEmpty@test4+1,w
 11642  1482  1D03               	btfss	3,2
 11643  1483  2C86               	goto	l4141
 11644  1484  01FC               	clrf	EEPROM_isEmpty@empty
 11645  1485  0AFC               	incf	EEPROM_isEmpty@empty,f
 11646  1486                     l4141:	
 11647                           
 11648                           ;EEPROM.c: 62:     return empty;
 11649  1486  087C               	movf	EEPROM_isEmpty@empty,w
 11650  1487  0008               	return
 11651  1488                     __end_of_EEPROM_isEmpty:	
 11652                           
 11653                           	psect	text59
 11654  1F1E                     __ptext59:	
 11655 ;; *************** function _eeprom_read *****************
 11656 ;; Defined at:
 11657 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeread.c"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;  addr            1    wreg     unsigned char 
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;  addr            1    1[COMMON] unsigned char 
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  1    wreg      unsigned char 
 11664 ;; Registers used:
 11665 ;;		wreg, status,2, status,0
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11671 ;;      Params:         0       0       0       0       0
 11672 ;;      Locals:         1       0       0       0       0
 11673 ;;      Temps:          1       0       0       0       0
 11674 ;;      Totals:         2       0       0       0       0
 11675 ;;Total ram usage:        2 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; This function calls:
 11678 ;;		Nothing
 11679 ;; This function is called by:
 11680 ;;		_EEPROM_limitsRead
 11681 ;;		_EEPROM_isEmpty
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           
 11686                           ;psect for function _eeprom_read
 11687  1F1E                     _eeprom_read:	
 11688                           
 11689                           ;incstack = 0
 11690                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
 11691                           ;eeprom_read@addr stored from wreg
 11692  1F1E  00F1               	movwf	eeprom_read@addr
 11693  1F1F                     l743:	
 11694                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeread.c: 6: eeprom_re
      +                          ad(unsigned char addr);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__
      +                          eeread.c: 7: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeread.c
      +                          : 8:  do
 11695                           
 11696  1F1F  0064               	clrwdt	;# 
 11697  1F20  1683               	bsf	3,5	;RP0=1, select bank3
 11698  1F21  1703               	bsf	3,6	;RP1=1, select bank3
 11699  1F22  188C               	btfsc	12,1	;volsfr
 11700  1F23  2F1F               	goto	l743
 11701                           
 11702                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeread.c: 18:  return 
      +                          ( EEADR = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
 11703  1F24  0871               	movf	eeprom_read@addr,w
 11704  1F25  1283               	bcf	3,5	;RP0=0, select bank2
 11705  1F26  1703               	bsf	3,6	;RP1=1, select bank2
 11706  1F27  008D               	movwf	13	;volatile
 11707  1F28  303F               	movlw	63
 11708  1F29  00F0               	movwf	??_eeprom_read
 11709  1F2A  0870               	movf	??_eeprom_read,w
 11710  1F2B  1683               	bsf	3,5	;RP0=1, select bank3
 11711  1F2C  1703               	bsf	3,6	;RP1=1, select bank3
 11712  1F2D  058C               	andwf	12,f	;volsfr
 11713  1F2E  140C               	bsf	12,0	;volsfr
 11714  1F2F  1283               	bcf	3,5	;RP0=0, select bank2
 11715  1F30  1703               	bsf	3,6	;RP1=1, select bank2
 11716  1F31  080C               	movf	12,w	;volatile
 11717  1F32  0008               	return
 11718  1F33                     __end_of_eeprom_read:	
 11719  007E                     btemp	set	126	;btemp
 11720  007E                     wtemp0	set	126


Data Sizes:
    Strings     159
    Constant    8
    Data        48
    BSS         98
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     46      79
    BANK3            96      0      82
    BANK2            96      0      32

Pointer List with Targets:

    weekdays	PTR const unsigned char [7] size(1) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    RTC_splitTime@year	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    RTC_splitTime@week	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    RTC_splitTime@month	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    RTC_splitTime@day	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    RTC_splitTime@hour	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    RTC_splitTime@min	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    sp__RTC_seperateNibbles	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    RTC_splitTime@sec	PTR unsigned char  size(1) Largest target is 2
		 -> RTC_seperateNibbles@dataSplit(COMMON[2]), 

    LCD_write@string	PTR unsigned char  size(1) Largest target is 17
		 -> STR_25(CODE[7]), STR_24(CODE[7]), STR_23(CODE[13]), STR_22(CODE[11]), 
		 -> STR_21(CODE[4]), STR_20(CODE[16]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[6]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[9]), STR_10(CODE[2]), 
		 -> STR_9(CODE[2]), STR_8(CODE[6]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_EEPROM_limitsRead
    _main->_userInput_getTime
    _userInput_getTime->_matrix_checkButtons
    _userInput_displayTime->_LCD_writeChar
    _userInput_displayTime->_LCD_writeCmd
    _userInput_displayLimits->___awmod
    _userInput_getDate->___awmod
    _userInput_displayDate->_LCD_writeChar
    _userInput_displayDate->_LCD_writeCmd
    _therm_get_temp->___awmod
    _therm_write_byte->_therm_delay
    _therm_reset->_therm_delay
    _therm_read_byte->_therm_delay
    ___awmod->___awdiv
    _displayTime->_LCD_write
    _displayTemp->_LCD_write
    _alarmMode->_systemReset
    _RTC_getTime->_RTC_splitTime
    _RTC_splitTime->_RTC_seperateNibbles
    _RTC_readClock->_RTC_time_read_1
    _RTC_readClock->_RTC_time_write_1
    _LCD_write->_LCD_writeChar
    _LCD_writeChar->_LCD_delay
    _LCD_thirdLine->_LCD_writeCmd
    _LCD_secondLine->_LCD_writeCmd
    _LCD_init->_LCD_writeCmd
    _LCD_firstLine->_LCD_writeCmd
    _LCD_clear->_LCD_writeCmd
    _matrix_checkButtons->_matrix_buttonDelay
    _matrix_checkButtons->_matrix_setInputs
    _buzzer_alarmOn->_buzzer_delay
    _LCD_fourthLine->_LCD_writeCmd
    _LCD_writeCmd->_LCD_delay
    _RTC_setTimeBackup->_RTC_time_write_1
    _RTC_setTime->_RTC_writeClock
    _RTC_writeClock->_RTC_time_write_1
    _RTC_ds1302_init->_RTC_time_write_1
    _EEPROM_limitsWrite->_eeprom_write
    _EEPROM_limitsRead->_eeprom_read
    _EEPROM_isEmpty->_eeprom_read

Critical Paths under _main in BANK0

    _userInput_getTime->_userInput_displayTime
    _userInput_getTempLimits->_userInput_displayLimits
    _userInput_displayLimits->___awmod
    _userInput_getDate->_userInput_displayDate
    _therm_getTemp->_therm_get_temp
    _therm_get_temp->___awmod
    _alarmMode->_systemReset
    _systemReset->_RTC_getTime
    _RTC_getTime->_RTC_splitTime

Critical Paths under _main in BANK1

    _main->_checkTemp
    _checkTemp->_alarmMode
    _systemReset->_RTC_getTime

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    11      4   57176
                                             77 BANK0      3     3      0
                                             34 BANK1     12     8      4
                     _EEPROM_isEmpty
                  _EEPROM_limitsRead
                 _EEPROM_limitsWrite
                          _LCD_clear
                           _LCD_init
                        _RTC_getTime
                        _RTC_setTime
                  _RTC_setTimeBackup
                          _checkTemp
                        _displayTemp
                        _displayTime
           _pushButtons_checkButtons
                      _therm_getTemp
                  _userInput_getDate
            _userInput_getTempLimits
                  _userInput_getTime
 ---------------------------------------------------------------------------------
 (1) _userInput_getTime                                   29    13     16    2976
                                             10 COMMON     4     4      0
                                             16 BANK0     25     9     16
                       _LCD_writeCmd
                _matrix_checkButtons
              _userInput_displayTime
 ---------------------------------------------------------------------------------
 (2) _userInput_displayTime                               16     0     16     941
                                              0 BANK0     16     0     16
                          _LCD_clear
                           _LCD_init
                      _LCD_writeChar
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (1) _userInput_getTempLimits                             31    21     10   13843
                                             25 BANK0     31    21     10
                       _LCD_writeCmd
                _matrix_checkButtons
            _userInput_displayLimits
 ---------------------------------------------------------------------------------
 (2) _userInput_displayLimits                             23    13     10   12164
                                              2 BANK0     23    13     10
                          _LCD_clear
                     _LCD_fourthLine
                           _LCD_init
                     _LCD_secondLine
                          _LCD_write
                      _LCD_writeChar
                       _LCD_writeCmd
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _userInput_getDate                                   37    21     16   12143
                                             16 BANK0     37    21     16
                       _LCD_writeCmd
                            ___awdiv
                            ___awmod
                             ___wmul
                _matrix_checkButtons
              _userInput_displayDate
 ---------------------------------------------------------------------------------
 (2) _userInput_displayDate                               16     0     16     942
                                              0 BANK0     16     0     16
                          _LCD_clear
                           _LCD_init
                      _LCD_writeChar
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (1) _therm_getTemp                                       20    15      5   10828
                                              6 BANK0     20    15      5
                             ___wmul
                     _therm_get_temp
                         _therm_init
 ---------------------------------------------------------------------------------
 (2) _therm_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _therm_get_temp                                       6     6      0    9453
                                              2 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                    _therm_read_byte
                        _therm_reset
                   _therm_write_byte
 ---------------------------------------------------------------------------------
 (3) _therm_write_byte                                     5     5      0     561
                                              4 COMMON     5     5      0
                        _therm_delay
 ---------------------------------------------------------------------------------
 (3) _therm_reset                                          2     2      0     472
                                              4 COMMON     2     2      0
                        _therm_delay
 ---------------------------------------------------------------------------------
 (3) _therm_read_byte                                      3     3      0     518
                                              4 COMMON     3     3      0
                        _therm_delay
 ---------------------------------------------------------------------------------
 (4) _therm_delay                                          4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    4704
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2884
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1256
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pushButtons_checkButtons                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _displayTime                                          4     4      0    2501
                                              8 COMMON     4     4      0
                      _LCD_firstLine
                           _LCD_init
                     _LCD_secondLine
                          _LCD_write
                      _LCD_writeChar
 ---------------------------------------------------------------------------------
 (1) _displayTemp                                          1     1      0    2365
                                              8 COMMON     1     1      0
                      _LCD_thirdLine
                          _LCD_write
                      _LCD_writeChar
 ---------------------------------------------------------------------------------
 (1) _checkTemp                                           14    14      0    7473
                                             20 BANK1     14    14      0
                     _LCD_fourthLine
                          _LCD_write
                          _RTC_isDay
                          _alarmMode
                          _delayLong
 ---------------------------------------------------------------------------------
 (2) _delayLong                                            2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _alarmMode                                            4     4      0    4751
                                             16 BANK1      4     4      0
                    _buzzer_alarmOff
                     _buzzer_alarmOn
                _matrix_checkButtons
                        _systemReset
 ---------------------------------------------------------------------------------
 (3) _systemReset                                          7     7      0    4267
                                             11 COMMON     3     3      0
                                             73 BANK0      4     4      0
                          _LCD_clear
                      _LCD_firstLine
                           _LCD_init
                     _LCD_secondLine
                      _LCD_thirdLine
                          _LCD_write
                      _LCD_writeChar
                        _RTC_getTime
 ---------------------------------------------------------------------------------
 (4) _RTC_getTime                                         36    20     16    1560
                                             53 BANK0     20     4     16
                                              0 BANK1     16    16      0
                    _RTC_ds1302_init
                           _RTC_init
                      _RTC_readClock
                      _RTC_splitTime
 ---------------------------------------------------------------------------------
 (5) _RTC_splitTime                                       57    41     16    1172
                                              7 COMMON     4     4      0
                                              0 BANK0     53    37     16
                _RTC_seperateNibbles
 ---------------------------------------------------------------------------------
 (6) _RTC_seperateNibbles                                  7     7      0     175
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _RTC_readClock                                        3     3      0     274
                                              5 COMMON     3     3      0
                    _RTC_time_read_1
                   _RTC_time_write_1
 ---------------------------------------------------------------------------------
 (6) _RTC_time_read_1                                      5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _LCD_write                                            5     4      1    2229
                                              3 COMMON     5     4      1
                      _LCD_writeChar
 ---------------------------------------------------------------------------------
 (3) _LCD_writeChar                                        1     1      0      68
                                              2 COMMON     1     1      0
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (2) _LCD_thirdLine                                        0     0      0      68
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (3) _LCD_secondLine                                       0     0      0      68
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (3) _LCD_init                                             0     0      0      68
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_firstLine                                        0     0      0      68
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (3) _LCD_clear                                            0     0      0      68
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (2) _matrix_checkButtons                                  8     6      2     325
                                              2 COMMON     8     6      2
                 _matrix_buttonDelay
                        _matrix_init
                   _matrix_setInputs
 ---------------------------------------------------------------------------------
 (3) _matrix_setInputs                                     2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _matrix_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _matrix_buttonDelay                                   2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _buzzer_alarmOn                                       0     0      0      46
                       _buzzer_delay
 ---------------------------------------------------------------------------------
 (4) _buzzer_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _buzzer_alarmOff                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTC_isDay                                           16     0     16     260
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (3) _LCD_fourthLine                                       0     0      0      68
                       _LCD_writeCmd
 ---------------------------------------------------------------------------------
 (3) _LCD_writeCmd                                         1     1      0      68
                                              2 COMMON     1     1      0
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (4) _LCD_delay                                            2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTC_setTimeBackup                                    2     2      0     250
                                              5 COMMON     2     2      0
                    _RTC_ds1302_init
                           _RTC_init
                   _RTC_time_write_1
 ---------------------------------------------------------------------------------
 (1) _RTC_setTime                                         18     2     16    1436
                                              7 COMMON     2     2      0
                                              0 BANK0     16     0     16
                 _RTC_combineNibbles
                    _RTC_ds1302_init
                           _RTC_init
                     _RTC_writeClock
 ---------------------------------------------------------------------------------
 (2) _RTC_writeClock                                       2     2      0     250
                                              5 COMMON     2     2      0
                    _RTC_ds1302_init
                           _RTC_init
                   _RTC_time_write_1
 ---------------------------------------------------------------------------------
 (5) _RTC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RTC_ds1302_init                                      0     0      0      91
                   _RTC_time_write_1
 ---------------------------------------------------------------------------------
 (6) _RTC_time_write_1                                     5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _RTC_combineNibbles                                   5     4      1     622
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_limitsWrite                                  12     3      9    1159
                                              3 COMMON    10     1      9
                                              0 BANK0      2     2      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     348
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_limitsRead                                   31    23      8     322
                                              2 COMMON    12     4      8
                                              0 BANK0     19    19      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _EEPROM_isEmpty                                      11    11      0     138
                                              2 COMMON    11    11      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_isEmpty
     _eeprom_read
   _EEPROM_limitsRead
     _eeprom_read
   _EEPROM_limitsWrite
     _eeprom_write
   _LCD_clear
     _LCD_writeCmd
       _LCD_delay
   _LCD_init
     _LCD_writeCmd
       _LCD_delay
   _RTC_getTime
     _RTC_ds1302_init
       _RTC_time_write_1
     _RTC_init
     _RTC_readClock
       _RTC_time_read_1
       _RTC_time_write_1
     _RTC_splitTime
       _RTC_seperateNibbles
   _RTC_setTime
     _RTC_combineNibbles
     _RTC_ds1302_init
       _RTC_time_write_1
     _RTC_init
     _RTC_writeClock
       _RTC_ds1302_init
         _RTC_time_write_1
       _RTC_init
       _RTC_time_write_1
   _RTC_setTimeBackup
     _RTC_ds1302_init
       _RTC_time_write_1
     _RTC_init
     _RTC_time_write_1
   _checkTemp
     _LCD_fourthLine
       _LCD_writeCmd
         _LCD_delay
     _LCD_write
       _LCD_writeChar
         _LCD_delay
     _RTC_isDay
     _alarmMode
       _buzzer_alarmOff
       _buzzer_alarmOn
         _buzzer_delay
       _matrix_checkButtons
         _matrix_buttonDelay
         _matrix_init
         _matrix_setInputs
       _systemReset
         _LCD_clear
           _LCD_writeCmd
             _LCD_delay
         _LCD_firstLine
           _LCD_writeCmd
             _LCD_delay
         _LCD_init
           _LCD_writeCmd
             _LCD_delay
         _LCD_secondLine
           _LCD_writeCmd
             _LCD_delay
         _LCD_thirdLine
           _LCD_writeCmd
             _LCD_delay
         _LCD_write
           _LCD_writeChar
             _LCD_delay
         _LCD_writeChar
           _LCD_delay
         _RTC_getTime
           _RTC_ds1302_init
             _RTC_time_write_1
           _RTC_init
           _RTC_readClock
             _RTC_time_read_1
             _RTC_time_write_1
           _RTC_splitTime
             _RTC_seperateNibbles
     _delayLong
   _displayTemp
     _LCD_thirdLine
       _LCD_writeCmd
         _LCD_delay
     _LCD_write
       _LCD_writeChar
         _LCD_delay
     _LCD_writeChar
       _LCD_delay
   _displayTime
     _LCD_firstLine
       _LCD_writeCmd
         _LCD_delay
     _LCD_init
       _LCD_writeCmd
         _LCD_delay
     _LCD_secondLine
       _LCD_writeCmd
         _LCD_delay
     _LCD_write
       _LCD_writeChar
         _LCD_delay
     _LCD_writeChar
       _LCD_delay
   _pushButtons_checkButtons
   _therm_getTemp
     ___wmul
     _therm_get_temp
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___lwdiv
       _therm_read_byte
         _therm_delay
       _therm_reset
         _therm_delay
       _therm_write_byte
         _therm_delay
     _therm_init
   _userInput_getDate
     _LCD_writeCmd
       _LCD_delay
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     ___wmul
     _matrix_checkButtons
       _matrix_buttonDelay
       _matrix_init
       _matrix_setInputs
     _userInput_displayDate
       _LCD_clear
         _LCD_writeCmd
           _LCD_delay
       _LCD_init
         _LCD_writeCmd
           _LCD_delay
       _LCD_writeChar
         _LCD_delay
       _LCD_writeCmd
         _LCD_delay
   _userInput_getTempLimits
     _LCD_writeCmd
       _LCD_delay
     _matrix_checkButtons
       _matrix_buttonDelay
       _matrix_init
       _matrix_setInputs
     _userInput_displayLimits
       _LCD_clear
         _LCD_writeCmd
           _LCD_delay
       _LCD_fourthLine
         _LCD_writeCmd
           _LCD_delay
       _LCD_init
         _LCD_writeCmd
           _LCD_delay
       _LCD_secondLine
         _LCD_writeCmd
           _LCD_delay
       _LCD_write
         _LCD_writeChar
           _LCD_delay
       _LCD_writeChar
         _LCD_delay
       _LCD_writeCmd
         _LCD_delay
       ___awdiv
       ___awmod
         ___awdiv (ARG)
   _userInput_getTime
     _LCD_writeCmd
       _LCD_delay
     _matrix_checkButtons
       _matrix_buttonDelay
       _matrix_init
       _matrix_setInputs
     _userInput_displayTime
       _LCD_clear
         _LCD_writeCmd
           _LCD_delay
       _LCD_init
         _LCD_writeCmd
           _LCD_delay
       _LCD_writeChar
         _LCD_delay
       _LCD_writeCmd
         _LCD_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      52       9       85.4%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      20      11       33.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2E      4F       7       98.8%
BITBANK1            50      0       1       6        1.3%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     11F      12        0.0%
ABS                  0      0     11F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Dec 12 14:19:26 2019

        EEPROM_limitsRead@addressStart 0029                                      pc 0002  
                         ?_displayTemp 0070           userInput_getTime@buttonPress 0048  
                         ?_displayTime 0070                                     l31 0801  
                                   _TX 00E1                                     _TZ 00E2  
                         ___awdiv@sign 0076                                     _dp 00DE  
                     therm_read_byte@i 0076                       therm_read_byte@j 0770  
                                   _wd 00DC                                     fsr 0004  
                  ___wmul@multiplicand 0072                    __end_of_systemReset 1800  
            userInput_displayLimits@H0 0033              userInput_displayLimits@H1 0034  
            userInput_displayLimits@H2 0035              userInput_displayLimits@L0 0030  
            userInput_displayLimits@L1 0031              userInput_displayLimits@L2 0032  
                          _RTC_getTime 1402                                    l200 10F9  
                                  l163 11A5                                    l403 01F3  
                                  l180 1618                                    l404 022D  
                                  l165 11AC                                    l173 15EF  
                                  l166 11B3                                    l167 11BA  
                                  l175 15FE                                    l168 11D4  
                                  l178 160B                                    l195 10EB  
                                  l292 112E                                    l198 10F2  
                                  l614 0CC7                                    l615 0CCA  
                                  l298 11DB                                    l618 0CDB  
                                  l743 1F1F                                    l763 1106  
                                  l773 1FA4                                    _RA0 0028  
                                  _RA2 002A                                    _RB0 0030  
                                  _RA3 002B                                    _RB1 0031  
                                  _RA4 002C                                    _RC0 0038  
                                  _RB2 0032                                    _RA5 002D  
                                  _RC1 0039                                    _RB3 0033  
                                  _RC2 003A                                    _RB4 0034  
                                  _RC3 003B                                    _RB5 0035  
                                  _RC4 003C                                    _RE0 0048  
                                  _RC5 003D                                    _RC6 003E  
                                  _RC7 003F                                    _THV 00E3  
                                  _TLV 00E4                  EEPROM_limitsWrite@day 007B  
               __size_of_LCD_firstLine 0005                __end_of_RTC_ds1302_init 1EE2  
                                  fsr0 0004                                    indf 0000  
                         ___awmod@sign 0021                            _RTC_setTime 16D4  
                         __CFG_FOSC$HS 0000                           __CFG_LVP$OFF 0000  
userInput_getTempLimits@addressCounter 004C              userInput_displayTime@time 0020  
                                 l4111 13CC                                   l4113 13D2  
                                 l3225 11EC                                   l4033 1100  
                                 l4141 1486                                   l3421 1EF8  
                                 l4223 095B                                   l4215 0945  
                                 l4151 0A6D                                   l4311 00AE  
                                 l4073 12B9                                   l3177 1EE4  
                                 l4209 0927                                   l3353 0805  
                                 l3521 1337                                   l4401 016E  
                                 l4313 00B2                                   l4305 00A3  
                                 l4083 1659                                   l3435 1298  
                                 l4251 0041                                   l4085 165D  
                                 l4229 0971                                   l3701 14BD  
                                 l3437 1299                                   l4501 0496  
                                 l4413 0181                                   l4341 0113  
                                 l4333 00F1                                   l4325 00E2  
                                 l4317 00D0                                   l3279 1183  
                                 l3439 1271                                   l3447 12E0  
                                 l4511 04CE                                   l5071 0DCA  
                                 l4415 0186                                   l4335 00F4  
                                 l4263 0057                                   l4423 0189  
                                 l4247 0033                                   l5063 03D0  
                                 l3801 121B                                   l3393 1E9F  
                                 l4185 0B34                                   l4169 0ADF  
                                 l3705 14C8                                   l4601 0718  
                                 l4513 04D6                                   l4521 0527  
                                 l5073 0451                                   l4409 017C  
                                 l4353 0129                                   l4361 0133  
                                 l4337 00F6                                   l5065 0078  
                                 l4257 004E                                   l4249 003F  
                                 l3547 15DF                                   l3379 1FBE  
                                 l3627 17BA                                   l3731 13B4  
                                 l3723 1390                                   l3467 12F6  
                                 l5075 07B9                                   l4603 071E  
                                 l4611 076E                                   l4451 0418  
                                 l5067 018E                                   l4355 012E  
                                 l4283 006E                                   l4275 006B  
                                 l4267 005D                                   l4259 0051  
                                 l3813 10C8                                   l5077 11C6  
                                 l3629 17FC                                   l4197 08CF  
                                 l3645 1592                                   l3709 14D0  
                                 l3725 139E                                   l4533 056C  
                                 l4461 042A                                   l4453 041A  
                                 l4701 0D24                                   l5069 0CF7  
                                 l4381 014E                                   l4373 0146  
                                 l4293 0073                                   l3831 10D0  
                                 l3399 11C1                                   l3911 1352  
                                 l3671 15D1                                   l3663 15BE  
                                 l3655 159A                                   l3639 1587  
                                 l3735 13BF                                   l4551 05D8  
                                 l4527 0533                                   l4447 0409  
                                 l4375 014B                                   l4295 008F  
                                 l3841 10DB                                   l3825 10CE  
                                 l3905 1379                                   l3657 15A8  
                                 l3489 1317                                   l4617 077A  
                                 l4537 0589                                   l4529 0539  
                                 l4465 0430                                   l4449 040C  
                                 l4713 0D71                                   l4705 0D46  
                                 l4393 0164                                   l4369 0141  
                                 l3819 10CA                                   l3579 1625  
                                 l3667 15C9                                   l3683 1494  
                                 l4619 0780                                   l4563 0662  
                                 l4459 0427                                   l3923 0DF5  
                                 l4731 0D8D                                   l4723 0D83  
                                 l4395 0169                                   l3773 0A3C  
                                 l3765 0A28                                   l4573 068D  
                                 l4549 05D2                                   l4629 07B4  
                                 l4485 0447                                   l4477 0444  
                                 l4469 0436                                   l4741 0D9F  
                                 l4709 0D4F                                   l4661 0CB5  
                                 l4813 02DE                                   l3695 14A1  
                                 l3687 149B                                   l4591 06EB  
                                 l4575 0693                                   l4567 0681  
                                 l4495 044C                                   l4671 0CC4  
                                 l4823 031B                                   l4815 02E3  
                                 l4807 0284                                   l3697 14AF  
                                 l3777 0A46                                   l3769 0A32  
                                 l4497 0468                                   l4673 0CCD  
                                 l4665 0CB7                                   l4683 0CDC  
                                 l4691 0CF2                                   l4771 0CA5  
                                 l4749 0DA9                                   l4693 0D0E  
                                 l4829 0373                                   l4837 03CB  
                                 l3887 1F0C                                   l4759 0DBB  
                                 l4769 0DC5                                   l3979 1F9C  
                                 STR_1 109B                                   STR_2 1093  
                                 STR_3 108F                                   STR_4 10A7  
                                 STR_5 1097                                   STR_6 10A3  
                                 STR_7 109F                                   STR_8 1019  
                                 STR_9 108D                                   u2115 1EF3  
                                 u2125 1FEB                                   u3005 1FAC  
                                 u2240 1420                                   u2400 17A0  
                                 u3200 08A4                                   u2145 114B  
                                 u2225 1FC7                                   u2250 1435  
                                 u2410 17CD                                   u2180 0C01  
                                 u2165 11FC                                   u2190 0C53  
                                 u4110 02CB                                   u4030 01C2  
                                 u2175 119E                                   u3080 16A0  
                                 u4200 03B7                                   u4120 02ED  
                                 u4040 01E0                                   u3065 12D5  
                                 u2265 1F07                                   u3225 0910  
                                 u2505 15B5                                   u3090 16C6  
                                 u4130 030C                                   u4050 0203  
                                 u3235 0933                                   u2515 15BF  
                                 u3260 0014                                   u4060 0220  
                                 u3245 0951                                   u2605 14BE  
                                 u3190 0B3C                                   u3430 00FE  
                                 u4150 0325                                   u4070 0256  
                                 u3255 0967                                   u4160 0349  
                                 u4080 028E                                   u2385 1634  
                                 u2705 09BC                                   u3370 00BA  
                                 u4170 035E                                   u4090 02AD  
                                 u2395 164B                                   u2475 159D  
                                 u2715 09CB                                   u3700 0576  
                                 u4180 037D                                   u2645 1393  
                                 u2725 09DC                                   u4190 03A1  
                                 u2495 15A9                                   u2575 14A4  
                                 u3800 0759                                   u2665 139F  
                                 u2915 1F1B                                   u2595 14B5  
                                 u2675 13AB                                   u3740 066C  
                                 u3580 03EB                                   u2685 13B5  
                                 u3670 0511                                   u3830 0C6B  
                                 u2775 1F37                                   u3735 0620  
                                 u3920 0D2C                                   u3840 0C80  
                                 u2785 1234                                   u3665 04C5  
                                 u3940 0D57                                   u3775 06DB  
                                 u3890 0CE4                                   u2995 1FA5  
                       ??_eeprom_write 0071                 __size_of_RTC_splitTime 0117  
                    RTC_splitTime@F988 0120                        RTC_setTime@time 0020  
                                 _main 019A                                   btemp 007E  
                    RTC_splitTime@day1 0036                      RTC_splitTime@day2 0037  
                                 start 0000                __size_of_EEPROM_isEmpty 0045  
                    RTC_splitTime@min1 0032                      RTC_splitTime@min2 0033  
                    RTC_splitTime@sec1 0030                      RTC_splitTime@sec2 0031  
                    RTC_splitTime@hour 0040                      RTC_splitTime@week 0043  
                   __size_of_LCD_delay 0014                      ?_therm_write_byte 0070  
                   __size_of_LCD_clear 0005                      RTC_splitTime@year 0044  
         userInput_getTempLimits@limit 0039                 __size_of_LCD_thirdLine 0005  
                   __size_of_LCD_write 0022                     ??_therm_write_byte 0074  
             _pushButtons_checkButtons 10E0       __size_of_userInput_displayLimits 0227  
                     nosup@@$_$_CONFIG 0000                       __end_of_LCD_init 1F5E  
              __size_of_LCD_fourthLine 0005                                  ?_main 00C2  
                      __end_of___awdiv 15D6                                  _EEADR 010D  
                                STR_10 108D                                  STR_11 1016  
                                STR_12 10AB                                  STR_20 1063  
                                STR_13 10AB                                  STR_21 108B  
                                STR_14 1019                                  STR_22 1080  
                                STR_23 1073                                  STR_15 1030  
                                STR_24 1018                                  STR_16 1052  
                                STR_25 1018                                  STR_17 1041  
                        __CFG_WDTE$OFF 0000                                  STR_18 101F  
                                STR_19 100E                        __end_of___awmod 14D5  
                      ___awdiv@divisor 0070                        __end_of___lwdiv 13C4  
                      ___awdiv@counter 0075                       _RTC_time_write_1 112B  
                                _PORTA 0005                                  _PORTC 0007  
                                _PORTD 0008                                  _TRISA 0085  
                                _TRISB 0086                                  _TRISC 0087  
                                _TRISD 0088                                  _TRISE 0089  
                        _RTC_readClock 1178                          __CFG_PWRTE$ON 0000  
               __size_of_LCD_writeChar 001E                                  _first 00DF  
              _userInput_getTempLimits 0C61                __size_of_LCD_secondLine 0005  
                         ?_matrix_init 0070                                  _tenth 00E0  
                       __CFG_BOREN$OFF 0000               RTC_combineNibbles@second 0070  
                                pclath 000A                       __end_of_RTC_init 1E93  
           __end_of_RTC_combineNibbles 1F48                       __end_of_RTCtable 100E  
                                status 0003                      _EEPROM_limitsRead 1650  
                                wtemp0 007E                     RTC_splitTime@hour1 0034  
                   RTC_splitTime@hour2 0035                     __size_of_RTC_isDay 0025  
                   RTC_splitTime@week1 003A                     RTC_splitTime@week2 003B  
         userInput_getDate@buttonPress 004E                     RTC_splitTime@month 0042  
                   RTC_splitTime@year1 003C                     RTC_splitTime@year2 003D  
                        _LCD_firstLine 1E7A                     ?_EEPROM_limitsRead 0072  
           __size_of_RTC_setTimeBackup 0037                          ?_LCD_writeCmd 0070  
                       RTC_splitTime@t 0045                            _systemReset 175A  
                      __initialization 07C5                __size_of_RTC_writeClock 0034  
        userInput_getTempLimits@button 0049                           __end_of_main 03E1  
                    _userInput_getDate 03E1                          buzzer_delay@i 0070  
             __size_of_RTC_time_read_1 0031                      _userInput_getTime 000C  
                  ??_EEPROM_limitsRead 007A                     ?_userInput_getDate 0030  
                        _RTC_splitTime 0B4A                     ?_userInput_getTime 0030  
                               ??_main 00C6                         ?_RTC_readClock 0070  
                     ?_RTC_ds1302_init 0070                      __end_of_LCD_delay 1EF6  
                  ??_userInput_getDate 0040                      __end_of_LCD_clear 1E7A  
                  ??_userInput_getTime 007A                          _LCD_thirdLine 10AD  
                    __end_of_LCD_write 1FDD                                 _ADCON1 009F  
                               _EEDATA 010C                                 _EECON1 018C  
                               _EECON2 018D                       ___awdiv@dividend 0072  
            __end_of_EEPROM_limitsRead 16D4                                 _TRISA0 0428  
                               _TRISB4 0434                         ?_LCD_firstLine 0070  
       EEPROM_limitsWrite@addressStart 0020                         ??_LCD_writeCmd 0072  
            __end_of_userInput_getDate 07C5                   __size_of_eeprom_read 0015  
          __size_of_matrix_buttonDelay 0011                          _LCD_writeChar 1F7C  
            __end_of_userInput_getTime 019A    userInput_getTime@timeAddressCounter 0044  
                         RTC_getTime@t 00A0                                 ___wmul 1F9A  
                            ??___awdiv 0074                              ??___awmod 007D  
             __end_of_matrix_setInputs 11D5                              ??___lwdiv 0074  
             EEPROM_limitsWrite@limits 0073                         ?_RTC_splitTime 0020  
                               _button 00DA                        _therm_read_byte 1312  
                         ?_therm_delay 0070                    therm_write_byte@val 0077  
                     ___awdiv@quotient 0077                        ___awmod@divisor 0079  
                 __end_of_eeprom_write 112B                           ?_therm_reset 0070  
                      ___awmod@counter 0020                   __size_of_displayTemp 0035  
                 __size_of_displayTime 00EF                   therm_read_byte@value 0075  
                    __end_of_RTC_isDay 10E0                    _RTC_seperateNibbles 1FDD  
                  _matrix_checkButtons 15D6              ??_userInput_getTempLimits 0043  
                       ?_LCD_thirdLine 0070                 therm_getTemp@mergeTemp 0033  
               userInput_getDate@month 0046                          checkTemp@high 00BD  
                   _EEPROM_limitsWrite 13C4                    RTC_splitTime@month1 0038  
                  RTC_splitTime@month2 0039                       ??_buzzer_alarmOn 0072  
                        ?_buzzer_delay 0070                __end_of__initialization 07FC  
         RTC_seperateNibbles@dataSplit 0075                        eeprom_read@addr 0071  
                            ?_LCD_init 0070                   ?_RTC_seperateNibbles 0070  
                 ?_matrix_checkButtons 0072                         _EEPROM_isEmpty 1443  
                  ?_EEPROM_limitsWrite 0073                         ?_LCD_writeChar 0070  
                       __pcstackCOMMON 0070                           __pidataBANK1 0003  
                         __pidataBANK3 1151                _userInput_displayLimits 0DD9  
                   __size_of_checkTemp 00DF                     __size_of_alarmMode 003C  
                   __size_of_delayLong 0014                         _LCD_fourthLine 1E70  
                         ?_RTC_getTime 0055                        ??_RTC_readClock 0075  
                            ?_RTC_init 0070           RTC_seperateNibbles@firstByte 0074  
                 ??_EEPROM_limitsWrite 007C    userInput_getDate@dateAddressCounter 004A  
                    ??_RTC_time_read_1 0070                           ?_RTC_setTime 0020  
                    eeprom_write@value 0070                         _LCD_secondLine 1E7F  
                     RTC_time_read_1@j 0072             __size_of_EEPROM_limitsRead 0084  
                           __pbssBANK1 00CE                             __pbssBANK2 0110  
                           __pbssBANK3 0190                         ??_buzzer_delay 0070  
                      ??_LCD_firstLine 0073                 __end_of_EEPROM_isEmpty 1488  
                _userInput_displayDate 14D5             ??_pushButtons_checkButtons 0072  
                 __size_of_matrix_init 0009                  _userInput_displayTime 1526  
                ??_RTC_seperateNibbles 0070                  ??_matrix_checkButtons 0074  
                           ??_LCD_init 0073                  __end_of_therm_getTemp 089A  
             __end_of_RTC_time_write_1 1151        __end_of_userInput_getTempLimits 0DD9  
              __end_of_therm_read_byte 134C             __size_of_userInput_getDate 03E4  
                       _RTC_writeClock 1206                             __pmaintext 019A  
           __size_of_userInput_getTime 018E                           LCD_write@len 0073  
                      ??_RTC_splitTime 0077                                ?___wmul 0070  
               __end_of_LCD_fourthLine 1E75                         LCD_writeChar@x 0072  
             __size_of_buzzer_alarmOff 0004                             ??_RTC_init 0070  
                      ??_LCD_thirdLine 0073              __size_of_therm_write_byte 0037  
               __end_of_LCD_secondLine 1E84                   __end_of_LCD_writeCmd 1F7C  
                    __end_of_checkTemp 0979                             __stringtab 1000  
                    __end_of_alarmMode 1388                        ?_EEPROM_isEmpty 0070  
                    __end_of_delayLong 1F1E                        ??_LCD_writeChar 0072  
               __end_of_RTC_writeClock 123A                     RTC_setTimeBackup@i 0075  
            ??_userInput_displayLimits 002C          userInput_displayLimits@limits 0022  
              __size_of_therm_get_temp 00E2                           ?_systemReset 0070  
                      alarmMode@button 00B2                          RTC_isDay@time 0020  
                __size_of_eeprom_write 0026                     _RTC_combineNibbles 1F33  
                              ___awdiv 157D                                ___awmod 1488  
                      __size_of___wmul 0021                        ?_LCD_fourthLine 0070  
                      RTC_writeClock@i 0075                                ___lwdiv 1388  
                              __ptext1 000C                                __ptext2 1526  
                              __ptext3 0C61                                __ptext4 0DD9  
                              __ptext5 03E1                                __ptext6 14D5  
                              __ptext7 080E                                __ptext8 1E84  
                              __ptext9 0979                    ?_RTC_combineNibbles 0070  
            userInput_getDate@dayLimit 0048                   __size_of_therm_delay 000E  
                 __size_of_therm_reset 0035                       ___awmod@dividend 007B  
                 therm_write_byte@temp 0076                        ?_LCD_secondLine 0070  
                           delayLong@i 0070             userInput_getDate@decrement 004D  
                              clrloop0 1E94                              _LCD_delay 1EE2  
                            _LCD_clear 1E75                   end_of_initialization 07FC  
               ?_userInput_displayDate 0020                 ?_userInput_displayTime 0020  
                            _LCD_write 1FBB                           _eeprom_write 1105  
                 ??_RTC_combineNibbles 0071                        ?_RTC_writeClock 0070  
              userInput_getDate@button 0044                       ?_therm_read_byte 0070  
                       main@pushButton 006D                   matrix_checkButtons@i 0076  
                 matrix_checkButtons@j 0074                             _therm_init 1E84  
                    ?_matrix_setInputs 0070                   EEPROM_limitsRead@day 0028  
                 EEPROM_limitsRead@low 0022             userInput_getDate@increment 004C  
                 __end_of_buzzer_delay 1F0A                     ??_matrix_setInputs 0072  
                 __size_of_RTC_getTime 0041        __end_of_userInput_displayLimits 1000  
                    ??_buzzer_alarmOff 0070                              _RTC_isDay 10BB  
           userInput_getDate@month_669 0051                   __size_of_RTC_setTime 0086  
                           ?_LCD_delay 0070                             ?_LCD_clear 0070  
     __end_of_pushButtons_checkButtons 1105               __size_of_RTC_ds1302_init 0013  
                           ?_LCD_write 0073                          ??_eeprom_read 0070  
           __end_of_matrix_buttonDelay 1EAC                       RTC_splitTime@day 0041  
                     RTC_splitTime@min 003F                       RTC_splitTime@sec 003E  
                    __size_of_LCD_init 0016            userInput_getTempLimits@exit 0047  
                      _RTC_time_read_1 11D5                          ??_displayTemp 0078  
                        ??_displayTime 0078                         __end_of___wmul 1FBB  
                __size_of_LCD_writeCmd 001E                    matrix_buttonDelay@i 0070  
                    therm_write_byte@i 0078                          __pbitbssBANK1 0770  
              RTC_combineNibbles@first 0073                             LCD_delay@i 0070  
                     _therm_write_byte 12DB                      __size_of_RTC_init 0008  
                  start_initialization 07C5                             ?_RTC_isDay 0020  
                           LCD_write@i 0075                         _therm_get_temp 0979  
                    ?_RTC_time_write_1 0070                     checkTemp@highLimit 00BF  
                         _LCD_writeCmd 1F5E                     ??_RTC_time_write_1 0070  
                             ??___wmul 0074                    __end_of_eeprom_read 1F33  
                           init_fetch0 1EAC                            ?_therm_init 0070  
                 __size_of_systemReset 00A6                            __pdataBANK1 00E5  
                          __pdataBANK3 01BB                  userInput_getDate@date 0030  
                userInput_getDate@year 004F               ?_userInput_getTempLimits 0039  
                         checkTemp@day 00C1                           checkTemp@low 00BB  
           userInput_displayLimits@HL0 0036             userInput_displayLimits@HL1 0037  
           userInput_displayLimits@HL2 0038             userInput_displayLimits@LL0 002D  
           userInput_displayLimits@LL1 002E             userInput_displayLimits@LL2 002F  
     userInput_getTempLimits@decrement 004F                    __end_of_displayTemp 126F  
                __end_of_RTC_readClock 11A4                    __end_of_displayTime 0B4A  
          __size_of_EEPROM_limitsWrite 003E             userInput_displayLimits@day 002A  
                        _screenCleared 00ED                              ___latbits 0002  
                        __pcstackBANK0 0020                          __pcstackBANK1 00A0  
        RTC_seperateNibbles@secondByte 0072                       ??_EEPROM_isEmpty 0072  
                        ??_matrix_init 0070            __end_of_RTC_seperateNibbles 2000  
          __end_of_matrix_checkButtons 1650                            ??_LCD_delay 0070  
                          ??_LCD_clear 0073                       eeprom_write@addr 0072  
                          ??_LCD_write 0074                 __end_of_therm_get_temp 0A5B  
                __end_of_LCD_firstLine 1E7F                __end_of_RTC_time_read_1 1206  
                            _checkTemp 089A                              _dayLimits 00E5  
               RTC_time_read_1@time_rx 0074                              _alarmMode 134C  
                     ??_LCD_fourthLine 0073                              _delayLong 1F0A  
                     ___lwdiv@dividend 0072                      ??_RTC_ds1302_init 0075  
     userInput_getTempLimits@increment 004E                  __size_of_buzzer_delay 0014  
                          _daysInMonth 01BB       userInput_getTempLimits@newLimits 0050  
                        LCD_writeCmd@x 0072                __size_of_buzzer_alarmOn 0012  
                             ?___awdiv 0070                               ?___awmod 0079  
                             ?___lwdiv 0070                matrix_setInputs@counter 0070  
                __end_of_RTC_splitTime 0C61      __size_of_pushButtons_checkButtons 0025  
            ?_pushButtons_checkButtons 0070                       ??_LCD_secondLine 0073  
                   systemReset@counter 007C                              __pstrings 1000  
                    RTC_time_write_1@j 0072                  userInput_getTime@time 0030  
                      LCD_write@string 0077                  __end_of_LCD_thirdLine 10B2  
               __size_of_therm_getTemp 008C                         alarmMode@alarm 00B0  
              ??_userInput_displayDate 0073                ??_userInput_displayTime 0073  
                          ??_RTC_isDay 0070                       ___lwdiv@quotient 0075  
                      main@emptyEEPROM 006F                       ??_RTC_writeClock 0075  
                  __size_of_therm_init 0007                           _buzzer_delay 1EF6  
                       therm_getTemp@t 0035                         ___wmul@product 0074  
                      ?_therm_get_temp 0070                             ?_checkTemp 0070  
                             _LCD_init 1F48                              clear_ram0 1E93  
                          _eeprom_read 1F1E                    __end_of_matrix_init 10BB  
                           ?_alarmMode 0070                              _savedTemp 01B6  
                            _savedTime 0110                             ?_delayLong 0070  
                __end_of_LCD_writeChar 1F9A                        _buzzer_alarmOff 1E6C  
         RTC_combineNibbles@returnChar 0074                            _displayTemp 123A  
                          _displayTime 0A5B                    EEPROM_isEmpty@empty 007C  
                        ??_therm_delay 0071                    EEPROM_isEmpty@test1 0074  
                  EEPROM_isEmpty@test2 0076                    EEPROM_isEmpty@test3 0078  
                  EEPROM_isEmpty@test4 007A                      therm_getTemp@F960 00D3  
                        ??_therm_reset 0074                RTC_seperateNibbles@F994 00D8  
                          __stringbase 1005                               _RTC_init 1E8B  
                    ___wmul@multiplier 0070                               _RTCtable 1006  
           EEPROM_limitsRead@highLimit 0026                    therm_reset@presence 0075  
              userInput_getTime@button 0042              __size_of_matrix_setInputs 0031  
             ?_userInput_displayLimits 0022                       ?_RTC_time_read_1 0070  
          __size_of_RTC_combineNibbles 0015                             _EECON1bits 018C  
             __end_of_therm_write_byte 1312                          _therm_getTemp 080E  
                 userInput_getDate@day 0053                       __size_of___awdiv 0059  
                     __size_of___awmod 004D                       __size_of___lwdiv 003C  
                        ??_RTC_getTime 0065                     _matrix_buttonDelay 1E9B  
                    checkTemp@lowLimit 00B9                     __end_of__stringtab 1006  
             __size_of_therm_read_byte 003A                            _currentTemp 00CE  
                          _currentTime 0190                          ??_RTC_setTime 0077  
                  __end_of_therm_delay 080E                    ?_matrix_buttonDelay 0070  
                      ___lwdiv@divisor 0070                    __end_of_therm_reset 12A4  
                      ___lwdiv@counter 0077                               _getTable 01A8  
                             __ptext10 12DB                               __ptext11 126F  
                             __ptext20 123A                               __ptext12 1312  
                             __ptext21 089A                               __ptext13 0800  
                             __ptext30 1FBB                               __ptext22 1F0A  
                             __ptext14 1388                               __ptext31 1F7C  
                             __ptext23 134C                               __ptext15 1488  
                             __ptext40 1E9B                               __ptext32 10AD  
                             __ptext24 175A                               __ptext16 157D  
                             __ptext41 1EBD                               __ptext33 1E7F  
                             __ptext25 1402                               __ptext17 1F9A  
                             __ptext50 1206                               __ptext42 1EF6  
                             __ptext34 1F48                               __ptext26 0B4A  
                             __ptext18 10E0                               __ptext51 1E8B  
                             __ptext43 1E6C                               __ptext35 1E7A  
                             __ptext27 1FDD                               __ptext19 0A5B  
                             __ptext52 1ECF                               __ptext44 10BB  
                             __ptext36 1E75                               __ptext28 1178  
                             __ptext53 112B                               __ptext45 1E70  
                             __ptext37 15D6                               __ptext29 11D5  
                             __ptext54 1F33                               __ptext46 1F5E  
                             __ptext38 11A4                               __ptext55 13C4  
                             __ptext47 1EE2                               __ptext39 10B2  
                             __ptext56 1105                               __ptext48 12A4  
                             __ptext57 1650                               __ptext49 16D4  
                             __ptext58 1443                               __ptext59 1F1E  
                          _matrix_init 10B2                            _nightLimits 01D3  
              RTC_time_write_1@time_tx 0074                          __size_of_main 0247  
                          ??_checkTemp 00B4               systemReset@currentSecond 007B  
                       ?_therm_getTemp 0026                            ??_alarmMode 007E  
              __end_of_buzzer_alarmOff 1E70                               _setTable 01AF  
                          ??_delayLong 0070                   ??_matrix_buttonDelay 0070  
   userInput_getTempLimits@buttonPress 004B              EEPROM_limitsRead@dayLimit 002B  
                             _weekdays 01DB                         _buzzer_alarmOn 1EBD  
                         ??_therm_init 0070                               main@argc 00C2  
                             main@argv 00C4                 RTC_seperateNibbles@hex 0073  
            __size_of_RTC_time_write_1 0026                             _INTCONbits 000B  
            EEPROM_limitsRead@lowLimit 0020                    __end_of_RTC_getTime 1443  
                             init_ram0 1EB0                        _RTC_ds1302_init 1ECF  
           userInput_getTime@decrement 0047       __size_of_userInput_getTempLimits 0178  
                  __end_of_RTC_setTime 175A             matrix_checkButtons@counter 0078  
                   __end_of_therm_init 1E8B                           therm_delay@x 0072  
                         therm_delay@y 0070                           therm_delay@z 0073  
                       RTC_readClock@i 0076                              stringcode 1000  
               __end_of_buzzer_alarmOn 1ECF                          ??_systemReset 0069  
                    _RTC_setTimeBackup 12A4                  EEPROM_limitsRead@F940 01A0  
                   ?_RTC_setTimeBackup 0070                            _therm_delay 0800  
           __end_of_EEPROM_limitsWrite 1402             userInput_getTime@increment 0046  
                          _therm_reset 126F                  EEPROM_limitsRead@high 0024  
                           _OPTION_REG 0081              userInput_displayDate@date 0020  
                  ??_RTC_setTimeBackup 0075                               stringdir 1000  
                             stringtab 1000                      ??_therm_read_byte 0074  
           userInput_getTempLimits@day 0041                       ??_therm_get_temp 0022  
       __size_of_userInput_displayDate 0051                       _matrix_setInputs 11A4  
        __end_of_userInput_displayDate 1526         __size_of_userInput_displayTime 0057  
        __end_of_userInput_displayTime 157D                        ??_therm_getTemp 002B  
                        ?_eeprom_write 0070                             _STATUSbits 0003  
                         ?_eeprom_read 0070           __size_of_RTC_seperateNibbles 0023  
         __size_of_matrix_checkButtons 007A                       ?_buzzer_alarmOff 0070  
                      ?_buzzer_alarmOn 0070              __end_of_RTC_setTimeBackup 12DB  
               __size_of_RTC_readClock 002C  
